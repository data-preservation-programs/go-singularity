// Code generated by swaggo/swag. DO NOT EDIT.

package swagger

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Xinan Xu",
            "url": "https://github.com/data-preservation-programs/singularity/issues"
        },
        "license": {
            "name": "MIT + Apache 2.0",
            "url": "https://github.com/data-preservation-programs/singularity/blob/main/LICENSE"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/deal": {
            "post": {
                "description": "List all deals",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deal"
                ],
                "summary": "List all deals",
                "parameters": [
                    {
                        "description": "ListDealRequest",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/deal.ListDealRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Deal"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/piece/{id}/metadata": {
            "get": {
                "description": "Get metadata for a piece for how it may be reassembled from the data source",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Piece"
                ],
                "summary": "Get metadata for a piece",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Piece CID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/store.PieceReader"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/preparation": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Preparation"
                ],
                "summary": "List all preparations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Preparation"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Preparation"
                ],
                "summary": "Create a new preparation",
                "parameters": [
                    {
                        "description": "Create Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dataprep.CreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Preparation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/preparation/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Preparation"
                ],
                "summary": "Get the status of a preparation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dataprep.SourceStatus"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/preparation/{id}/output/{name}": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Preparation"
                ],
                "summary": "Attach an output storage with a preparation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Output storage name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Preparation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Preparation"
                ],
                "summary": "Detach an output storage from a preparation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Output storage name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Preparation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/preparation/{id}/piece": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Piece"
                ],
                "summary": "List all prepared pieces for a preparation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dataprep.PieceList"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Piece"
                ],
                "summary": "Add a piece to a preparation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Piece information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dataprep.AddPieceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Car"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/preparation/{id}/source/{name}": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Preparation"
                ],
                "summary": "Attach a source storage with a preparation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Source storage name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Preparation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/preparation/{id}/source/{name}/explore/{path}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Preparation"
                ],
                "summary": "Explore a directory in a prepared source storage",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Source storage name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Directory path",
                        "name": "path",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dataprep.ExploreResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/preparation/{id}/source/{name}/pause-daggen": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Pause an ongoing DAG generation job",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Storage name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Job"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/preparation/{id}/source/{name}/pause-pack": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Pause all packing job",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Storage name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Job"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/preparation/{id}/source/{name}/pause-pack/{job_id}": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Pause a specific packing job",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Storage name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Pack Job ID",
                        "name": "job_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Job"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/preparation/{id}/source/{name}/pause-scan": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Pause an ongoing scanning job",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Storage name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Job"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/preparation/{id}/source/{name}/start-daggen": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Start a new DAG generation job",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Storage name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Job"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/preparation/{id}/source/{name}/start-pack": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Start or restart all packing job",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Storage name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Job"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/preparation/{id}/source/{name}/start-pack/{job_id}": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Start or restart a specific packing job",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Storage name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Pack Job ID",
                        "name": "job_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Job"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/preparation/{id}/source/{name}/start-scan": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Start a new scanning job",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Storage name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Job"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/preparation/{id}/wallet": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet Association"
                ],
                "summary": "List all wallets of a preparation.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Wallet"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/preparation/{id}/wallet/{wallet}": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet Association"
                ],
                "summary": "Attach a new wallet with a preparation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Wallet Address",
                        "name": "wallet",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Preparation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet Association"
                ],
                "summary": "Detach a new wallet from a preparation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Wallet Address",
                        "name": "wallet",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Preparation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/schedule": {
            "post": {
                "description": "Create a new schedule",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deal Schedule"
                ],
                "summary": "Create a new schedule",
                "parameters": [
                    {
                        "description": "CreateRequest",
                        "name": "schedule",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schedule.CreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Schedule"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/schedule/{id}/pause": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deal Schedule"
                ],
                "summary": "Pause a specific schedule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Schedule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Schedule"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/schedule/{id}/resume": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deal Schedule"
                ],
                "summary": "Resume a specific schedule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Schedule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Schedule"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/schedules": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deal Schedule"
                ],
                "summary": "List all deal making schedules",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Schedule"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/send_deal": {
            "post": {
                "description": "Send a manual deal proposal",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deal"
                ],
                "summary": "Send a manual deal proposal",
                "parameters": [
                    {
                        "description": "Proposal",
                        "name": "proposal",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/deal.Proposal"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Deal"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "List all storages",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Storage"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/acd": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Acd storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateAcdStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/azureblob": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Azureblob storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateAzureblobStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/b2": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create B2 storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateB2StorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/box": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Box storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateBoxStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/drive": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Drive storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateDriveStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/dropbox": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Dropbox storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateDropboxStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/fichier": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Fichier storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateFichierStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/filefabric": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Filefabric storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateFilefabricStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/ftp": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Ftp storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateFtpStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/gcs": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Gcs storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateGcsStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/gphotos": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Gphotos storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateGphotosStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/hdfs": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Hdfs storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateHdfsStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/hidrive": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Hidrive storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateHidriveStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/http": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Http storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateHttpStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/internetarchive": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Internetarchive storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateInternetarchiveStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/jottacloud": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Jottacloud storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateJottacloudStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/koofr/digistorage": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Koofr storage with digistorage - Digi Storage, https://storage.rcs-rds.ro/",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateKoofrDigistorageStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/koofr/koofr": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Koofr storage with koofr - Koofr, https://app.koofr.net/",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateKoofrKoofrStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/koofr/other": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Koofr storage with other - Any other Koofr API compatible storage service",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateKoofrOtherStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/local": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Local storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateLocalStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/mailru": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Mailru storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateMailruStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/mega": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Mega storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateMegaStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/netstorage": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Netstorage storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateNetstorageStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/onedrive": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Onedrive storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateOnedriveStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/oos/env_auth": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Oos storage with env_auth - automatically pickup the credentials from runtime(env), first one to provide auth wins",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateOosEnv_authStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/oos/instance_principal_auth": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Oos storage with instance_principal_auth - use instance principals to authorize an instance to make API calls.",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateOosInstance_principal_authStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/oos/no_auth": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Oos storage with no_auth - no credentials needed, this is typically for reading public buckets",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateOosNo_authStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/oos/resource_principal_auth": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Oos storage with resource_principal_auth - use resource principals to make API calls",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateOosResource_principal_authStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/oos/user_principal_auth": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Oos storage with user_principal_auth - use an OCI user and an API key for authentication.",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateOosUser_principal_authStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/opendrive": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Opendrive storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateOpendriveStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/pcloud": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Pcloud storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreatePcloudStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/premiumizeme": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Premiumizeme storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreatePremiumizemeStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/putio": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Putio storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreatePutioStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/qingstor": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Qingstor storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateQingstorStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/alibaba": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with Alibaba - Alibaba Cloud Object Storage System (OSS) formerly Aliyun",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3AlibabaStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/arvancloud": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with ArvanCloud - Arvan Cloud Object Storage (AOS)",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3ArvanCloudStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/aws": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with AWS - Amazon Web Services (AWS) S3",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3AWSStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/ceph": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with Ceph - Ceph Object Storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3CephStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/chinamobile": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with ChinaMobile - China Mobile Ecloud Elastic Object Storage (EOS)",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3ChinaMobileStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/cloudflare": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with Cloudflare - Cloudflare R2 Storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3CloudflareStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/digitalocean": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with DigitalOcean - DigitalOcean Spaces",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3DigitalOceanStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/dreamhost": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with Dreamhost - Dreamhost DreamObjects",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3DreamhostStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/huaweiobs": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with HuaweiOBS - Huawei Object Storage Service",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3HuaweiOBSStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/ibmcos": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with IBMCOS - IBM COS S3",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3IBMCOSStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/idrive": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with IDrive - IDrive e2",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3IDriveStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/ionos": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with IONOS - IONOS Cloud",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3IONOSStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/liara": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with Liara - Liara Object Storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3LiaraStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/lyvecloud": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with LyveCloud - Seagate Lyve Cloud",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3LyveCloudStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/minio": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with Minio - Minio Object Storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3MinioStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/netease": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with Netease - Netease Object Storage (NOS)",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3NeteaseStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/other": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with Other - Any other S3 compatible provider",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3OtherStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/qiniu": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with Qiniu - Qiniu Object Storage (Kodo)",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3QiniuStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/rackcorp": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with RackCorp - RackCorp Object Storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3RackCorpStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/scaleway": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with Scaleway - Scaleway Object Storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3ScalewayStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/seaweedfs": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with SeaweedFS - SeaweedFS S3",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3SeaweedFSStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/stackpath": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with StackPath - StackPath Object Storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3StackPathStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/storj": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with Storj - Storj (S3 Compatible Gateway)",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3StorjStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/tencentcos": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with TencentCOS - Tencent Cloud Object Storage (COS)",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3TencentCOSStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/wasabi": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with Wasabi - Wasabi Object Storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3WasabiStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/seafile": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Seafile storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateSeafileStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/sftp": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Sftp storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateSftpStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/sharefile": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Sharefile storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateSharefileStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/sia": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Sia storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateSiaStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/smb": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Smb storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateSmbStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/storj/existing": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Storj storage with existing - Use an existing access grant.",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateStorjExistingStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/storj/new": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Storj storage with new - Create a new access grant from satellite address, API key, and passphrase.",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateStorjNewStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/sugarsync": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Sugarsync storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateSugarsyncStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/swift": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Swift storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateSwiftStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/uptobox": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Uptobox storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateUptoboxStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/webdav": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Webdav storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateWebdavStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/yandex": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Yandex storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateYandexStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/zoho": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Zoho storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateZohoStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/{name}": {
            "delete": {
                "tags": [
                    "Storage"
                ],
                "summary": "Remove a storage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Update a storage connection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Configuration",
                        "name": "config",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/{name}/explore/{path}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Explore directory entries in a storage system",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Storage name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Path in the storage system to explore",
                        "name": "path",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/storage.DirEntry"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/{storageType}": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create a new storage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Storage type",
                        "name": "storageType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Storage configuration",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/wallet": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "List all imported wallets",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Wallet"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "Import a private key",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/wallet.ImportRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Wallet"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/wallet/{address}": {
            "delete": {
                "tags": [
                    "Wallet"
                ],
                "summary": "Remove a wallet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.HTTPError": {
            "type": "object",
            "properties": {
                "err": {
                    "type": "string"
                }
            }
        },
        "dataprep.AddPieceRequest": {
            "type": "object",
            "properties": {
                "filePath": {
                    "description": "Path to the CAR file, used to determine the size of the file and root CID",
                    "type": "string"
                },
                "pieceCid": {
                    "description": "CID of the piece",
                    "type": "string"
                },
                "pieceSize": {
                    "description": "Size of the piece",
                    "type": "string"
                },
                "rootCid": {
                    "description": "Root CID of the CAR file, if not provided, will be determined by the CAR file header. Used to populate the label field of storage deal",
                    "type": "string"
                }
            }
        },
        "dataprep.CreateRequest": {
            "type": "object",
            "required": [
                "maxSize",
                "sourceStorages"
            ],
            "properties": {
                "deleteAfterExport": {
                    "description": "Whether to delete the source files after export",
                    "type": "boolean",
                    "default": false
                },
                "maxSize": {
                    "description": "Maximum size of the CAR files to be created",
                    "type": "string",
                    "default": "31.5GiB"
                },
                "outputStorages": {
                    "description": "Name of Output storage systems to be used for the output",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "pieceSize": {
                    "description": "Target piece size of the CAR files used for piece commitment calculation",
                    "type": "string"
                },
                "sourceStorages": {
                    "description": "Name of Source storage systems to be used for the source",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dataprep.DirEntry": {
            "type": "object",
            "properties": {
                "cid": {
                    "type": "string"
                },
                "fileVersions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dataprep.Version"
                    }
                },
                "isDir": {
                    "type": "boolean"
                },
                "path": {
                    "type": "string"
                }
            }
        },
        "dataprep.ExploreResult": {
            "type": "object",
            "properties": {
                "cid": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "subEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dataprep.DirEntry"
                    }
                }
            }
        },
        "dataprep.PieceList": {
            "type": "object",
            "properties": {
                "attachmentId": {
                    "type": "integer"
                },
                "pieces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Car"
                    }
                },
                "source": {
                    "$ref": "#/definitions/model.Storage"
                },
                "storageId": {
                    "type": "integer"
                }
            }
        },
        "dataprep.SourceStatus": {
            "type": "object",
            "properties": {
                "attachmentId": {
                    "type": "integer"
                },
                "jobs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Job"
                    }
                },
                "source": {
                    "$ref": "#/definitions/model.Storage"
                },
                "storageId": {
                    "type": "integer"
                }
            }
        },
        "dataprep.Version": {
            "type": "object",
            "properties": {
                "cid": {
                    "type": "string"
                },
                "hash": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lastModified": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                }
            }
        },
        "deal.ListDealRequest": {
            "type": "object",
            "properties": {
                "preparations": {
                    "description": "preparation ID filter",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "providers": {
                    "description": "provider filter",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "schedules": {
                    "description": "schedule id filter",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "sources": {
                    "description": "source filter",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "states": {
                    "description": "state filter",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.DealState"
                    }
                }
            }
        },
        "deal.Proposal": {
            "type": "object",
            "properties": {
                "clientAddress": {
                    "description": "Client address",
                    "type": "string"
                },
                "duration": {
                    "description": "Duration in epoch or in duration format, i.e. 1500000, 2400h",
                    "type": "string",
                    "default": "12740h"
                },
                "fileSize": {
                    "description": "File size in bytes for boost to fetch the CAR file",
                    "type": "integer"
                },
                "httpHeaders": {
                    "description": "http headers to be passed with the request (i.e. key=value)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ipni": {
                    "description": "Whether the deal should be IPNI",
                    "type": "boolean",
                    "default": true
                },
                "keepUnsealed": {
                    "description": "Whether the deal should be kept unsealed",
                    "type": "boolean",
                    "default": true
                },
                "pieceCid": {
                    "description": "Piece CID",
                    "type": "string"
                },
                "pieceSize": {
                    "description": "Piece size",
                    "type": "string"
                },
                "pricePerDeal": {
                    "description": "Price in FIL per deal",
                    "type": "number",
                    "default": 0
                },
                "pricePerGb": {
                    "description": "Price in FIL  per GiB",
                    "type": "number",
                    "default": 0
                },
                "pricePerGbEpoch": {
                    "description": "Price in FIL per GiB per epoch",
                    "type": "number",
                    "default": 0
                },
                "providerId": {
                    "description": "Provider ID",
                    "type": "string"
                },
                "rootCid": {
                    "description": "Root CID that is required as part of the deal proposal, if empty, will be set to empty CID",
                    "type": "string",
                    "default": "bafkqaaa"
                },
                "startDelay": {
                    "description": "Deal start delay in epoch or in duration format, i.e. 1000, 72h",
                    "type": "string",
                    "default": "72h"
                },
                "urlTemplate": {
                    "description": "URL template with PIECE_CID placeholder for boost to fetch the CAR file, i.e. http://127.0.0.1/piece/{PIECE_CID}.car",
                    "type": "string"
                },
                "verified": {
                    "description": "Whether the deal should be verified",
                    "type": "boolean",
                    "default": true
                }
            }
        },
        "fs.Duration": {
            "type": "integer",
            "enum": [
                -9223372036854775808,
                9223372036854775807,
                1,
                1000,
                1000000,
                1000000000,
                60000000000,
                3600000000000,
                3153600000000000000
            ],
            "x-enum-varnames": [
                "ModTimeNotSupported"
            ]
        },
        "fs.Tristate": {
            "type": "object",
            "properties": {
                "valid": {
                    "type": "boolean"
                },
                "value": {
                    "type": "boolean"
                }
            }
        },
        "model.CID": {
            "type": "object"
        },
        "model.Car": {
            "type": "object",
            "properties": {
                "attachmentId": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "fileSize": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "jobId": {
                    "type": "integer"
                },
                "pieceCid": {
                    "$ref": "#/definitions/model.CID"
                },
                "pieceSize": {
                    "type": "integer"
                },
                "preparationId": {
                    "description": "Association",
                    "type": "integer"
                },
                "rootCid": {
                    "$ref": "#/definitions/model.CID"
                },
                "storageId": {
                    "type": "integer"
                },
                "storagePath": {
                    "description": "StoragePath is the path to the CAR file inside the storage. If the StorageID is nil but StoragePath is not empty, it means the CAR file is stored at the local absolute path.",
                    "type": "string"
                }
            }
        },
        "model.ConfigMap": {
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        },
        "model.Deal": {
            "type": "object",
            "properties": {
                "clientId": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "dealId": {
                    "type": "integer"
                },
                "endEpoch": {
                    "type": "integer"
                },
                "errorMessage": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "label": {
                    "type": "string"
                },
                "pieceCid": {
                    "$ref": "#/definitions/model.CID"
                },
                "pieceSize": {
                    "type": "integer"
                },
                "price": {
                    "type": "string"
                },
                "proposalId": {
                    "type": "string"
                },
                "provider": {
                    "type": "string"
                },
                "scheduleId": {
                    "description": "Associations",
                    "type": "integer"
                },
                "sectorStartEpoch": {
                    "type": "integer"
                },
                "startEpoch": {
                    "type": "integer"
                },
                "state": {
                    "$ref": "#/definitions/model.DealState"
                },
                "updatedAt": {
                    "type": "string"
                },
                "verified": {
                    "type": "boolean"
                }
            }
        },
        "model.DealState": {
            "type": "string",
            "enum": [
                "proposed",
                "published",
                "active",
                "expired",
                "proposal_expired",
                "rejected",
                "slashed",
                "error"
            ],
            "x-enum-varnames": [
                "DealProposed",
                "DealPublished",
                "DealActive",
                "DealExpired",
                "DealProposalExpired",
                "DealRejected",
                "DealSlashed",
                "DealErrored"
            ]
        },
        "model.Job": {
            "type": "object",
            "properties": {
                "attachmentId": {
                    "type": "integer"
                },
                "errorMessage": {
                    "type": "string"
                },
                "errorStackTrace": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "state": {
                    "$ref": "#/definitions/model.JobState"
                },
                "type": {
                    "$ref": "#/definitions/model.JobType"
                },
                "workerId": {
                    "description": "Associations",
                    "type": "string"
                }
            }
        },
        "model.JobState": {
            "type": "string",
            "enum": [
                "created",
                "ready",
                "paused",
                "processing",
                "complete",
                "error"
            ],
            "x-enum-varnames": [
                "Created",
                "Ready",
                "Paused",
                "Processing",
                "Complete",
                "Error"
            ]
        },
        "model.JobType": {
            "type": "string",
            "enum": [
                "scan",
                "pack",
                "daggen"
            ],
            "x-enum-varnames": [
                "Scan",
                "Pack",
                "DagGen"
            ]
        },
        "model.Preparation": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deleteAfterExport": {
                    "description": "DeleteAfterExport is a flag that indicates whether the source files should be deleted after export.",
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "maxSize": {
                    "type": "integer"
                },
                "pieceSize": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "model.Schedule": {
            "type": "object",
            "properties": {
                "allowedPieceCids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "announceToIpni": {
                    "type": "boolean"
                },
                "createdAt": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "errorMessage": {
                    "type": "string"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "keepUnsealed": {
                    "type": "boolean"
                },
                "maxPendingDealNumber": {
                    "type": "integer"
                },
                "maxPendingDealSize": {
                    "type": "integer"
                },
                "notes": {
                    "type": "string"
                },
                "preparationId": {
                    "description": "Associations",
                    "type": "integer"
                },
                "pricePerDeal": {
                    "type": "number"
                },
                "pricePerGb": {
                    "type": "number"
                },
                "pricePerGbEpoch": {
                    "type": "number"
                },
                "provider": {
                    "type": "string"
                },
                "scheduleCron": {
                    "type": "string"
                },
                "scheduleDealNumber": {
                    "type": "integer"
                },
                "scheduleDealSize": {
                    "type": "integer"
                },
                "startDelay": {
                    "type": "integer"
                },
                "state": {
                    "$ref": "#/definitions/model.ScheduleState"
                },
                "totalDealNumber": {
                    "type": "integer"
                },
                "totalDealSize": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "urlTemplate": {
                    "type": "string"
                },
                "verified": {
                    "type": "boolean"
                }
            }
        },
        "model.ScheduleState": {
            "type": "string",
            "enum": [
                "active",
                "paused",
                "error",
                "completed"
            ],
            "x-enum-varnames": [
                "ScheduleActive",
                "SchedulePaused",
                "ScheduleError",
                "ScheduleCompleted"
            ]
        },
        "model.Storage": {
            "type": "object",
            "properties": {
                "config": {
                    "description": "Config is a map of key-value pairs that can be used to store RClone options.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ConfigMap"
                        }
                    ]
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "description": "Path is the path to the storage root.",
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "model.Wallet": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Address is the Filecoin full address of the wallet",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the short ID of the wallet",
                    "type": "string"
                },
                "privateKey": {
                    "description": "PrivateKey is the private key of the wallet",
                    "type": "string"
                }
            }
        },
        "schedule.CreateRequest": {
            "type": "object",
            "properties": {
                "allowedPieceCids": {
                    "description": "Allowed piece CIDs in this schedule",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "duration": {
                    "description": "Duration in epoch or in duration format, i.e. 1500000, 2400h",
                    "type": "string",
                    "default": "12840h"
                },
                "httpHeaders": {
                    "description": "http headers to be passed with the request (i.e. key=value)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ipni": {
                    "description": "Whether the deal should be IPNI",
                    "type": "boolean",
                    "default": true
                },
                "keepUnsealed": {
                    "description": "Whether the deal should be kept unsealed",
                    "type": "boolean",
                    "default": true
                },
                "maxPendingDealNumber": {
                    "description": "Max pending deal number",
                    "type": "integer"
                },
                "maxPendingDealSize": {
                    "description": "Max pending deal size in human readable format, i.e. 100 TiB",
                    "type": "string"
                },
                "notes": {
                    "description": "Notes",
                    "type": "string"
                },
                "preparationId": {
                    "description": "Preparation ID",
                    "type": "integer"
                },
                "pricePerDeal": {
                    "description": "Price in FIL per deal",
                    "type": "number",
                    "default": 0
                },
                "pricePerGb": {
                    "description": "Price in FIL  per GiB",
                    "type": "number",
                    "default": 0
                },
                "pricePerGbEpoch": {
                    "description": "Price in FIL per GiB per epoch",
                    "type": "number",
                    "default": 0
                },
                "provider": {
                    "description": "Provider",
                    "type": "string"
                },
                "scheduleCron": {
                    "description": "Schedule cron patter",
                    "type": "string"
                },
                "scheduleDealNumber": {
                    "description": "Number of deals per scheduled time",
                    "type": "integer"
                },
                "scheduleDealSize": {
                    "description": "Size of deals per schedule trigger in human readable format, i.e. 100 TiB",
                    "type": "string"
                },
                "startDelay": {
                    "description": "Deal start delay in epoch or in duration format, i.e. 1000, 72h",
                    "type": "string",
                    "default": "72h"
                },
                "totalDealNumber": {
                    "description": "Total number of deals",
                    "type": "integer"
                },
                "totalDealSize": {
                    "description": "Total size of deals in human readable format, i.e. 100 TiB",
                    "type": "string"
                },
                "urlTemplate": {
                    "description": "URL template with PIECE_CID placeholder for boost to fetch the CAR file, i.e. http://127.0.0.1/piece/{PIECE_CID}.car",
                    "type": "string"
                },
                "verified": {
                    "description": "Whether the deal should be verified",
                    "type": "boolean",
                    "default": true
                }
            }
        },
        "storage.BoxConfig": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "description": "Box App Primary Access Token",
                    "type": "string"
                },
                "authUrl": {
                    "description": "Auth server URL.",
                    "type": "string"
                },
                "boxConfigFile": {
                    "description": "Box App config.json location",
                    "type": "string"
                },
                "boxSubType": {
                    "type": "string",
                    "default": "user",
                    "example": "user"
                },
                "clientId": {
                    "description": "OAuth Client Id.",
                    "type": "string"
                },
                "clientSecret": {
                    "description": "OAuth Client Secret.",
                    "type": "string"
                },
                "commitRetries": {
                    "description": "Max number of times to try committing a multipart file.",
                    "type": "integer",
                    "default": 100
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,BackSlash,Del,Ctl,RightSpace,InvalidUtf8,Dot"
                },
                "listChunk": {
                    "description": "Size of listing chunk 1-1000.",
                    "type": "integer",
                    "default": 1000
                },
                "ownedBy": {
                    "description": "Only show items owned by the login (email address) passed in.",
                    "type": "string"
                },
                "rootFolderId": {
                    "description": "Fill in for rclone to use a non root folder as its starting point.",
                    "type": "string",
                    "default": "0"
                },
                "token": {
                    "description": "OAuth Access Token as a JSON blob.",
                    "type": "string"
                },
                "tokenUrl": {
                    "description": "Token server url.",
                    "type": "string"
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to multipart upload (\u003e= 50 MiB).",
                    "type": "string",
                    "default": "50Mi"
                }
            }
        },
        "storage.CreateAcdStorageRequest": {
            "type": "object"
        },
        "storage.CreateAzureblobStorageRequest": {
            "type": "object"
        },
        "storage.CreateB2StorageRequest": {
            "type": "object"
        },
        "storage.CreateBoxStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.BoxConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateDriveStorageRequest": {
            "type": "object"
        },
        "storage.CreateDropboxStorageRequest": {
            "type": "object"
        },
        "storage.CreateFichierStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.FichierConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateFilefabricStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.FilefabricConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateFtpStorageRequest": {
            "type": "object"
        },
        "storage.CreateGcsStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.GcsConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateGphotosStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.GphotosConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateHdfsStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.HdfsConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateHidriveStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.HidriveConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateHttpStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.HttpConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateInternetarchiveStorageRequest": {
            "type": "object"
        },
        "storage.CreateJottacloudStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.JottacloudConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateKoofrDigistorageStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.KoofrDigistorageConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateKoofrKoofrStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.KoofrKoofrConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateKoofrOtherStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.KoofrOtherConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateLocalStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.LocalConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateMailruStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.MailruConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateMegaStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.MegaConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateNetstorageStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.NetstorageConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateOnedriveStorageRequest": {
            "type": "object"
        },
        "storage.CreateOosEnv_authStorageRequest": {
            "type": "object"
        },
        "storage.CreateOosInstance_principal_authStorageRequest": {
            "type": "object"
        },
        "storage.CreateOosNo_authStorageRequest": {
            "type": "object"
        },
        "storage.CreateOosResource_principal_authStorageRequest": {
            "type": "object"
        },
        "storage.CreateOosUser_principal_authStorageRequest": {
            "type": "object"
        },
        "storage.CreateOpendriveStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.OpendriveConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreatePcloudStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.PcloudConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreatePremiumizemeStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.PremiumizemeConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreatePutioStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.PutioConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateQingstorStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.QingstorConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateRequest": {
            "type": "object",
            "required": [
                "name",
                "path"
            ],
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "provider": {
                    "type": "string"
                }
            }
        },
        "storage.CreateS3AWSStorageRequest": {
            "type": "object"
        },
        "storage.CreateS3AlibabaStorageRequest": {
            "type": "object"
        },
        "storage.CreateS3ArvanCloudStorageRequest": {
            "type": "object"
        },
        "storage.CreateS3CephStorageRequest": {
            "type": "object"
        },
        "storage.CreateS3ChinaMobileStorageRequest": {
            "type": "object"
        },
        "storage.CreateS3CloudflareStorageRequest": {
            "type": "object"
        },
        "storage.CreateS3DigitalOceanStorageRequest": {
            "type": "object"
        },
        "storage.CreateS3DreamhostStorageRequest": {
            "type": "object"
        },
        "storage.CreateS3HuaweiOBSStorageRequest": {
            "type": "object"
        },
        "storage.CreateS3IBMCOSStorageRequest": {
            "type": "object"
        },
        "storage.CreateS3IDriveStorageRequest": {
            "type": "object"
        },
        "storage.CreateS3IONOSStorageRequest": {
            "type": "object"
        },
        "storage.CreateS3LiaraStorageRequest": {
            "type": "object"
        },
        "storage.CreateS3LyveCloudStorageRequest": {
            "type": "object"
        },
        "storage.CreateS3MinioStorageRequest": {
            "type": "object"
        },
        "storage.CreateS3NeteaseStorageRequest": {
            "type": "object"
        },
        "storage.CreateS3OtherStorageRequest": {
            "type": "object"
        },
        "storage.CreateS3QiniuStorageRequest": {
            "type": "object"
        },
        "storage.CreateS3RackCorpStorageRequest": {
            "type": "object"
        },
        "storage.CreateS3ScalewayStorageRequest": {
            "type": "object"
        },
        "storage.CreateS3SeaweedFSStorageRequest": {
            "type": "object"
        },
        "storage.CreateS3StackPathStorageRequest": {
            "type": "object"
        },
        "storage.CreateS3StorjStorageRequest": {
            "type": "object"
        },
        "storage.CreateS3TencentCOSStorageRequest": {
            "type": "object"
        },
        "storage.CreateS3WasabiStorageRequest": {
            "type": "object"
        },
        "storage.CreateSeafileStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.SeafileConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateSftpStorageRequest": {
            "type": "object"
        },
        "storage.CreateSharefileStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.SharefileConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateSiaStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.SiaConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateSmbStorageRequest": {
            "type": "object"
        },
        "storage.CreateStorjExistingStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.StorjExistingConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateStorjNewStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.StorjNewConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateSugarsyncStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.SugarsyncConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateSwiftStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.SwiftConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateUptoboxStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.UptoboxConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateWebdavStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.WebdavConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateYandexStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.YandexConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateZohoStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.ZohoConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.DirEntry": {
            "type": "object",
            "properties": {
                "dirId": {
                    "type": "string"
                },
                "hash": {
                    "type": "string"
                },
                "isDir": {
                    "type": "boolean"
                },
                "lastModified": {
                    "type": "string"
                },
                "numItems": {
                    "type": "integer"
                },
                "path": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                }
            }
        },
        "storage.FichierConfig": {
            "type": "object",
            "properties": {
                "apiKey": {
                    "description": "Your API Key, get it from https://1fichier.com/console/params.pl.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,LtGt,DoubleQuote,SingleQuote,BackQuote,Dollar,BackSlash,Del,Ctl,LeftSpace,RightSpace,InvalidUtf8,Dot"
                },
                "filePassword": {
                    "description": "If you want to download a shared file that is password protected, add this parameter.",
                    "type": "string"
                },
                "folderPassword": {
                    "description": "If you want to list the files in a shared folder that is password protected, add this parameter.",
                    "type": "string"
                },
                "sharedFolder": {
                    "description": "If you want to download a shared folder, add this parameter.",
                    "type": "string"
                }
            }
        },
        "storage.FilefabricConfig": {
            "type": "object",
            "properties": {
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,Del,Ctl,InvalidUtf8,Dot"
                },
                "permanentToken": {
                    "description": "Permanent Authentication Token.",
                    "type": "string"
                },
                "rootFolderId": {
                    "description": "ID of the root folder.",
                    "type": "string"
                },
                "token": {
                    "description": "Session Token.",
                    "type": "string"
                },
                "tokenExpiry": {
                    "description": "Token expiry time.",
                    "type": "string"
                },
                "url": {
                    "description": "URL of the Enterprise File Fabric to connect to.",
                    "type": "string",
                    "example": "https://storagemadeeasy.com"
                },
                "version": {
                    "description": "Version read from the file fabric.",
                    "type": "string"
                }
            }
        },
        "storage.GcsConfig": {
            "type": "object",
            "properties": {
                "anonymous": {
                    "description": "Access public buckets and objects without credentials.",
                    "type": "boolean",
                    "default": false
                },
                "authUrl": {
                    "description": "Auth server URL.",
                    "type": "string"
                },
                "bucketAcl": {
                    "description": "Access Control List for new buckets.",
                    "type": "string",
                    "example": "authenticatedRead"
                },
                "bucketPolicyOnly": {
                    "description": "Access checks should use bucket-level IAM policies.",
                    "type": "boolean",
                    "default": false
                },
                "clientId": {
                    "description": "OAuth Client Id.",
                    "type": "string"
                },
                "clientSecret": {
                    "description": "OAuth Client Secret.",
                    "type": "string"
                },
                "decompress": {
                    "description": "If set this will decompress gzip encoded objects.",
                    "type": "boolean",
                    "default": false
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,CrLf,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for the service.",
                    "type": "string"
                },
                "envAuth": {
                    "description": "Get GCP IAM credentials from runtime (environment variables or instance meta data if no env vars).",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "location": {
                    "description": "Location for the newly created buckets.",
                    "type": "string",
                    "example": ""
                },
                "noCheckBucket": {
                    "description": "If set, don't attempt to check the bucket exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "objectAcl": {
                    "description": "Access Control List for new objects.",
                    "type": "string",
                    "example": "authenticatedRead"
                },
                "projectNumber": {
                    "description": "Project number.",
                    "type": "string"
                },
                "serviceAccountCredentials": {
                    "description": "Service Account Credentials JSON blob.",
                    "type": "string"
                },
                "serviceAccountFile": {
                    "description": "Service Account Credentials JSON file path.",
                    "type": "string"
                },
                "storageClass": {
                    "description": "The storage class to use when storing objects in Google Cloud Storage.",
                    "type": "string",
                    "example": ""
                },
                "token": {
                    "description": "OAuth Access Token as a JSON blob.",
                    "type": "string"
                },
                "tokenUrl": {
                    "description": "Token server url.",
                    "type": "string"
                }
            }
        },
        "storage.GphotosConfig": {
            "type": "object",
            "properties": {
                "authUrl": {
                    "description": "Auth server URL.",
                    "type": "string"
                },
                "clientId": {
                    "description": "OAuth Client Id.",
                    "type": "string"
                },
                "clientSecret": {
                    "description": "OAuth Client Secret.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,CrLf,InvalidUtf8,Dot"
                },
                "includeArchived": {
                    "description": "Also view and download archived media.",
                    "type": "boolean",
                    "default": false
                },
                "readOnly": {
                    "description": "Set to make the Google Photos backend read only.",
                    "type": "boolean",
                    "default": false
                },
                "readSize": {
                    "description": "Set to read the size of media items.",
                    "type": "boolean",
                    "default": false
                },
                "startYear": {
                    "description": "Year limits the photos to be downloaded to those which are uploaded after the given year.",
                    "type": "integer",
                    "default": 2000
                },
                "token": {
                    "description": "OAuth Access Token as a JSON blob.",
                    "type": "string"
                },
                "tokenUrl": {
                    "description": "Token server url.",
                    "type": "string"
                }
            }
        },
        "storage.HdfsConfig": {
            "type": "object",
            "properties": {
                "dataTransferProtection": {
                    "description": "Kerberos data transfer protection: authentication|integrity|privacy.",
                    "type": "string",
                    "example": "privacy"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,Colon,Del,Ctl,InvalidUtf8,Dot"
                },
                "namenode": {
                    "description": "Hadoop name node and port.",
                    "type": "string"
                },
                "servicePrincipalName": {
                    "description": "Kerberos service principal name for the namenode.",
                    "type": "string"
                },
                "username": {
                    "description": "Hadoop user name.",
                    "type": "string",
                    "example": "root"
                }
            }
        },
        "storage.HidriveConfig": {
            "type": "object",
            "properties": {
                "authUrl": {
                    "description": "Auth server URL.",
                    "type": "string"
                },
                "chunkSize": {
                    "description": "Chunksize for chunked uploads.",
                    "type": "string",
                    "default": "48Mi"
                },
                "clientId": {
                    "description": "OAuth Client Id.",
                    "type": "string"
                },
                "clientSecret": {
                    "description": "OAuth Client Secret.",
                    "type": "string"
                },
                "disableFetchingMemberCount": {
                    "description": "Do not fetch number of objects in directories unless it is absolutely necessary.",
                    "type": "boolean",
                    "default": false
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for the service.",
                    "type": "string",
                    "default": "https://api.hidrive.strato.com/2.1"
                },
                "rootPrefix": {
                    "description": "The root/parent folder for all paths.",
                    "type": "string",
                    "default": "/",
                    "example": "/"
                },
                "scopeAccess": {
                    "description": "Access permissions that rclone should use when requesting access from HiDrive.",
                    "type": "string",
                    "default": "rw",
                    "example": "rw"
                },
                "scopeRole": {
                    "description": "User-level that rclone should use when requesting access from HiDrive.",
                    "type": "string",
                    "default": "user",
                    "example": "user"
                },
                "token": {
                    "description": "OAuth Access Token as a JSON blob.",
                    "type": "string"
                },
                "tokenUrl": {
                    "description": "Token server url.",
                    "type": "string"
                },
                "uploadConcurrency": {
                    "description": "Concurrency for chunked uploads.",
                    "type": "integer",
                    "default": 4
                },
                "uploadCutoff": {
                    "description": "Cutoff/Threshold for chunked uploads.",
                    "type": "string",
                    "default": "96Mi"
                }
            }
        },
        "storage.HttpConfig": {
            "type": "object",
            "properties": {
                "headers": {
                    "description": "Set HTTP headers for all transactions.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "noHead": {
                    "description": "Don't use HEAD requests.",
                    "type": "boolean",
                    "default": false
                },
                "noSlash": {
                    "description": "Set this if the site doesn't end directories with /.",
                    "type": "boolean",
                    "default": false
                },
                "url": {
                    "description": "URL of HTTP host to connect to.",
                    "type": "string"
                }
            }
        },
        "storage.JottacloudConfig": {
            "type": "object",
            "properties": {
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,LtGt,DoubleQuote,Colon,Question,Asterisk,Pipe,Del,Ctl,InvalidUtf8,Dot"
                },
                "hardDelete": {
                    "description": "Delete files permanently rather than putting them into the trash.",
                    "type": "boolean",
                    "default": false
                },
                "md5MemoryLimit": {
                    "description": "Files bigger than this will be cached on disk to calculate the MD5 if required.",
                    "type": "string",
                    "default": "10Mi"
                },
                "noVersions": {
                    "description": "Avoid server side versioning by deleting files and recreating files instead of overwriting them.",
                    "type": "boolean",
                    "default": false
                },
                "trashedOnly": {
                    "description": "Only show files that are in the trash.",
                    "type": "boolean",
                    "default": false
                },
                "uploadResumeLimit": {
                    "description": "Files bigger than this can be resumed if the upload fail's.",
                    "type": "string",
                    "default": "10Mi"
                }
            }
        },
        "storage.KoofrDigistorageConfig": {
            "type": "object",
            "properties": {
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,BackSlash,Del,Ctl,InvalidUtf8,Dot"
                },
                "mountid": {
                    "description": "Mount ID of the mount to use.",
                    "type": "string"
                },
                "password": {
                    "description": "Your password for rclone (generate one at https://storage.rcs-rds.ro/app/admin/preferences/password).",
                    "type": "string"
                },
                "setmtime": {
                    "description": "Does the backend support setting modification time.",
                    "type": "boolean",
                    "default": true
                },
                "user": {
                    "description": "Your user name.",
                    "type": "string"
                }
            }
        },
        "storage.KoofrKoofrConfig": {
            "type": "object",
            "properties": {
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,BackSlash,Del,Ctl,InvalidUtf8,Dot"
                },
                "mountid": {
                    "description": "Mount ID of the mount to use.",
                    "type": "string"
                },
                "password": {
                    "description": "Your password for rclone (generate one at https://app.koofr.net/app/admin/preferences/password).",
                    "type": "string"
                },
                "setmtime": {
                    "description": "Does the backend support setting modification time.",
                    "type": "boolean",
                    "default": true
                },
                "user": {
                    "description": "Your user name.",
                    "type": "string"
                }
            }
        },
        "storage.KoofrOtherConfig": {
            "type": "object",
            "properties": {
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,BackSlash,Del,Ctl,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "The Koofr API endpoint to use.",
                    "type": "string"
                },
                "mountid": {
                    "description": "Mount ID of the mount to use.",
                    "type": "string"
                },
                "password": {
                    "description": "Your password for rclone (generate one at your service's settings page).",
                    "type": "string"
                },
                "setmtime": {
                    "description": "Does the backend support setting modification time.",
                    "type": "boolean",
                    "default": true
                },
                "user": {
                    "description": "Your user name.",
                    "type": "string"
                }
            }
        },
        "storage.LocalConfig": {
            "type": "object",
            "properties": {
                "caseInsensitive": {
                    "description": "Force the filesystem to report itself as case insensitive.",
                    "type": "boolean",
                    "default": false
                },
                "caseSensitive": {
                    "description": "Force the filesystem to report itself as case sensitive.",
                    "type": "boolean",
                    "default": false
                },
                "copyLinks": {
                    "description": "Follow symlinks and copy the pointed to item.",
                    "type": "boolean",
                    "default": false
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,Dot"
                },
                "links": {
                    "description": "Translate symlinks to/from regular files with a '.rclonelink' extension.",
                    "type": "boolean",
                    "default": false
                },
                "noCheckUpdated": {
                    "description": "Don't check to see if the files change during upload.",
                    "type": "boolean",
                    "default": false
                },
                "noPreallocate": {
                    "description": "Disable preallocation of disk space for transferred files.",
                    "type": "boolean",
                    "default": false
                },
                "noSetModtime": {
                    "description": "Disable setting modtime.",
                    "type": "boolean",
                    "default": false
                },
                "noSparse": {
                    "description": "Disable sparse files for multi-thread downloads.",
                    "type": "boolean",
                    "default": false
                },
                "nounc": {
                    "description": "Disable UNC (long path names) conversion on Windows.",
                    "type": "boolean",
                    "default": false,
                    "example": true
                },
                "oneFileSystem": {
                    "description": "Don't cross filesystem boundaries (unix/macOS only).",
                    "type": "boolean",
                    "default": false
                },
                "skipLinks": {
                    "description": "Don't warn about skipped symlinks.",
                    "type": "boolean",
                    "default": false
                },
                "unicodeNormalization": {
                    "description": "Apply unicode NFC normalization to paths and filenames.",
                    "type": "boolean",
                    "default": false
                },
                "zeroSizeLinks": {
                    "description": "Assume the Stat size of links is zero (and read them instead) (deprecated).",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "storage.MailruConfig": {
            "type": "object",
            "properties": {
                "checkHash": {
                    "description": "What should copy do if file checksum is mismatched or invalid.",
                    "type": "boolean",
                    "default": true,
                    "example": true
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,LtGt,DoubleQuote,Colon,Question,Asterisk,Pipe,BackSlash,Del,Ctl,InvalidUtf8,Dot"
                },
                "pass": {
                    "description": "Password.",
                    "type": "string"
                },
                "quirks": {
                    "description": "Comma separated list of internal maintenance flags.",
                    "type": "string"
                },
                "speedupEnable": {
                    "description": "Skip full upload if there is another file with same data hash.",
                    "type": "boolean",
                    "default": true,
                    "example": true
                },
                "speedupFilePatterns": {
                    "description": "Comma separated list of file name patterns eligible for speedup (put by hash).",
                    "type": "string",
                    "default": "*.mkv,*.avi,*.mp4,*.mp3,*.zip,*.gz,*.rar,*.pdf",
                    "example": ""
                },
                "speedupMaxDisk": {
                    "description": "This option allows you to disable speedup (put by hash) for large files.",
                    "type": "string",
                    "default": "3Gi",
                    "example": "0"
                },
                "speedupMaxMemory": {
                    "description": "Files larger than the size given below will always be hashed on disk.",
                    "type": "string",
                    "default": "32Mi",
                    "example": "0"
                },
                "user": {
                    "description": "User name (usually email).",
                    "type": "string"
                },
                "userAgent": {
                    "description": "HTTP user agent used internally by client.",
                    "type": "string"
                }
            }
        },
        "storage.MegaConfig": {
            "type": "object",
            "properties": {
                "debug": {
                    "description": "Output more debug from Mega.",
                    "type": "boolean",
                    "default": false
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "hardDelete": {
                    "description": "Delete files permanently rather than putting them into the trash.",
                    "type": "boolean",
                    "default": false
                },
                "pass": {
                    "description": "Password.",
                    "type": "string"
                },
                "useHttps": {
                    "description": "Use HTTPS for transfers.",
                    "type": "boolean",
                    "default": false
                },
                "user": {
                    "description": "User name.",
                    "type": "string"
                }
            }
        },
        "storage.NetstorageConfig": {
            "type": "object",
            "properties": {
                "account": {
                    "description": "Set the NetStorage account name",
                    "type": "string"
                },
                "host": {
                    "description": "Domain+path of NetStorage host to connect to.",
                    "type": "string"
                },
                "protocol": {
                    "description": "Select between HTTP or HTTPS protocol.",
                    "type": "string",
                    "default": "https",
                    "example": "http"
                },
                "secret": {
                    "description": "Set the NetStorage account secret/G2O key for authentication.",
                    "type": "string"
                }
            }
        },
        "storage.OpendriveConfig": {
            "type": "object",
            "properties": {
                "chunkSize": {
                    "description": "Files will be uploaded in chunks this size.",
                    "type": "string",
                    "default": "10Mi"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,LtGt,DoubleQuote,Colon,Question,Asterisk,Pipe,BackSlash,LeftSpace,LeftCrLfHtVt,RightSpace,RightCrLfHtVt,InvalidUtf8,Dot"
                },
                "password": {
                    "description": "Password.",
                    "type": "string"
                },
                "username": {
                    "description": "Username.",
                    "type": "string"
                }
            }
        },
        "storage.PcloudConfig": {
            "type": "object",
            "properties": {
                "authUrl": {
                    "description": "Auth server URL.",
                    "type": "string"
                },
                "clientId": {
                    "description": "OAuth Client Id.",
                    "type": "string"
                },
                "clientSecret": {
                    "description": "OAuth Client Secret.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,BackSlash,Del,Ctl,InvalidUtf8,Dot"
                },
                "hostname": {
                    "description": "Hostname to connect to.",
                    "type": "string",
                    "default": "api.pcloud.com",
                    "example": "api.pcloud.com"
                },
                "password": {
                    "description": "Your pcloud password.",
                    "type": "string"
                },
                "rootFolderId": {
                    "description": "Fill in for rclone to use a non root folder as its starting point.",
                    "type": "string",
                    "default": "d0"
                },
                "token": {
                    "description": "OAuth Access Token as a JSON blob.",
                    "type": "string"
                },
                "tokenUrl": {
                    "description": "Token server url.",
                    "type": "string"
                },
                "username": {
                    "description": "Your pcloud username.",
                    "type": "string"
                }
            }
        },
        "storage.PremiumizemeConfig": {
            "type": "object",
            "properties": {
                "apiKey": {
                    "description": "API Key.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,DoubleQuote,BackSlash,Del,Ctl,InvalidUtf8,Dot"
                }
            }
        },
        "storage.PutioConfig": {
            "type": "object",
            "properties": {
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,BackSlash,Del,Ctl,InvalidUtf8,Dot"
                }
            }
        },
        "storage.QingstorConfig": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "description": "QingStor Access Key ID.",
                    "type": "string"
                },
                "chunkSize": {
                    "description": "Chunk size to use for uploading.",
                    "type": "string",
                    "default": "4Mi"
                },
                "connectionRetries": {
                    "description": "Number of connection retries.",
                    "type": "integer",
                    "default": 3
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,Ctl,InvalidUtf8"
                },
                "endpoint": {
                    "description": "Enter an endpoint URL to connection QingStor API.",
                    "type": "string"
                },
                "envAuth": {
                    "description": "Get QingStor credentials from runtime.",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "secretAccessKey": {
                    "description": "QingStor Secret Access Key (password).",
                    "type": "string"
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 1
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                },
                "zone": {
                    "description": "Zone to connect to.",
                    "type": "string",
                    "example": "pek3a"
                }
            }
        },
        "storage.SeafileConfig": {
            "type": "object",
            "properties": {
                "2fa": {
                    "description": "Two-factor authentication ('true' if the account has 2FA enabled).",
                    "type": "boolean",
                    "default": false
                },
                "authToken": {
                    "description": "Authentication token.",
                    "type": "string"
                },
                "createLibrary": {
                    "description": "Should rclone create a library if it doesn't exist.",
                    "type": "boolean",
                    "default": false
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,DoubleQuote,BackSlash,Ctl,InvalidUtf8"
                },
                "library": {
                    "description": "Name of the library.",
                    "type": "string"
                },
                "libraryKey": {
                    "description": "Library password (for encrypted libraries only).",
                    "type": "string"
                },
                "pass": {
                    "description": "Password.",
                    "type": "string"
                },
                "url": {
                    "description": "URL of seafile host to connect to.",
                    "type": "string",
                    "example": "https://cloud.seafile.com/"
                },
                "user": {
                    "description": "User name (usually email address).",
                    "type": "string"
                }
            }
        },
        "storage.SharefileConfig": {
            "type": "object",
            "properties": {
                "chunkSize": {
                    "description": "Upload chunk size.",
                    "type": "string",
                    "default": "64Mi"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,LtGt,DoubleQuote,Colon,Question,Asterisk,Pipe,BackSlash,Ctl,LeftSpace,LeftPeriod,RightSpace,RightPeriod,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for API calls.",
                    "type": "string"
                },
                "rootFolderId": {
                    "description": "ID of the root folder.",
                    "type": "string",
                    "example": ""
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to multipart upload.",
                    "type": "string",
                    "default": "128Mi"
                }
            }
        },
        "storage.SiaConfig": {
            "type": "object",
            "properties": {
                "apiPassword": {
                    "description": "Sia Daemon API Password.",
                    "type": "string"
                },
                "apiUrl": {
                    "description": "Sia daemon API URL, like http://sia.daemon.host:9980.",
                    "type": "string",
                    "default": "http://127.0.0.1:9980"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,Question,Hash,Percent,Del,Ctl,InvalidUtf8,Dot"
                },
                "userAgent": {
                    "description": "Siad User Agent",
                    "type": "string",
                    "default": "Sia-Agent"
                }
            }
        },
        "storage.StorjExistingConfig": {
            "type": "object",
            "properties": {
                "accessGrant": {
                    "description": "Access grant.",
                    "type": "string"
                }
            }
        },
        "storage.StorjNewConfig": {
            "type": "object",
            "properties": {
                "apiKey": {
                    "description": "API key.",
                    "type": "string"
                },
                "passphrase": {
                    "description": "Encryption passphrase.",
                    "type": "string"
                },
                "satelliteAddress": {
                    "description": "Satellite address.",
                    "type": "string",
                    "default": "us1.storj.io",
                    "example": "us1.storj.io"
                }
            }
        },
        "storage.SugarsyncConfig": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "description": "Sugarsync Access Key ID.",
                    "type": "string"
                },
                "appId": {
                    "description": "Sugarsync App ID.",
                    "type": "string"
                },
                "authorization": {
                    "description": "Sugarsync authorization.",
                    "type": "string"
                },
                "authorizationExpiry": {
                    "description": "Sugarsync authorization expiry.",
                    "type": "string"
                },
                "deletedId": {
                    "description": "Sugarsync deleted folder id.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,Ctl,InvalidUtf8,Dot"
                },
                "hardDelete": {
                    "description": "Permanently delete files if true",
                    "type": "boolean",
                    "default": false
                },
                "privateAccessKey": {
                    "description": "Sugarsync Private Access Key.",
                    "type": "string"
                },
                "refreshToken": {
                    "description": "Sugarsync refresh token.",
                    "type": "string"
                },
                "rootId": {
                    "description": "Sugarsync root id.",
                    "type": "string"
                },
                "user": {
                    "description": "Sugarsync user.",
                    "type": "string"
                }
            }
        },
        "storage.SwiftConfig": {
            "type": "object",
            "properties": {
                "applicationCredentialId": {
                    "description": "Application Credential ID (OS_APPLICATION_CREDENTIAL_ID).",
                    "type": "string"
                },
                "applicationCredentialName": {
                    "description": "Application Credential Name (OS_APPLICATION_CREDENTIAL_NAME).",
                    "type": "string"
                },
                "applicationCredentialSecret": {
                    "description": "Application Credential Secret (OS_APPLICATION_CREDENTIAL_SECRET).",
                    "type": "string"
                },
                "auth": {
                    "description": "Authentication URL for server (OS_AUTH_URL).",
                    "type": "string",
                    "example": "https://auth.api.rackspacecloud.com/v1.0"
                },
                "authToken": {
                    "description": "Auth Token from alternate authentication - optional (OS_AUTH_TOKEN).",
                    "type": "string"
                },
                "authVersion": {
                    "description": "AuthVersion - optional - set to (1,2,3) if your auth URL has no version (ST_AUTH_VERSION).",
                    "type": "integer",
                    "default": 0
                },
                "chunkSize": {
                    "description": "Above this size files will be chunked into a _segments container.",
                    "type": "string",
                    "default": "5Gi"
                },
                "domain": {
                    "description": "User domain - optional (v3 auth) (OS_USER_DOMAIN_NAME)",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8"
                },
                "endpointType": {
                    "description": "Endpoint type to choose from the service catalogue (OS_ENDPOINT_TYPE).",
                    "type": "string",
                    "default": "public",
                    "example": "public"
                },
                "envAuth": {
                    "description": "Get swift credentials from environment variables in standard OpenStack form.",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "key": {
                    "description": "API key or password (OS_PASSWORD).",
                    "type": "string"
                },
                "leavePartsOnError": {
                    "description": "If true avoid calling abort upload on a failure.",
                    "type": "boolean",
                    "default": false
                },
                "noChunk": {
                    "description": "Don't chunk files during streaming upload.",
                    "type": "boolean",
                    "default": false
                },
                "noLargeObjects": {
                    "description": "Disable support for static and dynamic large objects",
                    "type": "boolean",
                    "default": false
                },
                "region": {
                    "description": "Region name - optional (OS_REGION_NAME).",
                    "type": "string"
                },
                "storagePolicy": {
                    "description": "The storage policy to use when creating a new container.",
                    "type": "string",
                    "example": ""
                },
                "storageUrl": {
                    "description": "Storage URL - optional (OS_STORAGE_URL).",
                    "type": "string"
                },
                "tenant": {
                    "description": "Tenant name - optional for v1 auth, this or tenant_id required otherwise (OS_TENANT_NAME or OS_PROJECT_NAME).",
                    "type": "string"
                },
                "tenantDomain": {
                    "description": "Tenant domain - optional (v3 auth) (OS_PROJECT_DOMAIN_NAME).",
                    "type": "string"
                },
                "tenantId": {
                    "description": "Tenant ID - optional for v1 auth, this or tenant required otherwise (OS_TENANT_ID).",
                    "type": "string"
                },
                "user": {
                    "description": "User name to log in (OS_USERNAME).",
                    "type": "string"
                },
                "userId": {
                    "description": "User ID to log in - optional - most swift systems use user and leave this blank (v3 auth) (OS_USER_ID).",
                    "type": "string"
                }
            }
        },
        "storage.UptoboxConfig": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "description": "Your access token.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,LtGt,DoubleQuote,BackQuote,Del,Ctl,LeftSpace,InvalidUtf8,Dot"
                }
            }
        },
        "storage.WebdavConfig": {
            "type": "object",
            "properties": {
                "bearerToken": {
                    "description": "Bearer token instead of user/pass (e.g. a Macaroon).",
                    "type": "string"
                },
                "bearerTokenCommand": {
                    "description": "Command to run to get a bearer token.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string"
                },
                "headers": {
                    "description": "Set HTTP headers for all transactions.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "pass": {
                    "description": "Password.",
                    "type": "string"
                },
                "url": {
                    "description": "URL of http host to connect to.",
                    "type": "string"
                },
                "user": {
                    "description": "User name.",
                    "type": "string"
                },
                "vendor": {
                    "description": "Name of the WebDAV site/service/software you are using.",
                    "type": "string",
                    "example": "nextcloud"
                }
            }
        },
        "storage.YandexConfig": {
            "type": "object",
            "properties": {
                "authUrl": {
                    "description": "Auth server URL.",
                    "type": "string"
                },
                "clientId": {
                    "description": "OAuth Client Id.",
                    "type": "string"
                },
                "clientSecret": {
                    "description": "OAuth Client Secret.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,Del,Ctl,InvalidUtf8,Dot"
                },
                "hardDelete": {
                    "description": "Delete files permanently rather than putting them into the trash.",
                    "type": "boolean",
                    "default": false
                },
                "token": {
                    "description": "OAuth Access Token as a JSON blob.",
                    "type": "string"
                },
                "tokenUrl": {
                    "description": "Token server url.",
                    "type": "string"
                }
            }
        },
        "storage.ZohoConfig": {
            "type": "object",
            "properties": {
                "authUrl": {
                    "description": "Auth server URL.",
                    "type": "string"
                },
                "clientId": {
                    "description": "OAuth Client Id.",
                    "type": "string"
                },
                "clientSecret": {
                    "description": "OAuth Client Secret.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Del,Ctl,InvalidUtf8"
                },
                "region": {
                    "description": "Zoho region to connect to.",
                    "type": "string",
                    "example": "com"
                },
                "token": {
                    "description": "OAuth Access Token as a JSON blob.",
                    "type": "string"
                },
                "tokenUrl": {
                    "description": "Token server url.",
                    "type": "string"
                }
            }
        },
        "store.PieceReader": {
            "type": "object"
        },
        "wallet.ImportRequest": {
            "type": "object",
            "properties": {
                "privateKey": {
                    "description": "This is the exported private key from lotus wallet export",
                    "type": "string"
                }
            }
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "beta",
	Host:             "localhost:9090",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Singularity API",
	Description:      "This is the API for Singularity, a tool for large-scale clients with PB-scale data onboarding to Filecoin network.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
