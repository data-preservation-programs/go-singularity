{
    "swagger": "2.0",
    "info": {
        "description": "This is the API for Singularity, a tool for large-scale clients with PB-scale data onboarding to Filecoin network.",
        "title": "Singularity API",
        "contact": {
            "name": "Xinan Xu",
            "url": "https://github.com/data-preservation-programs/singularity/issues"
        },
        "license": {
            "name": "MIT + Apache 2.0",
            "url": "https://github.com/data-preservation-programs/singularity/blob/main/LICENSE"
        },
        "version": "beta"
    },
    "host": "localhost:9090",
    "basePath": "/api",
    "paths": {
        "/deal": {
            "post": {
                "description": "List all deals",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deal"
                ],
                "summary": "List all deals",
                "parameters": [
                    {
                        "description": "ListDealRequest",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/deal.ListDealRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Deal"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/piece/{id}/metadata": {
            "get": {
                "description": "Get metadata for a piece for how it may be reassembled from the data source",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Piece"
                ],
                "summary": "Get metadata for a piece",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Piece CID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/store.PieceReader"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/preparation": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Preparation"
                ],
                "summary": "List all preparations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Preparation"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Preparation"
                ],
                "summary": "Create a new preparation",
                "parameters": [
                    {
                        "description": "Create Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dataprep.CreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Preparation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/preparation/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Preparation"
                ],
                "summary": "Get the status of a preparation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID or name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dataprep.SourceStatus"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/preparation/{id}/output/{name}": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Preparation"
                ],
                "summary": "Attach an output storage with a preparation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID or name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Output storage ID or name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Preparation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Preparation"
                ],
                "summary": "Detach an output storage from a preparation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID or name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Output storage ID or name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Preparation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/preparation/{id}/piece": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Piece"
                ],
                "summary": "List all prepared pieces for a preparation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID or name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dataprep.PieceList"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Piece"
                ],
                "summary": "Add a piece to a preparation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID or name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Piece information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dataprep.AddPieceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Car"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/preparation/{id}/source/{name}": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Preparation"
                ],
                "summary": "Attach a source storage with a preparation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID or name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Source storage ID or name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Preparation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/preparation/{id}/source/{name}/explore/{path}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Preparation"
                ],
                "summary": "Explore a directory in a prepared source storage",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID or name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Source storage ID or name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Directory path",
                        "name": "path",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dataprep.ExploreResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/preparation/{id}/source/{name}/pause-daggen": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Pause an ongoing DAG generation job",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID or name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Storage ID or name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Job"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/preparation/{id}/source/{name}/pause-pack": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Pause all packing job",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID or name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Storage ID or name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Job"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/preparation/{id}/source/{name}/pause-pack/{job_id}": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Pause a specific packing job",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID or name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Storage ID or name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Pack Job ID",
                        "name": "job_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Job"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/preparation/{id}/source/{name}/pause-scan": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Pause an ongoing scanning job",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID or name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Storage ID or name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Job"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/preparation/{id}/source/{name}/start-daggen": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Start a new DAG generation job",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID or name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Storage ID or name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Job"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/preparation/{id}/source/{name}/start-pack": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Start or restart all packing job",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID or name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Storage ID or name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Job"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/preparation/{id}/source/{name}/start-pack/{job_id}": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Start or restart a specific packing job",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID or name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Storage ID or name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Pack Job ID",
                        "name": "job_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Job"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/preparation/{id}/source/{name}/start-scan": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Start a new scanning job",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID or name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Storage ID or name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Job"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/preparation/{id}/wallet": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet Association"
                ],
                "summary": "List all wallets of a preparation.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID or name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Wallet"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/preparation/{id}/wallet/{wallet}": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet Association"
                ],
                "summary": "Attach a new wallet with a preparation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID or name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Wallet Address",
                        "name": "wallet",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Preparation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet Association"
                ],
                "summary": "Detach a new wallet from a preparation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preparation ID or name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Wallet Address",
                        "name": "wallet",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Preparation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/schedule": {
            "post": {
                "description": "Create a new schedule",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deal Schedule"
                ],
                "summary": "Create a new schedule",
                "parameters": [
                    {
                        "description": "CreateRequest",
                        "name": "schedule",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schedule.CreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Schedule"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/schedule/{id}/pause": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deal Schedule"
                ],
                "summary": "Pause a specific schedule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Schedule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Schedule"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/schedule/{id}/resume": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deal Schedule"
                ],
                "summary": "Resume a specific schedule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Schedule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Schedule"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/schedules": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deal Schedule"
                ],
                "summary": "List all deal making schedules",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Schedule"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/send_deal": {
            "post": {
                "description": "Send a manual deal proposal",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deal"
                ],
                "summary": "Send a manual deal proposal",
                "parameters": [
                    {
                        "description": "Proposal",
                        "name": "proposal",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/deal.Proposal"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Deal"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "List all storages",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Storage"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/acd": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Acd storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateAcdStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/azureblob": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Azureblob storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateAzureblobStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/b2": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create B2 storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateB2StorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/box": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Box storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateBoxStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/drive": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Drive storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateDriveStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/dropbox": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Dropbox storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateDropboxStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/fichier": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Fichier storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateFichierStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/filefabric": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Filefabric storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateFilefabricStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/ftp": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Ftp storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateFtpStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/gcs": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Gcs storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateGcsStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/gphotos": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Gphotos storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateGphotosStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/hdfs": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Hdfs storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateHdfsStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/hidrive": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Hidrive storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateHidriveStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/http": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Http storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateHttpStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/internetarchive": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Internetarchive storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateInternetarchiveStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/jottacloud": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Jottacloud storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateJottacloudStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/koofr/digistorage": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Koofr storage with digistorage - Digi Storage, https://storage.rcs-rds.ro/",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateKoofrDigistorageStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/koofr/koofr": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Koofr storage with koofr - Koofr, https://app.koofr.net/",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateKoofrKoofrStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/koofr/other": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Koofr storage with other - Any other Koofr API compatible storage service",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateKoofrOtherStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/local": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Local storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateLocalStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/mailru": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Mailru storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateMailruStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/mega": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Mega storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateMegaStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/netstorage": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Netstorage storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateNetstorageStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/onedrive": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Onedrive storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateOnedriveStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/oos/env_auth": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Oos storage with env_auth - automatically pickup the credentials from runtime(env), first one to provide auth wins",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateOosEnv_authStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/oos/instance_principal_auth": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Oos storage with instance_principal_auth - use instance principals to authorize an instance to make API calls.",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateOosInstance_principal_authStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/oos/no_auth": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Oos storage with no_auth - no credentials needed, this is typically for reading public buckets",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateOosNo_authStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/oos/resource_principal_auth": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Oos storage with resource_principal_auth - use resource principals to make API calls",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateOosResource_principal_authStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/oos/user_principal_auth": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Oos storage with user_principal_auth - use an OCI user and an API key for authentication.",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateOosUser_principal_authStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/opendrive": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Opendrive storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateOpendriveStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/pcloud": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Pcloud storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreatePcloudStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/premiumizeme": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Premiumizeme storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreatePremiumizemeStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/putio": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Putio storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreatePutioStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/qingstor": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Qingstor storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateQingstorStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/alibaba": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with Alibaba - Alibaba Cloud Object Storage System (OSS) formerly Aliyun",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3AlibabaStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/arvancloud": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with ArvanCloud - Arvan Cloud Object Storage (AOS)",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3ArvanCloudStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/aws": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with AWS - Amazon Web Services (AWS) S3",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3AWSStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/ceph": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with Ceph - Ceph Object Storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3CephStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/chinamobile": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with ChinaMobile - China Mobile Ecloud Elastic Object Storage (EOS)",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3ChinaMobileStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/cloudflare": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with Cloudflare - Cloudflare R2 Storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3CloudflareStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/digitalocean": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with DigitalOcean - DigitalOcean Spaces",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3DigitalOceanStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/dreamhost": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with Dreamhost - Dreamhost DreamObjects",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3DreamhostStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/huaweiobs": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with HuaweiOBS - Huawei Object Storage Service",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3HuaweiOBSStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/ibmcos": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with IBMCOS - IBM COS S3",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3IBMCOSStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/idrive": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with IDrive - IDrive e2",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3IDriveStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/ionos": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with IONOS - IONOS Cloud",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3IONOSStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/liara": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with Liara - Liara Object Storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3LiaraStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/lyvecloud": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with LyveCloud - Seagate Lyve Cloud",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3LyveCloudStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/minio": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with Minio - Minio Object Storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3MinioStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/netease": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with Netease - Netease Object Storage (NOS)",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3NeteaseStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/other": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with Other - Any other S3 compatible provider",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3OtherStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/qiniu": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with Qiniu - Qiniu Object Storage (Kodo)",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3QiniuStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/rackcorp": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with RackCorp - RackCorp Object Storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3RackCorpStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/scaleway": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with Scaleway - Scaleway Object Storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3ScalewayStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/seaweedfs": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with SeaweedFS - SeaweedFS S3",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3SeaweedFSStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/stackpath": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with StackPath - StackPath Object Storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3StackPathStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/storj": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with Storj - Storj (S3 Compatible Gateway)",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3StorjStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/tencentcos": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with TencentCOS - Tencent Cloud Object Storage (COS)",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3TencentCOSStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/s3/wasabi": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create S3 storage with Wasabi - Wasabi Object Storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateS3WasabiStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/seafile": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Seafile storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateSeafileStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/sftp": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Sftp storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateSftpStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/sharefile": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Sharefile storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateSharefileStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/sia": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Sia storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateSiaStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/smb": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Smb storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateSmbStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/storj/existing": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Storj storage with existing - Use an existing access grant.",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateStorjExistingStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/storj/new": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Storj storage with new - Create a new access grant from satellite address, API key, and passphrase.",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateStorjNewStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/sugarsync": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Sugarsync storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateSugarsyncStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/swift": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Swift storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateSwiftStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/uptobox": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Uptobox storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateUptoboxStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/webdav": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Webdav storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateWebdavStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/yandex": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Yandex storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateYandexStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/zoho": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create Zoho storage",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateZohoStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/{name}": {
            "delete": {
                "tags": [
                    "Storage"
                ],
                "summary": "Remove a storage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Storage ID or name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Update a storage connection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Storage ID or name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Configuration",
                        "name": "config",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/{name}/explore/{path}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Explore directory entries in a storage system",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Storage ID or name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Path in the storage system to explore",
                        "name": "path",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/storage.DirEntry"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/storage/{storageType}": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create a new storage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Storage type",
                        "name": "storageType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Storage configuration",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage.CreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/wallet": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "List all imported wallets",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Wallet"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "Import a private key",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/wallet.ImportRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Wallet"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/wallet/{address}": {
            "delete": {
                "tags": [
                    "Wallet"
                ],
                "summary": "Remove a wallet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.HTTPError": {
            "type": "object",
            "properties": {
                "err": {
                    "type": "string"
                }
            }
        },
        "dataprep.AddPieceRequest": {
            "type": "object",
            "properties": {
                "filePath": {
                    "description": "Path to the CAR file, used to determine the size of the file and root CID",
                    "type": "string"
                },
                "pieceCid": {
                    "description": "CID of the piece",
                    "type": "string"
                },
                "pieceSize": {
                    "description": "Size of the piece",
                    "type": "string"
                },
                "rootCid": {
                    "description": "Root CID of the CAR file, if not provided, will be determined by the CAR file header. Used to populate the label field of storage deal",
                    "type": "string"
                }
            }
        },
        "dataprep.CreateRequest": {
            "type": "object",
            "required": [
                "maxSize",
                "name",
                "sourceStorages"
            ],
            "properties": {
                "deleteAfterExport": {
                    "description": "Whether to delete the source files after export",
                    "type": "boolean",
                    "default": false
                },
                "maxSize": {
                    "description": "Maximum size of the CAR files to be created",
                    "type": "string",
                    "default": "31.5GiB"
                },
                "name": {
                    "description": "Name of the preparation",
                    "type": "string"
                },
                "outputStorages": {
                    "description": "Name of Output storage systems to be used for the output",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "pieceSize": {
                    "description": "Target piece size of the CAR files used for piece commitment calculation",
                    "type": "string"
                },
                "sourceStorages": {
                    "description": "Name of Source storage systems to be used for the source",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dataprep.DirEntry": {
            "type": "object",
            "properties": {
                "cid": {
                    "type": "string"
                },
                "fileVersions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dataprep.Version"
                    }
                },
                "isDir": {
                    "type": "boolean"
                },
                "path": {
                    "type": "string"
                }
            }
        },
        "dataprep.ExploreResult": {
            "type": "object",
            "properties": {
                "cid": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "subEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dataprep.DirEntry"
                    }
                }
            }
        },
        "dataprep.PieceList": {
            "type": "object",
            "properties": {
                "attachmentId": {
                    "type": "integer"
                },
                "pieces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Car"
                    }
                },
                "source": {
                    "$ref": "#/definitions/model.Storage"
                },
                "storageId": {
                    "type": "integer"
                }
            }
        },
        "dataprep.SourceStatus": {
            "type": "object",
            "properties": {
                "attachmentId": {
                    "type": "integer"
                },
                "jobs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Job"
                    }
                },
                "source": {
                    "$ref": "#/definitions/model.Storage"
                },
                "storageId": {
                    "type": "integer"
                }
            }
        },
        "dataprep.Version": {
            "type": "object",
            "properties": {
                "cid": {
                    "type": "string"
                },
                "hash": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lastModified": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                }
            }
        },
        "deal.ListDealRequest": {
            "type": "object",
            "properties": {
                "preparations": {
                    "description": "preparation ID or name filter",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "providers": {
                    "description": "provider filter",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "schedules": {
                    "description": "schedule id filter",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "sources": {
                    "description": "source ID or name filter",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "states": {
                    "description": "state filter",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.DealState"
                    }
                }
            }
        },
        "deal.Proposal": {
            "type": "object",
            "properties": {
                "clientAddress": {
                    "description": "Client address",
                    "type": "string"
                },
                "duration": {
                    "description": "Duration in epoch or in duration format, i.e. 1500000, 2400h",
                    "type": "string",
                    "default": "12740h"
                },
                "fileSize": {
                    "description": "File size in bytes for boost to fetch the CAR file",
                    "type": "integer"
                },
                "httpHeaders": {
                    "description": "http headers to be passed with the request (i.e. key=value)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ipni": {
                    "description": "Whether the deal should be IPNI",
                    "type": "boolean",
                    "default": true
                },
                "keepUnsealed": {
                    "description": "Whether the deal should be kept unsealed",
                    "type": "boolean",
                    "default": true
                },
                "pieceCid": {
                    "description": "Piece CID",
                    "type": "string"
                },
                "pieceSize": {
                    "description": "Piece size",
                    "type": "string"
                },
                "pricePerDeal": {
                    "description": "Price in FIL per deal",
                    "type": "number",
                    "default": 0
                },
                "pricePerGb": {
                    "description": "Price in FIL  per GiB",
                    "type": "number",
                    "default": 0
                },
                "pricePerGbEpoch": {
                    "description": "Price in FIL per GiB per epoch",
                    "type": "number",
                    "default": 0
                },
                "providerId": {
                    "description": "Provider ID",
                    "type": "string"
                },
                "rootCid": {
                    "description": "Root CID that is required as part of the deal proposal, if empty, will be set to empty CID",
                    "type": "string",
                    "default": "bafkqaaa"
                },
                "startDelay": {
                    "description": "Deal start delay in epoch or in duration format, i.e. 1000, 72h",
                    "type": "string",
                    "default": "72h"
                },
                "urlTemplate": {
                    "description": "URL template with PIECE_CID placeholder for boost to fetch the CAR file, i.e. http://127.0.0.1/piece/{PIECE_CID}.car",
                    "type": "string"
                },
                "verified": {
                    "description": "Whether the deal should be verified",
                    "type": "boolean",
                    "default": true
                }
            }
        },
        "model.CID": {
            "type": "object"
        },
        "model.Car": {
            "type": "object",
            "properties": {
                "attachmentId": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "fileSize": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "jobId": {
                    "type": "integer"
                },
                "pieceCid": {
                    "$ref": "#/definitions/model.CID"
                },
                "pieceSize": {
                    "type": "integer"
                },
                "preparationId": {
                    "description": "Association",
                    "type": "integer"
                },
                "rootCid": {
                    "$ref": "#/definitions/model.CID"
                },
                "storageId": {
                    "type": "integer"
                },
                "storagePath": {
                    "description": "StoragePath is the path to the CAR file inside the storage. If the StorageID is nil but StoragePath is not empty, it means the CAR file is stored at the local absolute path.",
                    "type": "string"
                }
            }
        },
        "model.ConfigMap": {
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        },
        "model.Deal": {
            "type": "object",
            "properties": {
                "clientId": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "dealId": {
                    "type": "integer"
                },
                "endEpoch": {
                    "type": "integer"
                },
                "errorMessage": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "label": {
                    "type": "string"
                },
                "pieceCid": {
                    "$ref": "#/definitions/model.CID"
                },
                "pieceSize": {
                    "type": "integer"
                },
                "price": {
                    "type": "string"
                },
                "proposalId": {
                    "type": "string"
                },
                "provider": {
                    "type": "string"
                },
                "scheduleId": {
                    "description": "Associations",
                    "type": "integer"
                },
                "sectorStartEpoch": {
                    "type": "integer"
                },
                "startEpoch": {
                    "type": "integer"
                },
                "state": {
                    "$ref": "#/definitions/model.DealState"
                },
                "updatedAt": {
                    "type": "string"
                },
                "verified": {
                    "type": "boolean"
                }
            }
        },
        "model.DealState": {
            "type": "string",
            "enum": [
                "proposed",
                "published",
                "active",
                "expired",
                "proposal_expired",
                "rejected",
                "slashed",
                "error"
            ],
            "x-enum-varnames": [
                "DealProposed",
                "DealPublished",
                "DealActive",
                "DealExpired",
                "DealProposalExpired",
                "DealRejected",
                "DealSlashed",
                "DealErrored"
            ]
        },
        "model.Job": {
            "type": "object",
            "properties": {
                "attachmentId": {
                    "type": "integer"
                },
                "errorMessage": {
                    "type": "string"
                },
                "errorStackTrace": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "state": {
                    "$ref": "#/definitions/model.JobState"
                },
                "type": {
                    "$ref": "#/definitions/model.JobType"
                },
                "workerId": {
                    "description": "Associations",
                    "type": "string"
                }
            }
        },
        "model.JobState": {
            "type": "string",
            "enum": [
                "created",
                "ready",
                "paused",
                "processing",
                "complete",
                "error"
            ],
            "x-enum-varnames": [
                "Created",
                "Ready",
                "Paused",
                "Processing",
                "Complete",
                "Error"
            ]
        },
        "model.JobType": {
            "type": "string",
            "enum": [
                "scan",
                "pack",
                "daggen"
            ],
            "x-enum-varnames": [
                "Scan",
                "Pack",
                "DagGen"
            ]
        },
        "model.Preparation": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deleteAfterExport": {
                    "description": "DeleteAfterExport is a flag that indicates whether the source files should be deleted after export.",
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "maxSize": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "pieceSize": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "model.Schedule": {
            "type": "object",
            "properties": {
                "allowedPieceCids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "announceToIpni": {
                    "type": "boolean"
                },
                "createdAt": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "errorMessage": {
                    "type": "string"
                },
                "httpHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "keepUnsealed": {
                    "type": "boolean"
                },
                "maxPendingDealNumber": {
                    "type": "integer"
                },
                "maxPendingDealSize": {
                    "type": "integer"
                },
                "notes": {
                    "type": "string"
                },
                "preparationId": {
                    "description": "Associations",
                    "type": "integer"
                },
                "pricePerDeal": {
                    "type": "number"
                },
                "pricePerGb": {
                    "type": "number"
                },
                "pricePerGbEpoch": {
                    "type": "number"
                },
                "provider": {
                    "type": "string"
                },
                "scheduleCron": {
                    "type": "string"
                },
                "scheduleDealNumber": {
                    "type": "integer"
                },
                "scheduleDealSize": {
                    "type": "integer"
                },
                "startDelay": {
                    "type": "integer"
                },
                "state": {
                    "$ref": "#/definitions/model.ScheduleState"
                },
                "totalDealNumber": {
                    "type": "integer"
                },
                "totalDealSize": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "urlTemplate": {
                    "type": "string"
                },
                "verified": {
                    "type": "boolean"
                }
            }
        },
        "model.ScheduleState": {
            "type": "string",
            "enum": [
                "active",
                "paused",
                "error",
                "completed"
            ],
            "x-enum-varnames": [
                "ScheduleActive",
                "SchedulePaused",
                "ScheduleError",
                "ScheduleCompleted"
            ]
        },
        "model.Storage": {
            "type": "object",
            "properties": {
                "config": {
                    "description": "Config is a map of key-value pairs that can be used to store RClone options.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ConfigMap"
                        }
                    ]
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "description": "Path is the path to the storage root.",
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "model.Wallet": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Address is the Filecoin full address of the wallet",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the short ID of the wallet",
                    "type": "string"
                },
                "privateKey": {
                    "description": "PrivateKey is the private key of the wallet",
                    "type": "string"
                }
            }
        },
        "schedule.CreateRequest": {
            "type": "object",
            "properties": {
                "allowedPieceCids": {
                    "description": "Allowed piece CIDs in this schedule",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "duration": {
                    "description": "Duration in epoch or in duration format, i.e. 1500000, 2400h",
                    "type": "string",
                    "default": "12840h"
                },
                "httpHeaders": {
                    "description": "http headers to be passed with the request (i.e. key=value)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ipni": {
                    "description": "Whether the deal should be IPNI",
                    "type": "boolean",
                    "default": true
                },
                "keepUnsealed": {
                    "description": "Whether the deal should be kept unsealed",
                    "type": "boolean",
                    "default": true
                },
                "maxPendingDealNumber": {
                    "description": "Max pending deal number",
                    "type": "integer"
                },
                "maxPendingDealSize": {
                    "description": "Max pending deal size in human readable format, i.e. 100 TiB",
                    "type": "string"
                },
                "notes": {
                    "description": "Notes",
                    "type": "string"
                },
                "preparation": {
                    "description": "Preparation ID or name",
                    "type": "string"
                },
                "pricePerDeal": {
                    "description": "Price in FIL per deal",
                    "type": "number",
                    "default": 0
                },
                "pricePerGb": {
                    "description": "Price in FIL  per GiB",
                    "type": "number",
                    "default": 0
                },
                "pricePerGbEpoch": {
                    "description": "Price in FIL per GiB per epoch",
                    "type": "number",
                    "default": 0
                },
                "provider": {
                    "description": "Provider",
                    "type": "string"
                },
                "scheduleCron": {
                    "description": "Schedule cron patter",
                    "type": "string"
                },
                "scheduleDealNumber": {
                    "description": "Number of deals per scheduled time",
                    "type": "integer"
                },
                "scheduleDealSize": {
                    "description": "Size of deals per schedule trigger in human readable format, i.e. 100 TiB",
                    "type": "string"
                },
                "startDelay": {
                    "description": "Deal start delay in epoch or in duration format, i.e. 1000, 72h",
                    "type": "string",
                    "default": "72h"
                },
                "totalDealNumber": {
                    "description": "Total number of deals",
                    "type": "integer"
                },
                "totalDealSize": {
                    "description": "Total size of deals in human readable format, i.e. 100 TiB",
                    "type": "string"
                },
                "urlTemplate": {
                    "description": "URL template with PIECE_CID placeholder for boost to fetch the CAR file, i.e. http://127.0.0.1/piece/{PIECE_CID}.car",
                    "type": "string"
                },
                "verified": {
                    "description": "Whether the deal should be verified",
                    "type": "boolean",
                    "default": true
                }
            }
        },
        "storage.AcdConfig": {
            "type": "object",
            "properties": {
                "authUrl": {
                    "description": "Auth server URL.",
                    "type": "string"
                },
                "checkpoint": {
                    "description": "Checkpoint for internal polling (debug).",
                    "type": "string"
                },
                "clientId": {
                    "description": "OAuth Client Id.",
                    "type": "string"
                },
                "clientSecret": {
                    "description": "OAuth Client Secret.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "templinkThreshold": {
                    "description": "Files \u003e= this size will be downloaded via their tempLink.",
                    "type": "string",
                    "default": "9Gi"
                },
                "token": {
                    "description": "OAuth Access Token as a JSON blob.",
                    "type": "string"
                },
                "tokenUrl": {
                    "description": "Token server url.",
                    "type": "string"
                },
                "uploadWaitPerGb": {
                    "description": "Additional time per GiB to wait after a failed complete upload to see if it appears.",
                    "type": "string",
                    "default": "3m0s"
                }
            }
        },
        "storage.AzureblobConfig": {
            "type": "object",
            "properties": {
                "accessTier": {
                    "description": "Access tier of blob: hot, cool or archive.",
                    "type": "string"
                },
                "account": {
                    "description": "Azure Storage Account Name.",
                    "type": "string"
                },
                "archiveTierDelete": {
                    "description": "Delete archive tier blobs before overwriting.",
                    "type": "boolean",
                    "default": false
                },
                "chunkSize": {
                    "description": "Upload chunk size.",
                    "type": "string",
                    "default": "4Mi"
                },
                "clientCertificatePassword": {
                    "description": "Password for the certificate file (optional).",
                    "type": "string"
                },
                "clientCertificatePath": {
                    "description": "Path to a PEM or PKCS12 certificate file including the private key.",
                    "type": "string"
                },
                "clientId": {
                    "description": "The ID of the client in use.",
                    "type": "string"
                },
                "clientSecret": {
                    "description": "One of the service principal's client secrets",
                    "type": "string"
                },
                "clientSendCertificateChain": {
                    "description": "Send the certificate chain when using certificate auth.",
                    "type": "boolean",
                    "default": false
                },
                "disableChecksum": {
                    "description": "Don't store MD5 checksum with object metadata.",
                    "type": "boolean",
                    "default": false
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,BackSlash,Del,Ctl,RightPeriod,InvalidUtf8"
                },
                "endpoint": {
                    "description": "Endpoint for the service.",
                    "type": "string"
                },
                "envAuth": {
                    "description": "Read credentials from runtime (environment variables, CLI or MSI).",
                    "type": "boolean",
                    "default": false
                },
                "key": {
                    "description": "Storage Account Shared Key.",
                    "type": "string"
                },
                "listChunk": {
                    "description": "Size of blob list.",
                    "type": "integer",
                    "default": 5000
                },
                "memoryPoolFlushTime": {
                    "description": "How often internal memory buffer pools will be flushed.",
                    "type": "string",
                    "default": "1m0s"
                },
                "memoryPoolUseMmap": {
                    "description": "Whether to use mmap buffers in internal memory pool.",
                    "type": "boolean",
                    "default": false
                },
                "msiClientId": {
                    "description": "Object ID of the user-assigned MSI to use, if any.",
                    "type": "string"
                },
                "msiMiResId": {
                    "description": "Azure resource ID of the user-assigned MSI to use, if any.",
                    "type": "string"
                },
                "msiObjectId": {
                    "description": "Object ID of the user-assigned MSI to use, if any.",
                    "type": "string"
                },
                "noCheckContainer": {
                    "description": "If set, don't attempt to check the container exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "noHeadObject": {
                    "description": "If set, do not do HEAD before GET when getting objects.",
                    "type": "boolean",
                    "default": false
                },
                "password": {
                    "description": "The user's password",
                    "type": "string"
                },
                "publicAccess": {
                    "description": "Public access level of a container: blob or container.",
                    "type": "string",
                    "example": ""
                },
                "sasUrl": {
                    "description": "SAS URL for container level access only.",
                    "type": "string"
                },
                "servicePrincipalFile": {
                    "description": "Path to file containing credentials for use with a service principal.",
                    "type": "string"
                },
                "tenant": {
                    "description": "ID of the service principal's tenant. Also called its directory ID.",
                    "type": "string"
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 16
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload (\u003c= 256 MiB) (deprecated).",
                    "type": "string"
                },
                "useEmulator": {
                    "description": "Uses local storage emulator if provided as 'true'.",
                    "type": "boolean",
                    "default": false
                },
                "useMsi": {
                    "description": "Use a managed service identity to authenticate (only works in Azure).",
                    "type": "boolean",
                    "default": false
                },
                "username": {
                    "description": "User name (usually an email address)",
                    "type": "string"
                }
            }
        },
        "storage.B2Config": {
            "type": "object",
            "properties": {
                "account": {
                    "description": "Account ID or Application Key ID.",
                    "type": "string"
                },
                "chunkSize": {
                    "description": "Upload chunk size.",
                    "type": "string",
                    "default": "96Mi"
                },
                "copyCutoff": {
                    "description": "Cutoff for switching to multipart copy.",
                    "type": "string",
                    "default": "4Gi"
                },
                "disableChecksum": {
                    "description": "Disable checksums for large (\u003e upload cutoff) files.",
                    "type": "boolean",
                    "default": false
                },
                "downloadAuthDuration": {
                    "description": "Time before the authorization token will expire in s or suffix ms|s|m|h|d.",
                    "type": "string",
                    "default": "1w"
                },
                "downloadUrl": {
                    "description": "Custom endpoint for downloads.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,BackSlash,Del,Ctl,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for the service.",
                    "type": "string"
                },
                "hardDelete": {
                    "description": "Permanently delete files on remote removal, otherwise hide files.",
                    "type": "boolean",
                    "default": false
                },
                "key": {
                    "description": "Application Key.",
                    "type": "string"
                },
                "memoryPoolFlushTime": {
                    "description": "How often internal memory buffer pools will be flushed.",
                    "type": "string",
                    "default": "1m0s"
                },
                "memoryPoolUseMmap": {
                    "description": "Whether to use mmap buffers in internal memory pool.",
                    "type": "boolean",
                    "default": false
                },
                "testMode": {
                    "description": "A flag string for X-Bz-Test-Mode header for debugging.",
                    "type": "string"
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                },
                "versionAt": {
                    "description": "Show file versions as they were at the specified time.",
                    "type": "string",
                    "default": "off"
                },
                "versions": {
                    "description": "Include old versions in directory listings.",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "storage.BoxConfig": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "description": "Box App Primary Access Token",
                    "type": "string"
                },
                "authUrl": {
                    "description": "Auth server URL.",
                    "type": "string"
                },
                "boxConfigFile": {
                    "description": "Box App config.json location",
                    "type": "string"
                },
                "boxSubType": {
                    "type": "string",
                    "default": "user",
                    "example": "user"
                },
                "clientId": {
                    "description": "OAuth Client Id.",
                    "type": "string"
                },
                "clientSecret": {
                    "description": "OAuth Client Secret.",
                    "type": "string"
                },
                "commitRetries": {
                    "description": "Max number of times to try committing a multipart file.",
                    "type": "integer",
                    "default": 100
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,BackSlash,Del,Ctl,RightSpace,InvalidUtf8,Dot"
                },
                "listChunk": {
                    "description": "Size of listing chunk 1-1000.",
                    "type": "integer",
                    "default": 1000
                },
                "ownedBy": {
                    "description": "Only show items owned by the login (email address) passed in.",
                    "type": "string"
                },
                "rootFolderId": {
                    "description": "Fill in for rclone to use a non root folder as its starting point.",
                    "type": "string",
                    "default": "0"
                },
                "token": {
                    "description": "OAuth Access Token as a JSON blob.",
                    "type": "string"
                },
                "tokenUrl": {
                    "description": "Token server url.",
                    "type": "string"
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to multipart upload (\u003e= 50 MiB).",
                    "type": "string",
                    "default": "50Mi"
                }
            }
        },
        "storage.CreateAcdStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.AcdConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateAzureblobStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.AzureblobConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateB2StorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.B2Config"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateBoxStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.BoxConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateDriveStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.DriveConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateDropboxStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.DropboxConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateFichierStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.FichierConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateFilefabricStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.FilefabricConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateFtpStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.FtpConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateGcsStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.GcsConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateGphotosStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.GphotosConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateHdfsStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.HdfsConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateHidriveStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.HidriveConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateHttpStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.HttpConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateInternetarchiveStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.InternetarchiveConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateJottacloudStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.JottacloudConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateKoofrDigistorageStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.KoofrDigistorageConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateKoofrKoofrStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.KoofrKoofrConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateKoofrOtherStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.KoofrOtherConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateLocalStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.LocalConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateMailruStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.MailruConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateMegaStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.MegaConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateNetstorageStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.NetstorageConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateOnedriveStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.OnedriveConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateOosEnv_authStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.OosEnv_authConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateOosInstance_principal_authStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.OosInstance_principal_authConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateOosNo_authStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.OosNo_authConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateOosResource_principal_authStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.OosResource_principal_authConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateOosUser_principal_authStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.OosUser_principal_authConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateOpendriveStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.OpendriveConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreatePcloudStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.PcloudConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreatePremiumizemeStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.PremiumizemeConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreatePutioStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.PutioConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateQingstorStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.QingstorConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateRequest": {
            "type": "object",
            "required": [
                "name",
                "path"
            ],
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "provider": {
                    "type": "string"
                }
            }
        },
        "storage.CreateS3AWSStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.S3AWSConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateS3AlibabaStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.S3AlibabaConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateS3ArvanCloudStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.S3ArvanCloudConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateS3CephStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.S3CephConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateS3ChinaMobileStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.S3ChinaMobileConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateS3CloudflareStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.S3CloudflareConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateS3DigitalOceanStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.S3DigitalOceanConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateS3DreamhostStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.S3DreamhostConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateS3HuaweiOBSStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.S3HuaweiOBSConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateS3IBMCOSStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.S3IBMCOSConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateS3IDriveStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.S3IDriveConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateS3IONOSStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.S3IONOSConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateS3LiaraStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.S3LiaraConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateS3LyveCloudStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.S3LyveCloudConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateS3MinioStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.S3MinioConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateS3NeteaseStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.S3NeteaseConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateS3OtherStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.S3OtherConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateS3QiniuStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.S3QiniuConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateS3RackCorpStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.S3RackCorpConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateS3ScalewayStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.S3ScalewayConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateS3SeaweedFSStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.S3SeaweedFSConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateS3StackPathStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.S3StackPathConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateS3StorjStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.S3StorjConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateS3TencentCOSStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.S3TencentCOSConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateS3WasabiStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.S3WasabiConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateSeafileStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.SeafileConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateSftpStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.SftpConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateSharefileStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.SharefileConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateSiaStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.SiaConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateSmbStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.SmbConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateStorjExistingStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.StorjExistingConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateStorjNewStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.StorjNewConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateSugarsyncStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.SugarsyncConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateSwiftStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.SwiftConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateUptoboxStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.UptoboxConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateWebdavStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.WebdavConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateYandexStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.YandexConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.CreateZohoStorageRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/storage.ZohoConfig"
                },
                "name": {
                    "description": "Name of the storage, must be unique",
                    "type": "string",
                    "example": "my-storage"
                },
                "path": {
                    "description": "Path of the storage",
                    "type": "string"
                }
            }
        },
        "storage.DirEntry": {
            "type": "object",
            "properties": {
                "dirId": {
                    "type": "string"
                },
                "hash": {
                    "type": "string"
                },
                "isDir": {
                    "type": "boolean"
                },
                "lastModified": {
                    "type": "string"
                },
                "numItems": {
                    "type": "integer"
                },
                "path": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                }
            }
        },
        "storage.DriveConfig": {
            "type": "object",
            "properties": {
                "acknowledgeAbuse": {
                    "description": "Set to allow files which return cannotDownloadAbusiveFile to be downloaded.",
                    "type": "boolean",
                    "default": false
                },
                "allowImportNameChange": {
                    "description": "Allow the filetype to change when uploading Google docs.",
                    "type": "boolean",
                    "default": false
                },
                "alternateExport": {
                    "description": "Deprecated: No longer needed.",
                    "type": "boolean",
                    "default": false
                },
                "authOwnerOnly": {
                    "description": "Only consider files owned by the authenticated user.",
                    "type": "boolean",
                    "default": false
                },
                "authUrl": {
                    "description": "Auth server URL.",
                    "type": "string"
                },
                "chunkSize": {
                    "description": "Upload chunk size.",
                    "type": "string",
                    "default": "8Mi"
                },
                "clientId": {
                    "description": "Google Application Client Id",
                    "type": "string"
                },
                "clientSecret": {
                    "description": "OAuth Client Secret.",
                    "type": "string"
                },
                "copyShortcutContent": {
                    "description": "Server side copy contents of shortcuts instead of the shortcut.",
                    "type": "boolean",
                    "default": false
                },
                "disableHttp2": {
                    "description": "Disable drive using http2.",
                    "type": "boolean",
                    "default": true
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "InvalidUtf8"
                },
                "exportFormats": {
                    "description": "Comma separated list of preferred formats for downloading Google docs.",
                    "type": "string",
                    "default": "docx,xlsx,pptx,svg"
                },
                "formats": {
                    "description": "Deprecated: See export_formats.",
                    "type": "string"
                },
                "impersonate": {
                    "description": "Impersonate this user when using a service account.",
                    "type": "string"
                },
                "importFormats": {
                    "description": "Comma separated list of preferred formats for uploading Google docs.",
                    "type": "string"
                },
                "keepRevisionForever": {
                    "description": "Keep new head revision of each file forever.",
                    "type": "boolean",
                    "default": false
                },
                "listChunk": {
                    "description": "Size of listing chunk 100-1000, 0 to disable.",
                    "type": "integer",
                    "default": 1000
                },
                "pacerBurst": {
                    "description": "Number of API calls to allow without sleeping.",
                    "type": "integer",
                    "default": 100
                },
                "pacerMinSleep": {
                    "description": "Minimum time to sleep between API calls.",
                    "type": "string",
                    "default": "100ms"
                },
                "resourceKey": {
                    "description": "Resource key for accessing a link-shared file.",
                    "type": "string"
                },
                "rootFolderId": {
                    "description": "ID of the root folder.",
                    "type": "string"
                },
                "scope": {
                    "description": "Scope that rclone should use when requesting access from drive.",
                    "type": "string",
                    "example": "drive"
                },
                "serverSideAcrossConfigs": {
                    "description": "Allow server-side operations (e.g. copy) to work across different drive configs.",
                    "type": "boolean",
                    "default": false
                },
                "serviceAccountCredentials": {
                    "description": "Service Account Credentials JSON blob.",
                    "type": "string"
                },
                "serviceAccountFile": {
                    "description": "Service Account Credentials JSON file path.",
                    "type": "string"
                },
                "sharedWithMe": {
                    "description": "Only show files that are shared with me.",
                    "type": "boolean",
                    "default": false
                },
                "sizeAsQuota": {
                    "description": "Show sizes as storage quota usage, not actual size.",
                    "type": "boolean",
                    "default": false
                },
                "skipChecksumGphotos": {
                    "description": "Skip MD5 checksum on Google photos and videos only.",
                    "type": "boolean",
                    "default": false
                },
                "skipDanglingShortcuts": {
                    "description": "If set skip dangling shortcut files.",
                    "type": "boolean",
                    "default": false
                },
                "skipGdocs": {
                    "description": "Skip google documents in all listings.",
                    "type": "boolean",
                    "default": false
                },
                "skipShortcuts": {
                    "description": "If set skip shortcut files.",
                    "type": "boolean",
                    "default": false
                },
                "starredOnly": {
                    "description": "Only show files that are starred.",
                    "type": "boolean",
                    "default": false
                },
                "stopOnDownloadLimit": {
                    "description": "Make download limit errors be fatal.",
                    "type": "boolean",
                    "default": false
                },
                "stopOnUploadLimit": {
                    "description": "Make upload limit errors be fatal.",
                    "type": "boolean",
                    "default": false
                },
                "teamDrive": {
                    "description": "ID of the Shared Drive (Team Drive).",
                    "type": "string"
                },
                "token": {
                    "description": "OAuth Access Token as a JSON blob.",
                    "type": "string"
                },
                "tokenUrl": {
                    "description": "Token server url.",
                    "type": "string"
                },
                "trashedOnly": {
                    "description": "Only show files that are in the trash.",
                    "type": "boolean",
                    "default": false
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "8Mi"
                },
                "useCreatedDate": {
                    "description": "Use file created date instead of modified date.",
                    "type": "boolean",
                    "default": false
                },
                "useSharedDate": {
                    "description": "Use date file was shared instead of modified date.",
                    "type": "boolean",
                    "default": false
                },
                "useTrash": {
                    "description": "Send files to the trash instead of deleting permanently.",
                    "type": "boolean",
                    "default": true
                },
                "v2DownloadMinSize": {
                    "description": "If Object's are greater, use drive v2 API to download.",
                    "type": "string",
                    "default": "off"
                }
            }
        },
        "storage.DropboxConfig": {
            "type": "object",
            "properties": {
                "authUrl": {
                    "description": "Auth server URL.",
                    "type": "string"
                },
                "batchCommitTimeout": {
                    "description": "Max time to wait for a batch to finish committing",
                    "type": "string",
                    "default": "10m0s"
                },
                "batchMode": {
                    "description": "Upload file batching sync|async|off.",
                    "type": "string",
                    "default": "sync"
                },
                "batchSize": {
                    "description": "Max number of files in upload batch.",
                    "type": "integer",
                    "default": 0
                },
                "batchTimeout": {
                    "description": "Max time to allow an idle upload batch before uploading.",
                    "type": "string",
                    "default": "0s"
                },
                "chunkSize": {
                    "description": "Upload chunk size (\u003c 150Mi).",
                    "type": "string",
                    "default": "48Mi"
                },
                "clientId": {
                    "description": "OAuth Client Id.",
                    "type": "string"
                },
                "clientSecret": {
                    "description": "OAuth Client Secret.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,BackSlash,Del,RightSpace,InvalidUtf8,Dot"
                },
                "impersonate": {
                    "description": "Impersonate this user when using a business account.",
                    "type": "string"
                },
                "sharedFiles": {
                    "description": "Instructs rclone to work on individual shared files.",
                    "type": "boolean",
                    "default": false
                },
                "sharedFolders": {
                    "description": "Instructs rclone to work on shared folders.",
                    "type": "boolean",
                    "default": false
                },
                "token": {
                    "description": "OAuth Access Token as a JSON blob.",
                    "type": "string"
                },
                "tokenUrl": {
                    "description": "Token server url.",
                    "type": "string"
                }
            }
        },
        "storage.FichierConfig": {
            "type": "object",
            "properties": {
                "apiKey": {
                    "description": "Your API Key, get it from https://1fichier.com/console/params.pl.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,LtGt,DoubleQuote,SingleQuote,BackQuote,Dollar,BackSlash,Del,Ctl,LeftSpace,RightSpace,InvalidUtf8,Dot"
                },
                "filePassword": {
                    "description": "If you want to download a shared file that is password protected, add this parameter.",
                    "type": "string"
                },
                "folderPassword": {
                    "description": "If you want to list the files in a shared folder that is password protected, add this parameter.",
                    "type": "string"
                },
                "sharedFolder": {
                    "description": "If you want to download a shared folder, add this parameter.",
                    "type": "string"
                }
            }
        },
        "storage.FilefabricConfig": {
            "type": "object",
            "properties": {
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,Del,Ctl,InvalidUtf8,Dot"
                },
                "permanentToken": {
                    "description": "Permanent Authentication Token.",
                    "type": "string"
                },
                "rootFolderId": {
                    "description": "ID of the root folder.",
                    "type": "string"
                },
                "token": {
                    "description": "Session Token.",
                    "type": "string"
                },
                "tokenExpiry": {
                    "description": "Token expiry time.",
                    "type": "string"
                },
                "url": {
                    "description": "URL of the Enterprise File Fabric to connect to.",
                    "type": "string",
                    "example": "https://storagemadeeasy.com"
                },
                "version": {
                    "description": "Version read from the file fabric.",
                    "type": "string"
                }
            }
        },
        "storage.FtpConfig": {
            "type": "object",
            "properties": {
                "askPassword": {
                    "description": "Allow asking for FTP password when needed.",
                    "type": "boolean",
                    "default": false
                },
                "closeTimeout": {
                    "description": "Maximum time to wait for a response to close.",
                    "type": "string",
                    "default": "1m0s"
                },
                "concurrency": {
                    "description": "Maximum number of FTP simultaneous connections, 0 for unlimited.",
                    "type": "integer",
                    "default": 0
                },
                "disableEpsv": {
                    "description": "Disable using EPSV even if server advertises support.",
                    "type": "boolean",
                    "default": false
                },
                "disableMlsd": {
                    "description": "Disable using MLSD even if server advertises support.",
                    "type": "boolean",
                    "default": false
                },
                "disableTls13": {
                    "description": "Disable TLS 1.3 (workaround for FTP servers with buggy TLS)",
                    "type": "boolean",
                    "default": false
                },
                "disableUtf8": {
                    "description": "Disable using UTF-8 even if server advertises support.",
                    "type": "boolean",
                    "default": false
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,Del,Ctl,RightSpace,Dot",
                    "example": "Asterisk,Ctl,Dot,Slash"
                },
                "explicitTls": {
                    "description": "Use Explicit FTPS (FTP over TLS).",
                    "type": "boolean",
                    "default": false
                },
                "forceListHidden": {
                    "description": "Use LIST -a to force listing of hidden files and folders. This will disable the use of MLSD.",
                    "type": "boolean",
                    "default": false
                },
                "host": {
                    "description": "FTP host to connect to.",
                    "type": "string"
                },
                "idleTimeout": {
                    "description": "Max time before closing idle connections.",
                    "type": "string",
                    "default": "1m0s"
                },
                "noCheckCertificate": {
                    "description": "Do not verify the TLS certificate of the server.",
                    "type": "boolean",
                    "default": false
                },
                "pass": {
                    "description": "FTP password.",
                    "type": "string"
                },
                "port": {
                    "description": "FTP port number.",
                    "type": "integer",
                    "default": 21
                },
                "shutTimeout": {
                    "description": "Maximum time to wait for data connection closing status.",
                    "type": "string",
                    "default": "1m0s"
                },
                "tls": {
                    "description": "Use Implicit FTPS (FTP over TLS).",
                    "type": "boolean",
                    "default": false
                },
                "tlsCacheSize": {
                    "description": "Size of TLS session cache for all control and data connections.",
                    "type": "integer",
                    "default": 32
                },
                "user": {
                    "description": "FTP username.",
                    "type": "string",
                    "default": "$USER"
                },
                "writingMdtm": {
                    "description": "Use MDTM to set modification time (VsFtpd quirk)",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "storage.GcsConfig": {
            "type": "object",
            "properties": {
                "anonymous": {
                    "description": "Access public buckets and objects without credentials.",
                    "type": "boolean",
                    "default": false
                },
                "authUrl": {
                    "description": "Auth server URL.",
                    "type": "string"
                },
                "bucketAcl": {
                    "description": "Access Control List for new buckets.",
                    "type": "string",
                    "example": "authenticatedRead"
                },
                "bucketPolicyOnly": {
                    "description": "Access checks should use bucket-level IAM policies.",
                    "type": "boolean",
                    "default": false
                },
                "clientId": {
                    "description": "OAuth Client Id.",
                    "type": "string"
                },
                "clientSecret": {
                    "description": "OAuth Client Secret.",
                    "type": "string"
                },
                "decompress": {
                    "description": "If set this will decompress gzip encoded objects.",
                    "type": "boolean",
                    "default": false
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,CrLf,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for the service.",
                    "type": "string"
                },
                "envAuth": {
                    "description": "Get GCP IAM credentials from runtime (environment variables or instance meta data if no env vars).",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "location": {
                    "description": "Location for the newly created buckets.",
                    "type": "string",
                    "example": ""
                },
                "noCheckBucket": {
                    "description": "If set, don't attempt to check the bucket exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "objectAcl": {
                    "description": "Access Control List for new objects.",
                    "type": "string",
                    "example": "authenticatedRead"
                },
                "projectNumber": {
                    "description": "Project number.",
                    "type": "string"
                },
                "serviceAccountCredentials": {
                    "description": "Service Account Credentials JSON blob.",
                    "type": "string"
                },
                "serviceAccountFile": {
                    "description": "Service Account Credentials JSON file path.",
                    "type": "string"
                },
                "storageClass": {
                    "description": "The storage class to use when storing objects in Google Cloud Storage.",
                    "type": "string",
                    "example": ""
                },
                "token": {
                    "description": "OAuth Access Token as a JSON blob.",
                    "type": "string"
                },
                "tokenUrl": {
                    "description": "Token server url.",
                    "type": "string"
                }
            }
        },
        "storage.GphotosConfig": {
            "type": "object",
            "properties": {
                "authUrl": {
                    "description": "Auth server URL.",
                    "type": "string"
                },
                "clientId": {
                    "description": "OAuth Client Id.",
                    "type": "string"
                },
                "clientSecret": {
                    "description": "OAuth Client Secret.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,CrLf,InvalidUtf8,Dot"
                },
                "includeArchived": {
                    "description": "Also view and download archived media.",
                    "type": "boolean",
                    "default": false
                },
                "readOnly": {
                    "description": "Set to make the Google Photos backend read only.",
                    "type": "boolean",
                    "default": false
                },
                "readSize": {
                    "description": "Set to read the size of media items.",
                    "type": "boolean",
                    "default": false
                },
                "startYear": {
                    "description": "Year limits the photos to be downloaded to those which are uploaded after the given year.",
                    "type": "integer",
                    "default": 2000
                },
                "token": {
                    "description": "OAuth Access Token as a JSON blob.",
                    "type": "string"
                },
                "tokenUrl": {
                    "description": "Token server url.",
                    "type": "string"
                }
            }
        },
        "storage.HdfsConfig": {
            "type": "object",
            "properties": {
                "dataTransferProtection": {
                    "description": "Kerberos data transfer protection: authentication|integrity|privacy.",
                    "type": "string",
                    "example": "privacy"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,Colon,Del,Ctl,InvalidUtf8,Dot"
                },
                "namenode": {
                    "description": "Hadoop name node and port.",
                    "type": "string"
                },
                "servicePrincipalName": {
                    "description": "Kerberos service principal name for the namenode.",
                    "type": "string"
                },
                "username": {
                    "description": "Hadoop user name.",
                    "type": "string",
                    "example": "root"
                }
            }
        },
        "storage.HidriveConfig": {
            "type": "object",
            "properties": {
                "authUrl": {
                    "description": "Auth server URL.",
                    "type": "string"
                },
                "chunkSize": {
                    "description": "Chunksize for chunked uploads.",
                    "type": "string",
                    "default": "48Mi"
                },
                "clientId": {
                    "description": "OAuth Client Id.",
                    "type": "string"
                },
                "clientSecret": {
                    "description": "OAuth Client Secret.",
                    "type": "string"
                },
                "disableFetchingMemberCount": {
                    "description": "Do not fetch number of objects in directories unless it is absolutely necessary.",
                    "type": "boolean",
                    "default": false
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for the service.",
                    "type": "string",
                    "default": "https://api.hidrive.strato.com/2.1"
                },
                "rootPrefix": {
                    "description": "The root/parent folder for all paths.",
                    "type": "string",
                    "default": "/",
                    "example": "/"
                },
                "scopeAccess": {
                    "description": "Access permissions that rclone should use when requesting access from HiDrive.",
                    "type": "string",
                    "default": "rw",
                    "example": "rw"
                },
                "scopeRole": {
                    "description": "User-level that rclone should use when requesting access from HiDrive.",
                    "type": "string",
                    "default": "user",
                    "example": "user"
                },
                "token": {
                    "description": "OAuth Access Token as a JSON blob.",
                    "type": "string"
                },
                "tokenUrl": {
                    "description": "Token server url.",
                    "type": "string"
                },
                "uploadConcurrency": {
                    "description": "Concurrency for chunked uploads.",
                    "type": "integer",
                    "default": 4
                },
                "uploadCutoff": {
                    "description": "Cutoff/Threshold for chunked uploads.",
                    "type": "string",
                    "default": "96Mi"
                }
            }
        },
        "storage.HttpConfig": {
            "type": "object",
            "properties": {
                "headers": {
                    "description": "Set HTTP headers for all transactions.",
                    "type": "string"
                },
                "noHead": {
                    "description": "Don't use HEAD requests.",
                    "type": "boolean",
                    "default": false
                },
                "noSlash": {
                    "description": "Set this if the site doesn't end directories with /.",
                    "type": "boolean",
                    "default": false
                },
                "url": {
                    "description": "URL of HTTP host to connect to.",
                    "type": "string"
                }
            }
        },
        "storage.InternetarchiveConfig": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "description": "IAS3 Access Key.",
                    "type": "string"
                },
                "disableChecksum": {
                    "description": "Don't ask the server to test against MD5 checksum calculated by rclone.",
                    "type": "boolean",
                    "default": true
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,LtGt,CrLf,Del,Ctl,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "IAS3 Endpoint.",
                    "type": "string",
                    "default": "https://s3.us.archive.org"
                },
                "frontEndpoint": {
                    "description": "Host of InternetArchive Frontend.",
                    "type": "string",
                    "default": "https://archive.org"
                },
                "secretAccessKey": {
                    "description": "IAS3 Secret Key (password).",
                    "type": "string"
                },
                "waitArchive": {
                    "description": "Timeout for waiting the server's processing tasks (specifically archive and book_op) to finish.",
                    "type": "string",
                    "default": "0s"
                }
            }
        },
        "storage.JottacloudConfig": {
            "type": "object",
            "properties": {
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,LtGt,DoubleQuote,Colon,Question,Asterisk,Pipe,Del,Ctl,InvalidUtf8,Dot"
                },
                "hardDelete": {
                    "description": "Delete files permanently rather than putting them into the trash.",
                    "type": "boolean",
                    "default": false
                },
                "md5MemoryLimit": {
                    "description": "Files bigger than this will be cached on disk to calculate the MD5 if required.",
                    "type": "string",
                    "default": "10Mi"
                },
                "noVersions": {
                    "description": "Avoid server side versioning by deleting files and recreating files instead of overwriting them.",
                    "type": "boolean",
                    "default": false
                },
                "trashedOnly": {
                    "description": "Only show files that are in the trash.",
                    "type": "boolean",
                    "default": false
                },
                "uploadResumeLimit": {
                    "description": "Files bigger than this can be resumed if the upload fail's.",
                    "type": "string",
                    "default": "10Mi"
                }
            }
        },
        "storage.KoofrDigistorageConfig": {
            "type": "object",
            "properties": {
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,BackSlash,Del,Ctl,InvalidUtf8,Dot"
                },
                "mountid": {
                    "description": "Mount ID of the mount to use.",
                    "type": "string"
                },
                "password": {
                    "description": "Your password for rclone (generate one at https://storage.rcs-rds.ro/app/admin/preferences/password).",
                    "type": "string"
                },
                "setmtime": {
                    "description": "Does the backend support setting modification time.",
                    "type": "boolean",
                    "default": true
                },
                "user": {
                    "description": "Your user name.",
                    "type": "string"
                }
            }
        },
        "storage.KoofrKoofrConfig": {
            "type": "object",
            "properties": {
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,BackSlash,Del,Ctl,InvalidUtf8,Dot"
                },
                "mountid": {
                    "description": "Mount ID of the mount to use.",
                    "type": "string"
                },
                "password": {
                    "description": "Your password for rclone (generate one at https://app.koofr.net/app/admin/preferences/password).",
                    "type": "string"
                },
                "setmtime": {
                    "description": "Does the backend support setting modification time.",
                    "type": "boolean",
                    "default": true
                },
                "user": {
                    "description": "Your user name.",
                    "type": "string"
                }
            }
        },
        "storage.KoofrOtherConfig": {
            "type": "object",
            "properties": {
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,BackSlash,Del,Ctl,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "The Koofr API endpoint to use.",
                    "type": "string"
                },
                "mountid": {
                    "description": "Mount ID of the mount to use.",
                    "type": "string"
                },
                "password": {
                    "description": "Your password for rclone (generate one at your service's settings page).",
                    "type": "string"
                },
                "setmtime": {
                    "description": "Does the backend support setting modification time.",
                    "type": "boolean",
                    "default": true
                },
                "user": {
                    "description": "Your user name.",
                    "type": "string"
                }
            }
        },
        "storage.LocalConfig": {
            "type": "object",
            "properties": {
                "caseInsensitive": {
                    "description": "Force the filesystem to report itself as case insensitive.",
                    "type": "boolean",
                    "default": false
                },
                "caseSensitive": {
                    "description": "Force the filesystem to report itself as case sensitive.",
                    "type": "boolean",
                    "default": false
                },
                "copyLinks": {
                    "description": "Follow symlinks and copy the pointed to item.",
                    "type": "boolean",
                    "default": false
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,Dot"
                },
                "links": {
                    "description": "Translate symlinks to/from regular files with a '.rclonelink' extension.",
                    "type": "boolean",
                    "default": false
                },
                "noCheckUpdated": {
                    "description": "Don't check to see if the files change during upload.",
                    "type": "boolean",
                    "default": false
                },
                "noPreallocate": {
                    "description": "Disable preallocation of disk space for transferred files.",
                    "type": "boolean",
                    "default": false
                },
                "noSetModtime": {
                    "description": "Disable setting modtime.",
                    "type": "boolean",
                    "default": false
                },
                "noSparse": {
                    "description": "Disable sparse files for multi-thread downloads.",
                    "type": "boolean",
                    "default": false
                },
                "nounc": {
                    "description": "Disable UNC (long path names) conversion on Windows.",
                    "type": "boolean",
                    "default": false,
                    "example": true
                },
                "oneFileSystem": {
                    "description": "Don't cross filesystem boundaries (unix/macOS only).",
                    "type": "boolean",
                    "default": false
                },
                "skipLinks": {
                    "description": "Don't warn about skipped symlinks.",
                    "type": "boolean",
                    "default": false
                },
                "unicodeNormalization": {
                    "description": "Apply unicode NFC normalization to paths and filenames.",
                    "type": "boolean",
                    "default": false
                },
                "zeroSizeLinks": {
                    "description": "Assume the Stat size of links is zero (and read them instead) (deprecated).",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "storage.MailruConfig": {
            "type": "object",
            "properties": {
                "checkHash": {
                    "description": "What should copy do if file checksum is mismatched or invalid.",
                    "type": "boolean",
                    "default": true,
                    "example": true
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,LtGt,DoubleQuote,Colon,Question,Asterisk,Pipe,BackSlash,Del,Ctl,InvalidUtf8,Dot"
                },
                "pass": {
                    "description": "Password.",
                    "type": "string"
                },
                "quirks": {
                    "description": "Comma separated list of internal maintenance flags.",
                    "type": "string"
                },
                "speedupEnable": {
                    "description": "Skip full upload if there is another file with same data hash.",
                    "type": "boolean",
                    "default": true,
                    "example": true
                },
                "speedupFilePatterns": {
                    "description": "Comma separated list of file name patterns eligible for speedup (put by hash).",
                    "type": "string",
                    "default": "*.mkv,*.avi,*.mp4,*.mp3,*.zip,*.gz,*.rar,*.pdf",
                    "example": ""
                },
                "speedupMaxDisk": {
                    "description": "This option allows you to disable speedup (put by hash) for large files.",
                    "type": "string",
                    "default": "3Gi",
                    "example": "0"
                },
                "speedupMaxMemory": {
                    "description": "Files larger than the size given below will always be hashed on disk.",
                    "type": "string",
                    "default": "32Mi",
                    "example": "0"
                },
                "user": {
                    "description": "User name (usually email).",
                    "type": "string"
                },
                "userAgent": {
                    "description": "HTTP user agent used internally by client.",
                    "type": "string"
                }
            }
        },
        "storage.MegaConfig": {
            "type": "object",
            "properties": {
                "debug": {
                    "description": "Output more debug from Mega.",
                    "type": "boolean",
                    "default": false
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "hardDelete": {
                    "description": "Delete files permanently rather than putting them into the trash.",
                    "type": "boolean",
                    "default": false
                },
                "pass": {
                    "description": "Password.",
                    "type": "string"
                },
                "useHttps": {
                    "description": "Use HTTPS for transfers.",
                    "type": "boolean",
                    "default": false
                },
                "user": {
                    "description": "User name.",
                    "type": "string"
                }
            }
        },
        "storage.NetstorageConfig": {
            "type": "object",
            "properties": {
                "account": {
                    "description": "Set the NetStorage account name",
                    "type": "string"
                },
                "host": {
                    "description": "Domain+path of NetStorage host to connect to.",
                    "type": "string"
                },
                "protocol": {
                    "description": "Select between HTTP or HTTPS protocol.",
                    "type": "string",
                    "default": "https",
                    "example": "http"
                },
                "secret": {
                    "description": "Set the NetStorage account secret/G2O key for authentication.",
                    "type": "string"
                }
            }
        },
        "storage.OnedriveConfig": {
            "type": "object",
            "properties": {
                "accessScopes": {
                    "description": "Set scopes to be requested by rclone.",
                    "type": "string",
                    "default": "Files.Read Files.ReadWrite Files.Read.All Files.ReadWrite.All Sites.Read.All offline_access",
                    "example": "Files.Read Files.ReadWrite Files.Read.All Files.ReadWrite.All Sites.Read.All offline_access"
                },
                "authUrl": {
                    "description": "Auth server URL.",
                    "type": "string"
                },
                "chunkSize": {
                    "description": "Chunk size to upload files with - must be multiple of 320k (327,680 bytes).",
                    "type": "string",
                    "default": "10Mi"
                },
                "clientId": {
                    "description": "OAuth Client Id.",
                    "type": "string"
                },
                "clientSecret": {
                    "description": "OAuth Client Secret.",
                    "type": "string"
                },
                "disableSitePermission": {
                    "description": "Disable the request for Sites.Read.All permission.",
                    "type": "boolean",
                    "default": false
                },
                "driveId": {
                    "description": "The ID of the drive to use.",
                    "type": "string"
                },
                "driveType": {
                    "description": "The type of the drive (personal | business | documentLibrary).",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,LtGt,DoubleQuote,Colon,Question,Asterisk,Pipe,BackSlash,Del,Ctl,LeftSpace,LeftTilde,RightSpace,RightPeriod,InvalidUtf8,Dot"
                },
                "exposeOnenoteFiles": {
                    "description": "Set to make OneNote files show up in directory listings.",
                    "type": "boolean",
                    "default": false
                },
                "hashType": {
                    "description": "Specify the hash in use for the backend.",
                    "type": "string",
                    "default": "auto",
                    "example": "auto"
                },
                "linkPassword": {
                    "description": "Set the password for links created by the link command.",
                    "type": "string"
                },
                "linkScope": {
                    "description": "Set the scope of the links created by the link command.",
                    "type": "string",
                    "default": "anonymous",
                    "example": "anonymous"
                },
                "linkType": {
                    "description": "Set the type of the links created by the link command.",
                    "type": "string",
                    "default": "view",
                    "example": "view"
                },
                "listChunk": {
                    "description": "Size of listing chunk.",
                    "type": "integer",
                    "default": 1000
                },
                "noVersions": {
                    "description": "Remove all versions on modifying operations.",
                    "type": "boolean",
                    "default": false
                },
                "region": {
                    "description": "Choose national cloud region for OneDrive.",
                    "type": "string",
                    "default": "global",
                    "example": "global"
                },
                "rootFolderId": {
                    "description": "ID of the root folder.",
                    "type": "string"
                },
                "serverSideAcrossConfigs": {
                    "description": "Allow server-side operations (e.g. copy) to work across different onedrive configs.",
                    "type": "boolean",
                    "default": false
                },
                "token": {
                    "description": "OAuth Access Token as a JSON blob.",
                    "type": "string"
                },
                "tokenUrl": {
                    "description": "Token server url.",
                    "type": "string"
                }
            }
        },
        "storage.OosEnv_authConfig": {
            "type": "object",
            "properties": {
                "chunkSize": {
                    "description": "Chunk size to use for uploading.",
                    "type": "string",
                    "default": "5Mi"
                },
                "compartment": {
                    "description": "Object storage compartment OCID",
                    "type": "string"
                },
                "copyCutoff": {
                    "description": "Cutoff for switching to multipart copy.",
                    "type": "string",
                    "default": "4.656Gi"
                },
                "copyTimeout": {
                    "description": "Timeout for copy.",
                    "type": "string",
                    "default": "1m0s"
                },
                "disableChecksum": {
                    "description": "Don't store MD5 checksum with object metadata.",
                    "type": "boolean",
                    "default": false
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for Object storage API.",
                    "type": "string"
                },
                "leavePartsOnError": {
                    "description": "If true avoid calling abort upload on a failure, leaving all successfully uploaded parts on S3 for manual recovery.",
                    "type": "boolean",
                    "default": false
                },
                "namespace": {
                    "description": "Object storage namespace",
                    "type": "string"
                },
                "noCheckBucket": {
                    "description": "If set, don't attempt to check the bucket exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "region": {
                    "description": "Object storage Region",
                    "type": "string"
                },
                "sseCustomerAlgorithm": {
                    "description": "If using SSE-C, the optional header that specifies \"AES256\" as the encryption algorithm.",
                    "type": "string",
                    "example": ""
                },
                "sseCustomerKey": {
                    "description": "To use SSE-C, the optional header that specifies the base64-encoded 256-bit encryption key to use to",
                    "type": "string",
                    "example": ""
                },
                "sseCustomerKeyFile": {
                    "description": "To use SSE-C, a file containing the base64-encoded string of the AES-256 encryption key associated",
                    "type": "string",
                    "example": ""
                },
                "sseCustomerKeySha256": {
                    "description": "If using SSE-C, The optional header that specifies the base64-encoded SHA256 hash of the encryption",
                    "type": "string",
                    "example": ""
                },
                "sseKmsKeyId": {
                    "description": "if using using your own master key in vault, this header specifies the",
                    "type": "string",
                    "example": ""
                },
                "storageTier": {
                    "description": "The storage class to use when storing new objects in storage. https://docs.oracle.com/en-us/iaas/Content/Object/Concepts/understandingstoragetiers.htm",
                    "type": "string",
                    "default": "Standard",
                    "example": "Standard"
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 10
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                }
            }
        },
        "storage.OosInstance_principal_authConfig": {
            "type": "object",
            "properties": {
                "chunkSize": {
                    "description": "Chunk size to use for uploading.",
                    "type": "string",
                    "default": "5Mi"
                },
                "compartment": {
                    "description": "Object storage compartment OCID",
                    "type": "string"
                },
                "copyCutoff": {
                    "description": "Cutoff for switching to multipart copy.",
                    "type": "string",
                    "default": "4.656Gi"
                },
                "copyTimeout": {
                    "description": "Timeout for copy.",
                    "type": "string",
                    "default": "1m0s"
                },
                "disableChecksum": {
                    "description": "Don't store MD5 checksum with object metadata.",
                    "type": "boolean",
                    "default": false
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for Object storage API.",
                    "type": "string"
                },
                "leavePartsOnError": {
                    "description": "If true avoid calling abort upload on a failure, leaving all successfully uploaded parts on S3 for manual recovery.",
                    "type": "boolean",
                    "default": false
                },
                "namespace": {
                    "description": "Object storage namespace",
                    "type": "string"
                },
                "noCheckBucket": {
                    "description": "If set, don't attempt to check the bucket exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "region": {
                    "description": "Object storage Region",
                    "type": "string"
                },
                "sseCustomerAlgorithm": {
                    "description": "If using SSE-C, the optional header that specifies \"AES256\" as the encryption algorithm.",
                    "type": "string",
                    "example": ""
                },
                "sseCustomerKey": {
                    "description": "To use SSE-C, the optional header that specifies the base64-encoded 256-bit encryption key to use to",
                    "type": "string",
                    "example": ""
                },
                "sseCustomerKeyFile": {
                    "description": "To use SSE-C, a file containing the base64-encoded string of the AES-256 encryption key associated",
                    "type": "string",
                    "example": ""
                },
                "sseCustomerKeySha256": {
                    "description": "If using SSE-C, The optional header that specifies the base64-encoded SHA256 hash of the encryption",
                    "type": "string",
                    "example": ""
                },
                "sseKmsKeyId": {
                    "description": "if using using your own master key in vault, this header specifies the",
                    "type": "string",
                    "example": ""
                },
                "storageTier": {
                    "description": "The storage class to use when storing new objects in storage. https://docs.oracle.com/en-us/iaas/Content/Object/Concepts/understandingstoragetiers.htm",
                    "type": "string",
                    "default": "Standard",
                    "example": "Standard"
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 10
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                }
            }
        },
        "storage.OosNo_authConfig": {
            "type": "object",
            "properties": {
                "chunkSize": {
                    "description": "Chunk size to use for uploading.",
                    "type": "string",
                    "default": "5Mi"
                },
                "copyCutoff": {
                    "description": "Cutoff for switching to multipart copy.",
                    "type": "string",
                    "default": "4.656Gi"
                },
                "copyTimeout": {
                    "description": "Timeout for copy.",
                    "type": "string",
                    "default": "1m0s"
                },
                "disableChecksum": {
                    "description": "Don't store MD5 checksum with object metadata.",
                    "type": "boolean",
                    "default": false
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for Object storage API.",
                    "type": "string"
                },
                "leavePartsOnError": {
                    "description": "If true avoid calling abort upload on a failure, leaving all successfully uploaded parts on S3 for manual recovery.",
                    "type": "boolean",
                    "default": false
                },
                "namespace": {
                    "description": "Object storage namespace",
                    "type": "string"
                },
                "noCheckBucket": {
                    "description": "If set, don't attempt to check the bucket exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "region": {
                    "description": "Object storage Region",
                    "type": "string"
                },
                "sseCustomerAlgorithm": {
                    "description": "If using SSE-C, the optional header that specifies \"AES256\" as the encryption algorithm.",
                    "type": "string",
                    "example": ""
                },
                "sseCustomerKey": {
                    "description": "To use SSE-C, the optional header that specifies the base64-encoded 256-bit encryption key to use to",
                    "type": "string",
                    "example": ""
                },
                "sseCustomerKeyFile": {
                    "description": "To use SSE-C, a file containing the base64-encoded string of the AES-256 encryption key associated",
                    "type": "string",
                    "example": ""
                },
                "sseCustomerKeySha256": {
                    "description": "If using SSE-C, The optional header that specifies the base64-encoded SHA256 hash of the encryption",
                    "type": "string",
                    "example": ""
                },
                "sseKmsKeyId": {
                    "description": "if using using your own master key in vault, this header specifies the",
                    "type": "string",
                    "example": ""
                },
                "storageTier": {
                    "description": "The storage class to use when storing new objects in storage. https://docs.oracle.com/en-us/iaas/Content/Object/Concepts/understandingstoragetiers.htm",
                    "type": "string",
                    "default": "Standard",
                    "example": "Standard"
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 10
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                }
            }
        },
        "storage.OosResource_principal_authConfig": {
            "type": "object",
            "properties": {
                "chunkSize": {
                    "description": "Chunk size to use for uploading.",
                    "type": "string",
                    "default": "5Mi"
                },
                "compartment": {
                    "description": "Object storage compartment OCID",
                    "type": "string"
                },
                "copyCutoff": {
                    "description": "Cutoff for switching to multipart copy.",
                    "type": "string",
                    "default": "4.656Gi"
                },
                "copyTimeout": {
                    "description": "Timeout for copy.",
                    "type": "string",
                    "default": "1m0s"
                },
                "disableChecksum": {
                    "description": "Don't store MD5 checksum with object metadata.",
                    "type": "boolean",
                    "default": false
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for Object storage API.",
                    "type": "string"
                },
                "leavePartsOnError": {
                    "description": "If true avoid calling abort upload on a failure, leaving all successfully uploaded parts on S3 for manual recovery.",
                    "type": "boolean",
                    "default": false
                },
                "namespace": {
                    "description": "Object storage namespace",
                    "type": "string"
                },
                "noCheckBucket": {
                    "description": "If set, don't attempt to check the bucket exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "region": {
                    "description": "Object storage Region",
                    "type": "string"
                },
                "sseCustomerAlgorithm": {
                    "description": "If using SSE-C, the optional header that specifies \"AES256\" as the encryption algorithm.",
                    "type": "string",
                    "example": ""
                },
                "sseCustomerKey": {
                    "description": "To use SSE-C, the optional header that specifies the base64-encoded 256-bit encryption key to use to",
                    "type": "string",
                    "example": ""
                },
                "sseCustomerKeyFile": {
                    "description": "To use SSE-C, a file containing the base64-encoded string of the AES-256 encryption key associated",
                    "type": "string",
                    "example": ""
                },
                "sseCustomerKeySha256": {
                    "description": "If using SSE-C, The optional header that specifies the base64-encoded SHA256 hash of the encryption",
                    "type": "string",
                    "example": ""
                },
                "sseKmsKeyId": {
                    "description": "if using using your own master key in vault, this header specifies the",
                    "type": "string",
                    "example": ""
                },
                "storageTier": {
                    "description": "The storage class to use when storing new objects in storage. https://docs.oracle.com/en-us/iaas/Content/Object/Concepts/understandingstoragetiers.htm",
                    "type": "string",
                    "default": "Standard",
                    "example": "Standard"
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 10
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                }
            }
        },
        "storage.OosUser_principal_authConfig": {
            "type": "object",
            "properties": {
                "chunkSize": {
                    "description": "Chunk size to use for uploading.",
                    "type": "string",
                    "default": "5Mi"
                },
                "compartment": {
                    "description": "Object storage compartment OCID",
                    "type": "string"
                },
                "configFile": {
                    "description": "Path to OCI config file",
                    "type": "string",
                    "default": "~/.oci/config",
                    "example": "~/.oci/config"
                },
                "configProfile": {
                    "description": "Profile name inside the oci config file",
                    "type": "string",
                    "default": "Default",
                    "example": "Default"
                },
                "copyCutoff": {
                    "description": "Cutoff for switching to multipart copy.",
                    "type": "string",
                    "default": "4.656Gi"
                },
                "copyTimeout": {
                    "description": "Timeout for copy.",
                    "type": "string",
                    "default": "1m0s"
                },
                "disableChecksum": {
                    "description": "Don't store MD5 checksum with object metadata.",
                    "type": "boolean",
                    "default": false
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for Object storage API.",
                    "type": "string"
                },
                "leavePartsOnError": {
                    "description": "If true avoid calling abort upload on a failure, leaving all successfully uploaded parts on S3 for manual recovery.",
                    "type": "boolean",
                    "default": false
                },
                "namespace": {
                    "description": "Object storage namespace",
                    "type": "string"
                },
                "noCheckBucket": {
                    "description": "If set, don't attempt to check the bucket exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "region": {
                    "description": "Object storage Region",
                    "type": "string"
                },
                "sseCustomerAlgorithm": {
                    "description": "If using SSE-C, the optional header that specifies \"AES256\" as the encryption algorithm.",
                    "type": "string",
                    "example": ""
                },
                "sseCustomerKey": {
                    "description": "To use SSE-C, the optional header that specifies the base64-encoded 256-bit encryption key to use to",
                    "type": "string",
                    "example": ""
                },
                "sseCustomerKeyFile": {
                    "description": "To use SSE-C, a file containing the base64-encoded string of the AES-256 encryption key associated",
                    "type": "string",
                    "example": ""
                },
                "sseCustomerKeySha256": {
                    "description": "If using SSE-C, The optional header that specifies the base64-encoded SHA256 hash of the encryption",
                    "type": "string",
                    "example": ""
                },
                "sseKmsKeyId": {
                    "description": "if using using your own master key in vault, this header specifies the",
                    "type": "string",
                    "example": ""
                },
                "storageTier": {
                    "description": "The storage class to use when storing new objects in storage. https://docs.oracle.com/en-us/iaas/Content/Object/Concepts/understandingstoragetiers.htm",
                    "type": "string",
                    "default": "Standard",
                    "example": "Standard"
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 10
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                }
            }
        },
        "storage.OpendriveConfig": {
            "type": "object",
            "properties": {
                "chunkSize": {
                    "description": "Files will be uploaded in chunks this size.",
                    "type": "string",
                    "default": "10Mi"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,LtGt,DoubleQuote,Colon,Question,Asterisk,Pipe,BackSlash,LeftSpace,LeftCrLfHtVt,RightSpace,RightCrLfHtVt,InvalidUtf8,Dot"
                },
                "password": {
                    "description": "Password.",
                    "type": "string"
                },
                "username": {
                    "description": "Username.",
                    "type": "string"
                }
            }
        },
        "storage.PcloudConfig": {
            "type": "object",
            "properties": {
                "authUrl": {
                    "description": "Auth server URL.",
                    "type": "string"
                },
                "clientId": {
                    "description": "OAuth Client Id.",
                    "type": "string"
                },
                "clientSecret": {
                    "description": "OAuth Client Secret.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,BackSlash,Del,Ctl,InvalidUtf8,Dot"
                },
                "hostname": {
                    "description": "Hostname to connect to.",
                    "type": "string",
                    "default": "api.pcloud.com",
                    "example": "api.pcloud.com"
                },
                "password": {
                    "description": "Your pcloud password.",
                    "type": "string"
                },
                "rootFolderId": {
                    "description": "Fill in for rclone to use a non root folder as its starting point.",
                    "type": "string",
                    "default": "d0"
                },
                "token": {
                    "description": "OAuth Access Token as a JSON blob.",
                    "type": "string"
                },
                "tokenUrl": {
                    "description": "Token server url.",
                    "type": "string"
                },
                "username": {
                    "description": "Your pcloud username.",
                    "type": "string"
                }
            }
        },
        "storage.PremiumizemeConfig": {
            "type": "object",
            "properties": {
                "apiKey": {
                    "description": "API Key.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,DoubleQuote,BackSlash,Del,Ctl,InvalidUtf8,Dot"
                }
            }
        },
        "storage.PutioConfig": {
            "type": "object",
            "properties": {
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,BackSlash,Del,Ctl,InvalidUtf8,Dot"
                }
            }
        },
        "storage.QingstorConfig": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "description": "QingStor Access Key ID.",
                    "type": "string"
                },
                "chunkSize": {
                    "description": "Chunk size to use for uploading.",
                    "type": "string",
                    "default": "4Mi"
                },
                "connectionRetries": {
                    "description": "Number of connection retries.",
                    "type": "integer",
                    "default": 3
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,Ctl,InvalidUtf8"
                },
                "endpoint": {
                    "description": "Enter an endpoint URL to connection QingStor API.",
                    "type": "string"
                },
                "envAuth": {
                    "description": "Get QingStor credentials from runtime.",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "secretAccessKey": {
                    "description": "QingStor Secret Access Key (password).",
                    "type": "string"
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 1
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                },
                "zone": {
                    "description": "Zone to connect to.",
                    "type": "string",
                    "example": "pek3a"
                }
            }
        },
        "storage.S3AWSConfig": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "description": "AWS Access Key ID.",
                    "type": "string"
                },
                "acl": {
                    "description": "Canned ACL used when creating buckets and storing or copying objects.",
                    "type": "string"
                },
                "bucketAcl": {
                    "description": "Canned ACL used when creating buckets.",
                    "type": "string",
                    "example": "private"
                },
                "chunkSize": {
                    "description": "Chunk size to use for uploading.",
                    "type": "string",
                    "default": "5Mi"
                },
                "copyCutoff": {
                    "description": "Cutoff for switching to multipart copy.",
                    "type": "string",
                    "default": "4.656Gi"
                },
                "decompress": {
                    "description": "If set this will decompress gzip encoded objects.",
                    "type": "boolean",
                    "default": false
                },
                "disableChecksum": {
                    "description": "Don't store MD5 checksum with object metadata.",
                    "type": "boolean",
                    "default": false
                },
                "disableHttp2": {
                    "description": "Disable usage of http2 for S3 backends.",
                    "type": "boolean",
                    "default": false
                },
                "downloadUrl": {
                    "description": "Custom endpoint for downloads.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for S3 API.",
                    "type": "string"
                },
                "envAuth": {
                    "description": "Get AWS credentials from runtime (environment variables or EC2/ECS meta data if no env vars).",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "forcePathStyle": {
                    "description": "If true use path style access if false use virtual hosted style.",
                    "type": "boolean",
                    "default": true
                },
                "leavePartsOnError": {
                    "description": "If true avoid calling abort upload on a failure, leaving all successfully uploaded parts on S3 for manual recovery.",
                    "type": "boolean",
                    "default": false
                },
                "listChunk": {
                    "description": "Size of listing chunk (response list for each ListObject S3 request).",
                    "type": "integer",
                    "default": 1000
                },
                "listUrlEncode": {
                    "description": "Whether to url encode listings: true/false/unset",
                    "type": "string",
                    "default": "unset"
                },
                "listVersion": {
                    "description": "Version of ListObjects to use: 1,2 or 0 for auto.",
                    "type": "integer",
                    "default": 0
                },
                "locationConstraint": {
                    "description": "Location constraint - must be set to match the Region.",
                    "type": "string",
                    "example": ""
                },
                "maxUploadParts": {
                    "description": "Maximum number of parts in a multipart upload.",
                    "type": "integer",
                    "default": 10000
                },
                "memoryPoolFlushTime": {
                    "description": "How often internal memory buffer pools will be flushed.",
                    "type": "string",
                    "default": "1m0s"
                },
                "memoryPoolUseMmap": {
                    "description": "Whether to use mmap buffers in internal memory pool.",
                    "type": "boolean",
                    "default": false
                },
                "mightGzip": {
                    "description": "Set this if the backend might gzip objects.",
                    "type": "string",
                    "default": "unset"
                },
                "noCheckBucket": {
                    "description": "If set, don't attempt to check the bucket exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "noHead": {
                    "description": "If set, don't HEAD uploaded objects to check integrity.",
                    "type": "boolean",
                    "default": false
                },
                "noHeadObject": {
                    "description": "If set, do not do HEAD before GET when getting objects.",
                    "type": "boolean",
                    "default": false
                },
                "noSystemMetadata": {
                    "description": "Suppress setting and reading of system metadata",
                    "type": "boolean",
                    "default": false
                },
                "profile": {
                    "description": "Profile to use in the shared credentials file.",
                    "type": "string"
                },
                "region": {
                    "description": "Region to connect to.",
                    "type": "string",
                    "example": "us-east-1"
                },
                "requesterPays": {
                    "description": "Enables requester pays option when interacting with S3 bucket.",
                    "type": "boolean",
                    "default": false
                },
                "secretAccessKey": {
                    "description": "AWS Secret Access Key (password).",
                    "type": "string"
                },
                "serverSideEncryption": {
                    "description": "The server-side encryption algorithm used when storing this object in S3.",
                    "type": "string",
                    "example": ""
                },
                "sessionToken": {
                    "description": "An AWS session token.",
                    "type": "string"
                },
                "sharedCredentialsFile": {
                    "description": "Path to the shared credentials file.",
                    "type": "string"
                },
                "sseCustomerAlgorithm": {
                    "description": "If using SSE-C, the server-side encryption algorithm used when storing this object in S3.",
                    "type": "string",
                    "example": ""
                },
                "sseCustomerKey": {
                    "description": "To use SSE-C you may provide the secret encryption key used to encrypt/decrypt your data.",
                    "type": "string",
                    "example": ""
                },
                "sseCustomerKeyBase64": {
                    "description": "If using SSE-C you must provide the secret encryption key encoded in base64 format to encrypt/decrypt your data.",
                    "type": "string",
                    "example": ""
                },
                "sseCustomerKeyMd5": {
                    "description": "If using SSE-C you may provide the secret encryption key MD5 checksum (optional).",
                    "type": "string",
                    "example": ""
                },
                "sseKmsKeyId": {
                    "description": "If using KMS ID you must provide the ARN of Key.",
                    "type": "string",
                    "example": ""
                },
                "storageClass": {
                    "description": "The storage class to use when storing new objects in S3.",
                    "type": "string",
                    "example": ""
                },
                "stsEndpoint": {
                    "description": "Endpoint for STS.",
                    "type": "string"
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 4
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                },
                "useAccelerateEndpoint": {
                    "description": "If true use the AWS S3 accelerated endpoint.",
                    "type": "boolean",
                    "default": false
                },
                "useMultipartEtag": {
                    "description": "Whether to use ETag in multipart uploads for verification",
                    "type": "string",
                    "default": "unset"
                },
                "usePresignedRequest": {
                    "description": "Whether to use a presigned request or PutObject for single part uploads",
                    "type": "boolean",
                    "default": false
                },
                "v2Auth": {
                    "description": "If true use v2 authentication.",
                    "type": "boolean",
                    "default": false
                },
                "versionAt": {
                    "description": "Show file versions as they were at the specified time.",
                    "type": "string",
                    "default": "off"
                },
                "versions": {
                    "description": "Include old versions in directory listings.",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "storage.S3AlibabaConfig": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "description": "AWS Access Key ID.",
                    "type": "string"
                },
                "acl": {
                    "description": "Canned ACL used when creating buckets and storing or copying objects.",
                    "type": "string"
                },
                "bucketAcl": {
                    "description": "Canned ACL used when creating buckets.",
                    "type": "string",
                    "example": "private"
                },
                "chunkSize": {
                    "description": "Chunk size to use for uploading.",
                    "type": "string",
                    "default": "5Mi"
                },
                "copyCutoff": {
                    "description": "Cutoff for switching to multipart copy.",
                    "type": "string",
                    "default": "4.656Gi"
                },
                "decompress": {
                    "description": "If set this will decompress gzip encoded objects.",
                    "type": "boolean",
                    "default": false
                },
                "disableChecksum": {
                    "description": "Don't store MD5 checksum with object metadata.",
                    "type": "boolean",
                    "default": false
                },
                "disableHttp2": {
                    "description": "Disable usage of http2 for S3 backends.",
                    "type": "boolean",
                    "default": false
                },
                "downloadUrl": {
                    "description": "Custom endpoint for downloads.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for OSS API.",
                    "type": "string",
                    "example": "oss-accelerate.aliyuncs.com"
                },
                "envAuth": {
                    "description": "Get AWS credentials from runtime (environment variables or EC2/ECS meta data if no env vars).",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "forcePathStyle": {
                    "description": "If true use path style access if false use virtual hosted style.",
                    "type": "boolean",
                    "default": true
                },
                "listChunk": {
                    "description": "Size of listing chunk (response list for each ListObject S3 request).",
                    "type": "integer",
                    "default": 1000
                },
                "listUrlEncode": {
                    "description": "Whether to url encode listings: true/false/unset",
                    "type": "string",
                    "default": "unset"
                },
                "listVersion": {
                    "description": "Version of ListObjects to use: 1,2 or 0 for auto.",
                    "type": "integer",
                    "default": 0
                },
                "maxUploadParts": {
                    "description": "Maximum number of parts in a multipart upload.",
                    "type": "integer",
                    "default": 10000
                },
                "memoryPoolFlushTime": {
                    "description": "How often internal memory buffer pools will be flushed.",
                    "type": "string",
                    "default": "1m0s"
                },
                "memoryPoolUseMmap": {
                    "description": "Whether to use mmap buffers in internal memory pool.",
                    "type": "boolean",
                    "default": false
                },
                "mightGzip": {
                    "description": "Set this if the backend might gzip objects.",
                    "type": "string",
                    "default": "unset"
                },
                "noCheckBucket": {
                    "description": "If set, don't attempt to check the bucket exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "noHead": {
                    "description": "If set, don't HEAD uploaded objects to check integrity.",
                    "type": "boolean",
                    "default": false
                },
                "noHeadObject": {
                    "description": "If set, do not do HEAD before GET when getting objects.",
                    "type": "boolean",
                    "default": false
                },
                "noSystemMetadata": {
                    "description": "Suppress setting and reading of system metadata",
                    "type": "boolean",
                    "default": false
                },
                "profile": {
                    "description": "Profile to use in the shared credentials file.",
                    "type": "string"
                },
                "secretAccessKey": {
                    "description": "AWS Secret Access Key (password).",
                    "type": "string"
                },
                "sessionToken": {
                    "description": "An AWS session token.",
                    "type": "string"
                },
                "sharedCredentialsFile": {
                    "description": "Path to the shared credentials file.",
                    "type": "string"
                },
                "storageClass": {
                    "description": "The storage class to use when storing new objects in OSS.",
                    "type": "string",
                    "example": ""
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 4
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                },
                "useMultipartEtag": {
                    "description": "Whether to use ETag in multipart uploads for verification",
                    "type": "string",
                    "default": "unset"
                },
                "usePresignedRequest": {
                    "description": "Whether to use a presigned request or PutObject for single part uploads",
                    "type": "boolean",
                    "default": false
                },
                "v2Auth": {
                    "description": "If true use v2 authentication.",
                    "type": "boolean",
                    "default": false
                },
                "versionAt": {
                    "description": "Show file versions as they were at the specified time.",
                    "type": "string",
                    "default": "off"
                },
                "versions": {
                    "description": "Include old versions in directory listings.",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "storage.S3ArvanCloudConfig": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "description": "AWS Access Key ID.",
                    "type": "string"
                },
                "acl": {
                    "description": "Canned ACL used when creating buckets and storing or copying objects.",
                    "type": "string"
                },
                "bucketAcl": {
                    "description": "Canned ACL used when creating buckets.",
                    "type": "string",
                    "example": "private"
                },
                "chunkSize": {
                    "description": "Chunk size to use for uploading.",
                    "type": "string",
                    "default": "5Mi"
                },
                "copyCutoff": {
                    "description": "Cutoff for switching to multipart copy.",
                    "type": "string",
                    "default": "4.656Gi"
                },
                "decompress": {
                    "description": "If set this will decompress gzip encoded objects.",
                    "type": "boolean",
                    "default": false
                },
                "disableChecksum": {
                    "description": "Don't store MD5 checksum with object metadata.",
                    "type": "boolean",
                    "default": false
                },
                "disableHttp2": {
                    "description": "Disable usage of http2 for S3 backends.",
                    "type": "boolean",
                    "default": false
                },
                "downloadUrl": {
                    "description": "Custom endpoint for downloads.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for Arvan Cloud Object Storage (AOS) API.",
                    "type": "string",
                    "example": "s3.ir-thr-at1.arvanstorage.com"
                },
                "envAuth": {
                    "description": "Get AWS credentials from runtime (environment variables or EC2/ECS meta data if no env vars).",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "forcePathStyle": {
                    "description": "If true use path style access if false use virtual hosted style.",
                    "type": "boolean",
                    "default": true
                },
                "listChunk": {
                    "description": "Size of listing chunk (response list for each ListObject S3 request).",
                    "type": "integer",
                    "default": 1000
                },
                "listUrlEncode": {
                    "description": "Whether to url encode listings: true/false/unset",
                    "type": "string",
                    "default": "unset"
                },
                "listVersion": {
                    "description": "Version of ListObjects to use: 1,2 or 0 for auto.",
                    "type": "integer",
                    "default": 0
                },
                "locationConstraint": {
                    "description": "Location constraint - must match endpoint.",
                    "type": "string",
                    "example": "ir-thr-at1"
                },
                "maxUploadParts": {
                    "description": "Maximum number of parts in a multipart upload.",
                    "type": "integer",
                    "default": 10000
                },
                "memoryPoolFlushTime": {
                    "description": "How often internal memory buffer pools will be flushed.",
                    "type": "string",
                    "default": "1m0s"
                },
                "memoryPoolUseMmap": {
                    "description": "Whether to use mmap buffers in internal memory pool.",
                    "type": "boolean",
                    "default": false
                },
                "mightGzip": {
                    "description": "Set this if the backend might gzip objects.",
                    "type": "string",
                    "default": "unset"
                },
                "noCheckBucket": {
                    "description": "If set, don't attempt to check the bucket exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "noHead": {
                    "description": "If set, don't HEAD uploaded objects to check integrity.",
                    "type": "boolean",
                    "default": false
                },
                "noHeadObject": {
                    "description": "If set, do not do HEAD before GET when getting objects.",
                    "type": "boolean",
                    "default": false
                },
                "noSystemMetadata": {
                    "description": "Suppress setting and reading of system metadata",
                    "type": "boolean",
                    "default": false
                },
                "profile": {
                    "description": "Profile to use in the shared credentials file.",
                    "type": "string"
                },
                "secretAccessKey": {
                    "description": "AWS Secret Access Key (password).",
                    "type": "string"
                },
                "sessionToken": {
                    "description": "An AWS session token.",
                    "type": "string"
                },
                "sharedCredentialsFile": {
                    "description": "Path to the shared credentials file.",
                    "type": "string"
                },
                "storageClass": {
                    "description": "The storage class to use when storing new objects in ArvanCloud.",
                    "type": "string",
                    "example": "STANDARD"
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 4
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                },
                "useMultipartEtag": {
                    "description": "Whether to use ETag in multipart uploads for verification",
                    "type": "string",
                    "default": "unset"
                },
                "usePresignedRequest": {
                    "description": "Whether to use a presigned request or PutObject for single part uploads",
                    "type": "boolean",
                    "default": false
                },
                "v2Auth": {
                    "description": "If true use v2 authentication.",
                    "type": "boolean",
                    "default": false
                },
                "versionAt": {
                    "description": "Show file versions as they were at the specified time.",
                    "type": "string",
                    "default": "off"
                },
                "versions": {
                    "description": "Include old versions in directory listings.",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "storage.S3CephConfig": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "description": "AWS Access Key ID.",
                    "type": "string"
                },
                "acl": {
                    "description": "Canned ACL used when creating buckets and storing or copying objects.",
                    "type": "string"
                },
                "bucketAcl": {
                    "description": "Canned ACL used when creating buckets.",
                    "type": "string",
                    "example": "private"
                },
                "chunkSize": {
                    "description": "Chunk size to use for uploading.",
                    "type": "string",
                    "default": "5Mi"
                },
                "copyCutoff": {
                    "description": "Cutoff for switching to multipart copy.",
                    "type": "string",
                    "default": "4.656Gi"
                },
                "decompress": {
                    "description": "If set this will decompress gzip encoded objects.",
                    "type": "boolean",
                    "default": false
                },
                "disableChecksum": {
                    "description": "Don't store MD5 checksum with object metadata.",
                    "type": "boolean",
                    "default": false
                },
                "disableHttp2": {
                    "description": "Disable usage of http2 for S3 backends.",
                    "type": "boolean",
                    "default": false
                },
                "downloadUrl": {
                    "description": "Custom endpoint for downloads.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for S3 API.",
                    "type": "string"
                },
                "envAuth": {
                    "description": "Get AWS credentials from runtime (environment variables or EC2/ECS meta data if no env vars).",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "forcePathStyle": {
                    "description": "If true use path style access if false use virtual hosted style.",
                    "type": "boolean",
                    "default": true
                },
                "listChunk": {
                    "description": "Size of listing chunk (response list for each ListObject S3 request).",
                    "type": "integer",
                    "default": 1000
                },
                "listUrlEncode": {
                    "description": "Whether to url encode listings: true/false/unset",
                    "type": "string",
                    "default": "unset"
                },
                "listVersion": {
                    "description": "Version of ListObjects to use: 1,2 or 0 for auto.",
                    "type": "integer",
                    "default": 0
                },
                "locationConstraint": {
                    "description": "Location constraint - must be set to match the Region.",
                    "type": "string"
                },
                "maxUploadParts": {
                    "description": "Maximum number of parts in a multipart upload.",
                    "type": "integer",
                    "default": 10000
                },
                "memoryPoolFlushTime": {
                    "description": "How often internal memory buffer pools will be flushed.",
                    "type": "string",
                    "default": "1m0s"
                },
                "memoryPoolUseMmap": {
                    "description": "Whether to use mmap buffers in internal memory pool.",
                    "type": "boolean",
                    "default": false
                },
                "mightGzip": {
                    "description": "Set this if the backend might gzip objects.",
                    "type": "string",
                    "default": "unset"
                },
                "noCheckBucket": {
                    "description": "If set, don't attempt to check the bucket exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "noHead": {
                    "description": "If set, don't HEAD uploaded objects to check integrity.",
                    "type": "boolean",
                    "default": false
                },
                "noHeadObject": {
                    "description": "If set, do not do HEAD before GET when getting objects.",
                    "type": "boolean",
                    "default": false
                },
                "noSystemMetadata": {
                    "description": "Suppress setting and reading of system metadata",
                    "type": "boolean",
                    "default": false
                },
                "profile": {
                    "description": "Profile to use in the shared credentials file.",
                    "type": "string"
                },
                "region": {
                    "description": "Region to connect to.",
                    "type": "string",
                    "example": ""
                },
                "secretAccessKey": {
                    "description": "AWS Secret Access Key (password).",
                    "type": "string"
                },
                "serverSideEncryption": {
                    "description": "The server-side encryption algorithm used when storing this object in S3.",
                    "type": "string",
                    "example": ""
                },
                "sessionToken": {
                    "description": "An AWS session token.",
                    "type": "string"
                },
                "sharedCredentialsFile": {
                    "description": "Path to the shared credentials file.",
                    "type": "string"
                },
                "sseCustomerAlgorithm": {
                    "description": "If using SSE-C, the server-side encryption algorithm used when storing this object in S3.",
                    "type": "string",
                    "example": ""
                },
                "sseCustomerKey": {
                    "description": "To use SSE-C you may provide the secret encryption key used to encrypt/decrypt your data.",
                    "type": "string",
                    "example": ""
                },
                "sseCustomerKeyBase64": {
                    "description": "If using SSE-C you must provide the secret encryption key encoded in base64 format to encrypt/decrypt your data.",
                    "type": "string",
                    "example": ""
                },
                "sseCustomerKeyMd5": {
                    "description": "If using SSE-C you may provide the secret encryption key MD5 checksum (optional).",
                    "type": "string",
                    "example": ""
                },
                "sseKmsKeyId": {
                    "description": "If using KMS ID you must provide the ARN of Key.",
                    "type": "string",
                    "example": ""
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 4
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                },
                "useMultipartEtag": {
                    "description": "Whether to use ETag in multipart uploads for verification",
                    "type": "string",
                    "default": "unset"
                },
                "usePresignedRequest": {
                    "description": "Whether to use a presigned request or PutObject for single part uploads",
                    "type": "boolean",
                    "default": false
                },
                "v2Auth": {
                    "description": "If true use v2 authentication.",
                    "type": "boolean",
                    "default": false
                },
                "versionAt": {
                    "description": "Show file versions as they were at the specified time.",
                    "type": "string",
                    "default": "off"
                },
                "versions": {
                    "description": "Include old versions in directory listings.",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "storage.S3ChinaMobileConfig": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "description": "AWS Access Key ID.",
                    "type": "string"
                },
                "acl": {
                    "description": "Canned ACL used when creating buckets and storing or copying objects.",
                    "type": "string"
                },
                "bucketAcl": {
                    "description": "Canned ACL used when creating buckets.",
                    "type": "string",
                    "example": "private"
                },
                "chunkSize": {
                    "description": "Chunk size to use for uploading.",
                    "type": "string",
                    "default": "5Mi"
                },
                "copyCutoff": {
                    "description": "Cutoff for switching to multipart copy.",
                    "type": "string",
                    "default": "4.656Gi"
                },
                "decompress": {
                    "description": "If set this will decompress gzip encoded objects.",
                    "type": "boolean",
                    "default": false
                },
                "disableChecksum": {
                    "description": "Don't store MD5 checksum with object metadata.",
                    "type": "boolean",
                    "default": false
                },
                "disableHttp2": {
                    "description": "Disable usage of http2 for S3 backends.",
                    "type": "boolean",
                    "default": false
                },
                "downloadUrl": {
                    "description": "Custom endpoint for downloads.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for China Mobile Ecloud Elastic Object Storage (EOS) API.",
                    "type": "string",
                    "example": "eos-wuxi-1.cmecloud.cn"
                },
                "envAuth": {
                    "description": "Get AWS credentials from runtime (environment variables or EC2/ECS meta data if no env vars).",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "forcePathStyle": {
                    "description": "If true use path style access if false use virtual hosted style.",
                    "type": "boolean",
                    "default": true
                },
                "listChunk": {
                    "description": "Size of listing chunk (response list for each ListObject S3 request).",
                    "type": "integer",
                    "default": 1000
                },
                "listUrlEncode": {
                    "description": "Whether to url encode listings: true/false/unset",
                    "type": "string",
                    "default": "unset"
                },
                "listVersion": {
                    "description": "Version of ListObjects to use: 1,2 or 0 for auto.",
                    "type": "integer",
                    "default": 0
                },
                "locationConstraint": {
                    "description": "Location constraint - must match endpoint.",
                    "type": "string",
                    "example": "wuxi1"
                },
                "maxUploadParts": {
                    "description": "Maximum number of parts in a multipart upload.",
                    "type": "integer",
                    "default": 10000
                },
                "memoryPoolFlushTime": {
                    "description": "How often internal memory buffer pools will be flushed.",
                    "type": "string",
                    "default": "1m0s"
                },
                "memoryPoolUseMmap": {
                    "description": "Whether to use mmap buffers in internal memory pool.",
                    "type": "boolean",
                    "default": false
                },
                "mightGzip": {
                    "description": "Set this if the backend might gzip objects.",
                    "type": "string",
                    "default": "unset"
                },
                "noCheckBucket": {
                    "description": "If set, don't attempt to check the bucket exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "noHead": {
                    "description": "If set, don't HEAD uploaded objects to check integrity.",
                    "type": "boolean",
                    "default": false
                },
                "noHeadObject": {
                    "description": "If set, do not do HEAD before GET when getting objects.",
                    "type": "boolean",
                    "default": false
                },
                "noSystemMetadata": {
                    "description": "Suppress setting and reading of system metadata",
                    "type": "boolean",
                    "default": false
                },
                "profile": {
                    "description": "Profile to use in the shared credentials file.",
                    "type": "string"
                },
                "secretAccessKey": {
                    "description": "AWS Secret Access Key (password).",
                    "type": "string"
                },
                "serverSideEncryption": {
                    "description": "The server-side encryption algorithm used when storing this object in S3.",
                    "type": "string",
                    "example": ""
                },
                "sessionToken": {
                    "description": "An AWS session token.",
                    "type": "string"
                },
                "sharedCredentialsFile": {
                    "description": "Path to the shared credentials file.",
                    "type": "string"
                },
                "sseCustomerAlgorithm": {
                    "description": "If using SSE-C, the server-side encryption algorithm used when storing this object in S3.",
                    "type": "string",
                    "example": ""
                },
                "sseCustomerKey": {
                    "description": "To use SSE-C you may provide the secret encryption key used to encrypt/decrypt your data.",
                    "type": "string",
                    "example": ""
                },
                "sseCustomerKeyBase64": {
                    "description": "If using SSE-C you must provide the secret encryption key encoded in base64 format to encrypt/decrypt your data.",
                    "type": "string",
                    "example": ""
                },
                "sseCustomerKeyMd5": {
                    "description": "If using SSE-C you may provide the secret encryption key MD5 checksum (optional).",
                    "type": "string",
                    "example": ""
                },
                "storageClass": {
                    "description": "The storage class to use when storing new objects in ChinaMobile.",
                    "type": "string",
                    "example": ""
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 4
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                },
                "useMultipartEtag": {
                    "description": "Whether to use ETag in multipart uploads for verification",
                    "type": "string",
                    "default": "unset"
                },
                "usePresignedRequest": {
                    "description": "Whether to use a presigned request or PutObject for single part uploads",
                    "type": "boolean",
                    "default": false
                },
                "v2Auth": {
                    "description": "If true use v2 authentication.",
                    "type": "boolean",
                    "default": false
                },
                "versionAt": {
                    "description": "Show file versions as they were at the specified time.",
                    "type": "string",
                    "default": "off"
                },
                "versions": {
                    "description": "Include old versions in directory listings.",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "storage.S3CloudflareConfig": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "description": "AWS Access Key ID.",
                    "type": "string"
                },
                "bucketAcl": {
                    "description": "Canned ACL used when creating buckets.",
                    "type": "string",
                    "example": "private"
                },
                "chunkSize": {
                    "description": "Chunk size to use for uploading.",
                    "type": "string",
                    "default": "5Mi"
                },
                "copyCutoff": {
                    "description": "Cutoff for switching to multipart copy.",
                    "type": "string",
                    "default": "4.656Gi"
                },
                "decompress": {
                    "description": "If set this will decompress gzip encoded objects.",
                    "type": "boolean",
                    "default": false
                },
                "disableChecksum": {
                    "description": "Don't store MD5 checksum with object metadata.",
                    "type": "boolean",
                    "default": false
                },
                "disableHttp2": {
                    "description": "Disable usage of http2 for S3 backends.",
                    "type": "boolean",
                    "default": false
                },
                "downloadUrl": {
                    "description": "Custom endpoint for downloads.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for S3 API.",
                    "type": "string"
                },
                "envAuth": {
                    "description": "Get AWS credentials from runtime (environment variables or EC2/ECS meta data if no env vars).",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "forcePathStyle": {
                    "description": "If true use path style access if false use virtual hosted style.",
                    "type": "boolean",
                    "default": true
                },
                "listChunk": {
                    "description": "Size of listing chunk (response list for each ListObject S3 request).",
                    "type": "integer",
                    "default": 1000
                },
                "listUrlEncode": {
                    "description": "Whether to url encode listings: true/false/unset",
                    "type": "string",
                    "default": "unset"
                },
                "listVersion": {
                    "description": "Version of ListObjects to use: 1,2 or 0 for auto.",
                    "type": "integer",
                    "default": 0
                },
                "maxUploadParts": {
                    "description": "Maximum number of parts in a multipart upload.",
                    "type": "integer",
                    "default": 10000
                },
                "memoryPoolFlushTime": {
                    "description": "How often internal memory buffer pools will be flushed.",
                    "type": "string",
                    "default": "1m0s"
                },
                "memoryPoolUseMmap": {
                    "description": "Whether to use mmap buffers in internal memory pool.",
                    "type": "boolean",
                    "default": false
                },
                "mightGzip": {
                    "description": "Set this if the backend might gzip objects.",
                    "type": "string",
                    "default": "unset"
                },
                "noCheckBucket": {
                    "description": "If set, don't attempt to check the bucket exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "noHead": {
                    "description": "If set, don't HEAD uploaded objects to check integrity.",
                    "type": "boolean",
                    "default": false
                },
                "noHeadObject": {
                    "description": "If set, do not do HEAD before GET when getting objects.",
                    "type": "boolean",
                    "default": false
                },
                "noSystemMetadata": {
                    "description": "Suppress setting and reading of system metadata",
                    "type": "boolean",
                    "default": false
                },
                "profile": {
                    "description": "Profile to use in the shared credentials file.",
                    "type": "string"
                },
                "region": {
                    "description": "Region to connect to.",
                    "type": "string",
                    "example": "auto"
                },
                "secretAccessKey": {
                    "description": "AWS Secret Access Key (password).",
                    "type": "string"
                },
                "sessionToken": {
                    "description": "An AWS session token.",
                    "type": "string"
                },
                "sharedCredentialsFile": {
                    "description": "Path to the shared credentials file.",
                    "type": "string"
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 4
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                },
                "useMultipartEtag": {
                    "description": "Whether to use ETag in multipart uploads for verification",
                    "type": "string",
                    "default": "unset"
                },
                "usePresignedRequest": {
                    "description": "Whether to use a presigned request or PutObject for single part uploads",
                    "type": "boolean",
                    "default": false
                },
                "v2Auth": {
                    "description": "If true use v2 authentication.",
                    "type": "boolean",
                    "default": false
                },
                "versionAt": {
                    "description": "Show file versions as they were at the specified time.",
                    "type": "string",
                    "default": "off"
                },
                "versions": {
                    "description": "Include old versions in directory listings.",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "storage.S3DigitalOceanConfig": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "description": "AWS Access Key ID.",
                    "type": "string"
                },
                "acl": {
                    "description": "Canned ACL used when creating buckets and storing or copying objects.",
                    "type": "string"
                },
                "bucketAcl": {
                    "description": "Canned ACL used when creating buckets.",
                    "type": "string",
                    "example": "private"
                },
                "chunkSize": {
                    "description": "Chunk size to use for uploading.",
                    "type": "string",
                    "default": "5Mi"
                },
                "copyCutoff": {
                    "description": "Cutoff for switching to multipart copy.",
                    "type": "string",
                    "default": "4.656Gi"
                },
                "decompress": {
                    "description": "If set this will decompress gzip encoded objects.",
                    "type": "boolean",
                    "default": false
                },
                "disableChecksum": {
                    "description": "Don't store MD5 checksum with object metadata.",
                    "type": "boolean",
                    "default": false
                },
                "disableHttp2": {
                    "description": "Disable usage of http2 for S3 backends.",
                    "type": "boolean",
                    "default": false
                },
                "downloadUrl": {
                    "description": "Custom endpoint for downloads.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for S3 API.",
                    "type": "string",
                    "example": "syd1.digitaloceanspaces.com"
                },
                "envAuth": {
                    "description": "Get AWS credentials from runtime (environment variables or EC2/ECS meta data if no env vars).",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "forcePathStyle": {
                    "description": "If true use path style access if false use virtual hosted style.",
                    "type": "boolean",
                    "default": true
                },
                "listChunk": {
                    "description": "Size of listing chunk (response list for each ListObject S3 request).",
                    "type": "integer",
                    "default": 1000
                },
                "listUrlEncode": {
                    "description": "Whether to url encode listings: true/false/unset",
                    "type": "string",
                    "default": "unset"
                },
                "listVersion": {
                    "description": "Version of ListObjects to use: 1,2 or 0 for auto.",
                    "type": "integer",
                    "default": 0
                },
                "locationConstraint": {
                    "description": "Location constraint - must be set to match the Region.",
                    "type": "string"
                },
                "maxUploadParts": {
                    "description": "Maximum number of parts in a multipart upload.",
                    "type": "integer",
                    "default": 10000
                },
                "memoryPoolFlushTime": {
                    "description": "How often internal memory buffer pools will be flushed.",
                    "type": "string",
                    "default": "1m0s"
                },
                "memoryPoolUseMmap": {
                    "description": "Whether to use mmap buffers in internal memory pool.",
                    "type": "boolean",
                    "default": false
                },
                "mightGzip": {
                    "description": "Set this if the backend might gzip objects.",
                    "type": "string",
                    "default": "unset"
                },
                "noCheckBucket": {
                    "description": "If set, don't attempt to check the bucket exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "noHead": {
                    "description": "If set, don't HEAD uploaded objects to check integrity.",
                    "type": "boolean",
                    "default": false
                },
                "noHeadObject": {
                    "description": "If set, do not do HEAD before GET when getting objects.",
                    "type": "boolean",
                    "default": false
                },
                "noSystemMetadata": {
                    "description": "Suppress setting and reading of system metadata",
                    "type": "boolean",
                    "default": false
                },
                "profile": {
                    "description": "Profile to use in the shared credentials file.",
                    "type": "string"
                },
                "region": {
                    "description": "Region to connect to.",
                    "type": "string",
                    "example": ""
                },
                "secretAccessKey": {
                    "description": "AWS Secret Access Key (password).",
                    "type": "string"
                },
                "sessionToken": {
                    "description": "An AWS session token.",
                    "type": "string"
                },
                "sharedCredentialsFile": {
                    "description": "Path to the shared credentials file.",
                    "type": "string"
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 4
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                },
                "useMultipartEtag": {
                    "description": "Whether to use ETag in multipart uploads for verification",
                    "type": "string",
                    "default": "unset"
                },
                "usePresignedRequest": {
                    "description": "Whether to use a presigned request or PutObject for single part uploads",
                    "type": "boolean",
                    "default": false
                },
                "v2Auth": {
                    "description": "If true use v2 authentication.",
                    "type": "boolean",
                    "default": false
                },
                "versionAt": {
                    "description": "Show file versions as they were at the specified time.",
                    "type": "string",
                    "default": "off"
                },
                "versions": {
                    "description": "Include old versions in directory listings.",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "storage.S3DreamhostConfig": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "description": "AWS Access Key ID.",
                    "type": "string"
                },
                "acl": {
                    "description": "Canned ACL used when creating buckets and storing or copying objects.",
                    "type": "string"
                },
                "bucketAcl": {
                    "description": "Canned ACL used when creating buckets.",
                    "type": "string",
                    "example": "private"
                },
                "chunkSize": {
                    "description": "Chunk size to use for uploading.",
                    "type": "string",
                    "default": "5Mi"
                },
                "copyCutoff": {
                    "description": "Cutoff for switching to multipart copy.",
                    "type": "string",
                    "default": "4.656Gi"
                },
                "decompress": {
                    "description": "If set this will decompress gzip encoded objects.",
                    "type": "boolean",
                    "default": false
                },
                "disableChecksum": {
                    "description": "Don't store MD5 checksum with object metadata.",
                    "type": "boolean",
                    "default": false
                },
                "disableHttp2": {
                    "description": "Disable usage of http2 for S3 backends.",
                    "type": "boolean",
                    "default": false
                },
                "downloadUrl": {
                    "description": "Custom endpoint for downloads.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for S3 API.",
                    "type": "string",
                    "example": "objects-us-east-1.dream.io"
                },
                "envAuth": {
                    "description": "Get AWS credentials from runtime (environment variables or EC2/ECS meta data if no env vars).",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "forcePathStyle": {
                    "description": "If true use path style access if false use virtual hosted style.",
                    "type": "boolean",
                    "default": true
                },
                "listChunk": {
                    "description": "Size of listing chunk (response list for each ListObject S3 request).",
                    "type": "integer",
                    "default": 1000
                },
                "listUrlEncode": {
                    "description": "Whether to url encode listings: true/false/unset",
                    "type": "string",
                    "default": "unset"
                },
                "listVersion": {
                    "description": "Version of ListObjects to use: 1,2 or 0 for auto.",
                    "type": "integer",
                    "default": 0
                },
                "locationConstraint": {
                    "description": "Location constraint - must be set to match the Region.",
                    "type": "string"
                },
                "maxUploadParts": {
                    "description": "Maximum number of parts in a multipart upload.",
                    "type": "integer",
                    "default": 10000
                },
                "memoryPoolFlushTime": {
                    "description": "How often internal memory buffer pools will be flushed.",
                    "type": "string",
                    "default": "1m0s"
                },
                "memoryPoolUseMmap": {
                    "description": "Whether to use mmap buffers in internal memory pool.",
                    "type": "boolean",
                    "default": false
                },
                "mightGzip": {
                    "description": "Set this if the backend might gzip objects.",
                    "type": "string",
                    "default": "unset"
                },
                "noCheckBucket": {
                    "description": "If set, don't attempt to check the bucket exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "noHead": {
                    "description": "If set, don't HEAD uploaded objects to check integrity.",
                    "type": "boolean",
                    "default": false
                },
                "noHeadObject": {
                    "description": "If set, do not do HEAD before GET when getting objects.",
                    "type": "boolean",
                    "default": false
                },
                "noSystemMetadata": {
                    "description": "Suppress setting and reading of system metadata",
                    "type": "boolean",
                    "default": false
                },
                "profile": {
                    "description": "Profile to use in the shared credentials file.",
                    "type": "string"
                },
                "region": {
                    "description": "Region to connect to.",
                    "type": "string",
                    "example": ""
                },
                "secretAccessKey": {
                    "description": "AWS Secret Access Key (password).",
                    "type": "string"
                },
                "sessionToken": {
                    "description": "An AWS session token.",
                    "type": "string"
                },
                "sharedCredentialsFile": {
                    "description": "Path to the shared credentials file.",
                    "type": "string"
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 4
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                },
                "useMultipartEtag": {
                    "description": "Whether to use ETag in multipart uploads for verification",
                    "type": "string",
                    "default": "unset"
                },
                "usePresignedRequest": {
                    "description": "Whether to use a presigned request or PutObject for single part uploads",
                    "type": "boolean",
                    "default": false
                },
                "v2Auth": {
                    "description": "If true use v2 authentication.",
                    "type": "boolean",
                    "default": false
                },
                "versionAt": {
                    "description": "Show file versions as they were at the specified time.",
                    "type": "string",
                    "default": "off"
                },
                "versions": {
                    "description": "Include old versions in directory listings.",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "storage.S3HuaweiOBSConfig": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "description": "AWS Access Key ID.",
                    "type": "string"
                },
                "acl": {
                    "description": "Canned ACL used when creating buckets and storing or copying objects.",
                    "type": "string"
                },
                "bucketAcl": {
                    "description": "Canned ACL used when creating buckets.",
                    "type": "string",
                    "example": "private"
                },
                "chunkSize": {
                    "description": "Chunk size to use for uploading.",
                    "type": "string",
                    "default": "5Mi"
                },
                "copyCutoff": {
                    "description": "Cutoff for switching to multipart copy.",
                    "type": "string",
                    "default": "4.656Gi"
                },
                "decompress": {
                    "description": "If set this will decompress gzip encoded objects.",
                    "type": "boolean",
                    "default": false
                },
                "disableChecksum": {
                    "description": "Don't store MD5 checksum with object metadata.",
                    "type": "boolean",
                    "default": false
                },
                "disableHttp2": {
                    "description": "Disable usage of http2 for S3 backends.",
                    "type": "boolean",
                    "default": false
                },
                "downloadUrl": {
                    "description": "Custom endpoint for downloads.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for OBS API.",
                    "type": "string",
                    "example": "obs.af-south-1.myhuaweicloud.com"
                },
                "envAuth": {
                    "description": "Get AWS credentials from runtime (environment variables or EC2/ECS meta data if no env vars).",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "forcePathStyle": {
                    "description": "If true use path style access if false use virtual hosted style.",
                    "type": "boolean",
                    "default": true
                },
                "listChunk": {
                    "description": "Size of listing chunk (response list for each ListObject S3 request).",
                    "type": "integer",
                    "default": 1000
                },
                "listUrlEncode": {
                    "description": "Whether to url encode listings: true/false/unset",
                    "type": "string",
                    "default": "unset"
                },
                "listVersion": {
                    "description": "Version of ListObjects to use: 1,2 or 0 for auto.",
                    "type": "integer",
                    "default": 0
                },
                "maxUploadParts": {
                    "description": "Maximum number of parts in a multipart upload.",
                    "type": "integer",
                    "default": 10000
                },
                "memoryPoolFlushTime": {
                    "description": "How often internal memory buffer pools will be flushed.",
                    "type": "string",
                    "default": "1m0s"
                },
                "memoryPoolUseMmap": {
                    "description": "Whether to use mmap buffers in internal memory pool.",
                    "type": "boolean",
                    "default": false
                },
                "mightGzip": {
                    "description": "Set this if the backend might gzip objects.",
                    "type": "string",
                    "default": "unset"
                },
                "noCheckBucket": {
                    "description": "If set, don't attempt to check the bucket exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "noHead": {
                    "description": "If set, don't HEAD uploaded objects to check integrity.",
                    "type": "boolean",
                    "default": false
                },
                "noHeadObject": {
                    "description": "If set, do not do HEAD before GET when getting objects.",
                    "type": "boolean",
                    "default": false
                },
                "noSystemMetadata": {
                    "description": "Suppress setting and reading of system metadata",
                    "type": "boolean",
                    "default": false
                },
                "profile": {
                    "description": "Profile to use in the shared credentials file.",
                    "type": "string"
                },
                "region": {
                    "description": "Region to connect to. - the location where your bucket will be created and your data stored. Need bo be same with your endpoint.",
                    "type": "string",
                    "example": "af-south-1"
                },
                "secretAccessKey": {
                    "description": "AWS Secret Access Key (password).",
                    "type": "string"
                },
                "sessionToken": {
                    "description": "An AWS session token.",
                    "type": "string"
                },
                "sharedCredentialsFile": {
                    "description": "Path to the shared credentials file.",
                    "type": "string"
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 4
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                },
                "useMultipartEtag": {
                    "description": "Whether to use ETag in multipart uploads for verification",
                    "type": "string",
                    "default": "unset"
                },
                "usePresignedRequest": {
                    "description": "Whether to use a presigned request or PutObject for single part uploads",
                    "type": "boolean",
                    "default": false
                },
                "v2Auth": {
                    "description": "If true use v2 authentication.",
                    "type": "boolean",
                    "default": false
                },
                "versionAt": {
                    "description": "Show file versions as they were at the specified time.",
                    "type": "string",
                    "default": "off"
                },
                "versions": {
                    "description": "Include old versions in directory listings.",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "storage.S3IBMCOSConfig": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "description": "AWS Access Key ID.",
                    "type": "string"
                },
                "acl": {
                    "description": "Canned ACL used when creating buckets and storing or copying objects.",
                    "type": "string",
                    "example": "private"
                },
                "bucketAcl": {
                    "description": "Canned ACL used when creating buckets.",
                    "type": "string",
                    "example": "private"
                },
                "chunkSize": {
                    "description": "Chunk size to use for uploading.",
                    "type": "string",
                    "default": "5Mi"
                },
                "copyCutoff": {
                    "description": "Cutoff for switching to multipart copy.",
                    "type": "string",
                    "default": "4.656Gi"
                },
                "decompress": {
                    "description": "If set this will decompress gzip encoded objects.",
                    "type": "boolean",
                    "default": false
                },
                "disableChecksum": {
                    "description": "Don't store MD5 checksum with object metadata.",
                    "type": "boolean",
                    "default": false
                },
                "disableHttp2": {
                    "description": "Disable usage of http2 for S3 backends.",
                    "type": "boolean",
                    "default": false
                },
                "downloadUrl": {
                    "description": "Custom endpoint for downloads.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for IBM COS S3 API.",
                    "type": "string",
                    "example": "s3.us.cloud-object-storage.appdomain.cloud"
                },
                "envAuth": {
                    "description": "Get AWS credentials from runtime (environment variables or EC2/ECS meta data if no env vars).",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "forcePathStyle": {
                    "description": "If true use path style access if false use virtual hosted style.",
                    "type": "boolean",
                    "default": true
                },
                "listChunk": {
                    "description": "Size of listing chunk (response list for each ListObject S3 request).",
                    "type": "integer",
                    "default": 1000
                },
                "listUrlEncode": {
                    "description": "Whether to url encode listings: true/false/unset",
                    "type": "string",
                    "default": "unset"
                },
                "listVersion": {
                    "description": "Version of ListObjects to use: 1,2 or 0 for auto.",
                    "type": "integer",
                    "default": 0
                },
                "locationConstraint": {
                    "description": "Location constraint - must match endpoint when using IBM Cloud Public.",
                    "type": "string",
                    "example": "us-standard"
                },
                "maxUploadParts": {
                    "description": "Maximum number of parts in a multipart upload.",
                    "type": "integer",
                    "default": 10000
                },
                "memoryPoolFlushTime": {
                    "description": "How often internal memory buffer pools will be flushed.",
                    "type": "string",
                    "default": "1m0s"
                },
                "memoryPoolUseMmap": {
                    "description": "Whether to use mmap buffers in internal memory pool.",
                    "type": "boolean",
                    "default": false
                },
                "mightGzip": {
                    "description": "Set this if the backend might gzip objects.",
                    "type": "string",
                    "default": "unset"
                },
                "noCheckBucket": {
                    "description": "If set, don't attempt to check the bucket exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "noHead": {
                    "description": "If set, don't HEAD uploaded objects to check integrity.",
                    "type": "boolean",
                    "default": false
                },
                "noHeadObject": {
                    "description": "If set, do not do HEAD before GET when getting objects.",
                    "type": "boolean",
                    "default": false
                },
                "noSystemMetadata": {
                    "description": "Suppress setting and reading of system metadata",
                    "type": "boolean",
                    "default": false
                },
                "profile": {
                    "description": "Profile to use in the shared credentials file.",
                    "type": "string"
                },
                "region": {
                    "description": "Region to connect to.",
                    "type": "string",
                    "example": ""
                },
                "secretAccessKey": {
                    "description": "AWS Secret Access Key (password).",
                    "type": "string"
                },
                "sessionToken": {
                    "description": "An AWS session token.",
                    "type": "string"
                },
                "sharedCredentialsFile": {
                    "description": "Path to the shared credentials file.",
                    "type": "string"
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 4
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                },
                "useMultipartEtag": {
                    "description": "Whether to use ETag in multipart uploads for verification",
                    "type": "string",
                    "default": "unset"
                },
                "usePresignedRequest": {
                    "description": "Whether to use a presigned request or PutObject for single part uploads",
                    "type": "boolean",
                    "default": false
                },
                "v2Auth": {
                    "description": "If true use v2 authentication.",
                    "type": "boolean",
                    "default": false
                },
                "versionAt": {
                    "description": "Show file versions as they were at the specified time.",
                    "type": "string",
                    "default": "off"
                },
                "versions": {
                    "description": "Include old versions in directory listings.",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "storage.S3IDriveConfig": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "description": "AWS Access Key ID.",
                    "type": "string"
                },
                "acl": {
                    "description": "Canned ACL used when creating buckets and storing or copying objects.",
                    "type": "string"
                },
                "bucketAcl": {
                    "description": "Canned ACL used when creating buckets.",
                    "type": "string",
                    "example": "private"
                },
                "chunkSize": {
                    "description": "Chunk size to use for uploading.",
                    "type": "string",
                    "default": "5Mi"
                },
                "copyCutoff": {
                    "description": "Cutoff for switching to multipart copy.",
                    "type": "string",
                    "default": "4.656Gi"
                },
                "decompress": {
                    "description": "If set this will decompress gzip encoded objects.",
                    "type": "boolean",
                    "default": false
                },
                "disableChecksum": {
                    "description": "Don't store MD5 checksum with object metadata.",
                    "type": "boolean",
                    "default": false
                },
                "disableHttp2": {
                    "description": "Disable usage of http2 for S3 backends.",
                    "type": "boolean",
                    "default": false
                },
                "downloadUrl": {
                    "description": "Custom endpoint for downloads.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "envAuth": {
                    "description": "Get AWS credentials from runtime (environment variables or EC2/ECS meta data if no env vars).",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "forcePathStyle": {
                    "description": "If true use path style access if false use virtual hosted style.",
                    "type": "boolean",
                    "default": true
                },
                "listChunk": {
                    "description": "Size of listing chunk (response list for each ListObject S3 request).",
                    "type": "integer",
                    "default": 1000
                },
                "listUrlEncode": {
                    "description": "Whether to url encode listings: true/false/unset",
                    "type": "string",
                    "default": "unset"
                },
                "listVersion": {
                    "description": "Version of ListObjects to use: 1,2 or 0 for auto.",
                    "type": "integer",
                    "default": 0
                },
                "maxUploadParts": {
                    "description": "Maximum number of parts in a multipart upload.",
                    "type": "integer",
                    "default": 10000
                },
                "memoryPoolFlushTime": {
                    "description": "How often internal memory buffer pools will be flushed.",
                    "type": "string",
                    "default": "1m0s"
                },
                "memoryPoolUseMmap": {
                    "description": "Whether to use mmap buffers in internal memory pool.",
                    "type": "boolean",
                    "default": false
                },
                "mightGzip": {
                    "description": "Set this if the backend might gzip objects.",
                    "type": "string",
                    "default": "unset"
                },
                "noCheckBucket": {
                    "description": "If set, don't attempt to check the bucket exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "noHead": {
                    "description": "If set, don't HEAD uploaded objects to check integrity.",
                    "type": "boolean",
                    "default": false
                },
                "noHeadObject": {
                    "description": "If set, do not do HEAD before GET when getting objects.",
                    "type": "boolean",
                    "default": false
                },
                "noSystemMetadata": {
                    "description": "Suppress setting and reading of system metadata",
                    "type": "boolean",
                    "default": false
                },
                "profile": {
                    "description": "Profile to use in the shared credentials file.",
                    "type": "string"
                },
                "secretAccessKey": {
                    "description": "AWS Secret Access Key (password).",
                    "type": "string"
                },
                "sessionToken": {
                    "description": "An AWS session token.",
                    "type": "string"
                },
                "sharedCredentialsFile": {
                    "description": "Path to the shared credentials file.",
                    "type": "string"
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 4
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                },
                "useMultipartEtag": {
                    "description": "Whether to use ETag in multipart uploads for verification",
                    "type": "string",
                    "default": "unset"
                },
                "usePresignedRequest": {
                    "description": "Whether to use a presigned request or PutObject for single part uploads",
                    "type": "boolean",
                    "default": false
                },
                "v2Auth": {
                    "description": "If true use v2 authentication.",
                    "type": "boolean",
                    "default": false
                },
                "versionAt": {
                    "description": "Show file versions as they were at the specified time.",
                    "type": "string",
                    "default": "off"
                },
                "versions": {
                    "description": "Include old versions in directory listings.",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "storage.S3IONOSConfig": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "description": "AWS Access Key ID.",
                    "type": "string"
                },
                "acl": {
                    "description": "Canned ACL used when creating buckets and storing or copying objects.",
                    "type": "string"
                },
                "bucketAcl": {
                    "description": "Canned ACL used when creating buckets.",
                    "type": "string",
                    "example": "private"
                },
                "chunkSize": {
                    "description": "Chunk size to use for uploading.",
                    "type": "string",
                    "default": "5Mi"
                },
                "copyCutoff": {
                    "description": "Cutoff for switching to multipart copy.",
                    "type": "string",
                    "default": "4.656Gi"
                },
                "decompress": {
                    "description": "If set this will decompress gzip encoded objects.",
                    "type": "boolean",
                    "default": false
                },
                "disableChecksum": {
                    "description": "Don't store MD5 checksum with object metadata.",
                    "type": "boolean",
                    "default": false
                },
                "disableHttp2": {
                    "description": "Disable usage of http2 for S3 backends.",
                    "type": "boolean",
                    "default": false
                },
                "downloadUrl": {
                    "description": "Custom endpoint for downloads.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for IONOS S3 Object Storage.",
                    "type": "string",
                    "example": "s3-eu-central-1.ionoscloud.com"
                },
                "envAuth": {
                    "description": "Get AWS credentials from runtime (environment variables or EC2/ECS meta data if no env vars).",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "forcePathStyle": {
                    "description": "If true use path style access if false use virtual hosted style.",
                    "type": "boolean",
                    "default": true
                },
                "listChunk": {
                    "description": "Size of listing chunk (response list for each ListObject S3 request).",
                    "type": "integer",
                    "default": 1000
                },
                "listUrlEncode": {
                    "description": "Whether to url encode listings: true/false/unset",
                    "type": "string",
                    "default": "unset"
                },
                "listVersion": {
                    "description": "Version of ListObjects to use: 1,2 or 0 for auto.",
                    "type": "integer",
                    "default": 0
                },
                "maxUploadParts": {
                    "description": "Maximum number of parts in a multipart upload.",
                    "type": "integer",
                    "default": 10000
                },
                "memoryPoolFlushTime": {
                    "description": "How often internal memory buffer pools will be flushed.",
                    "type": "string",
                    "default": "1m0s"
                },
                "memoryPoolUseMmap": {
                    "description": "Whether to use mmap buffers in internal memory pool.",
                    "type": "boolean",
                    "default": false
                },
                "mightGzip": {
                    "description": "Set this if the backend might gzip objects.",
                    "type": "string",
                    "default": "unset"
                },
                "noCheckBucket": {
                    "description": "If set, don't attempt to check the bucket exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "noHead": {
                    "description": "If set, don't HEAD uploaded objects to check integrity.",
                    "type": "boolean",
                    "default": false
                },
                "noHeadObject": {
                    "description": "If set, do not do HEAD before GET when getting objects.",
                    "type": "boolean",
                    "default": false
                },
                "noSystemMetadata": {
                    "description": "Suppress setting and reading of system metadata",
                    "type": "boolean",
                    "default": false
                },
                "profile": {
                    "description": "Profile to use in the shared credentials file.",
                    "type": "string"
                },
                "region": {
                    "description": "Region where your bucket will be created and your data stored.",
                    "type": "string",
                    "example": "de"
                },
                "secretAccessKey": {
                    "description": "AWS Secret Access Key (password).",
                    "type": "string"
                },
                "sessionToken": {
                    "description": "An AWS session token.",
                    "type": "string"
                },
                "sharedCredentialsFile": {
                    "description": "Path to the shared credentials file.",
                    "type": "string"
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 4
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                },
                "useMultipartEtag": {
                    "description": "Whether to use ETag in multipart uploads for verification",
                    "type": "string",
                    "default": "unset"
                },
                "usePresignedRequest": {
                    "description": "Whether to use a presigned request or PutObject for single part uploads",
                    "type": "boolean",
                    "default": false
                },
                "v2Auth": {
                    "description": "If true use v2 authentication.",
                    "type": "boolean",
                    "default": false
                },
                "versionAt": {
                    "description": "Show file versions as they were at the specified time.",
                    "type": "string",
                    "default": "off"
                },
                "versions": {
                    "description": "Include old versions in directory listings.",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "storage.S3LiaraConfig": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "description": "AWS Access Key ID.",
                    "type": "string"
                },
                "acl": {
                    "description": "Canned ACL used when creating buckets and storing or copying objects.",
                    "type": "string"
                },
                "bucketAcl": {
                    "description": "Canned ACL used when creating buckets.",
                    "type": "string",
                    "example": "private"
                },
                "chunkSize": {
                    "description": "Chunk size to use for uploading.",
                    "type": "string",
                    "default": "5Mi"
                },
                "copyCutoff": {
                    "description": "Cutoff for switching to multipart copy.",
                    "type": "string",
                    "default": "4.656Gi"
                },
                "decompress": {
                    "description": "If set this will decompress gzip encoded objects.",
                    "type": "boolean",
                    "default": false
                },
                "disableChecksum": {
                    "description": "Don't store MD5 checksum with object metadata.",
                    "type": "boolean",
                    "default": false
                },
                "disableHttp2": {
                    "description": "Disable usage of http2 for S3 backends.",
                    "type": "boolean",
                    "default": false
                },
                "downloadUrl": {
                    "description": "Custom endpoint for downloads.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for Liara Object Storage API.",
                    "type": "string",
                    "example": "storage.iran.liara.space"
                },
                "envAuth": {
                    "description": "Get AWS credentials from runtime (environment variables or EC2/ECS meta data if no env vars).",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "forcePathStyle": {
                    "description": "If true use path style access if false use virtual hosted style.",
                    "type": "boolean",
                    "default": true
                },
                "listChunk": {
                    "description": "Size of listing chunk (response list for each ListObject S3 request).",
                    "type": "integer",
                    "default": 1000
                },
                "listUrlEncode": {
                    "description": "Whether to url encode listings: true/false/unset",
                    "type": "string",
                    "default": "unset"
                },
                "listVersion": {
                    "description": "Version of ListObjects to use: 1,2 or 0 for auto.",
                    "type": "integer",
                    "default": 0
                },
                "maxUploadParts": {
                    "description": "Maximum number of parts in a multipart upload.",
                    "type": "integer",
                    "default": 10000
                },
                "memoryPoolFlushTime": {
                    "description": "How often internal memory buffer pools will be flushed.",
                    "type": "string",
                    "default": "1m0s"
                },
                "memoryPoolUseMmap": {
                    "description": "Whether to use mmap buffers in internal memory pool.",
                    "type": "boolean",
                    "default": false
                },
                "mightGzip": {
                    "description": "Set this if the backend might gzip objects.",
                    "type": "string",
                    "default": "unset"
                },
                "noCheckBucket": {
                    "description": "If set, don't attempt to check the bucket exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "noHead": {
                    "description": "If set, don't HEAD uploaded objects to check integrity.",
                    "type": "boolean",
                    "default": false
                },
                "noHeadObject": {
                    "description": "If set, do not do HEAD before GET when getting objects.",
                    "type": "boolean",
                    "default": false
                },
                "noSystemMetadata": {
                    "description": "Suppress setting and reading of system metadata",
                    "type": "boolean",
                    "default": false
                },
                "profile": {
                    "description": "Profile to use in the shared credentials file.",
                    "type": "string"
                },
                "secretAccessKey": {
                    "description": "AWS Secret Access Key (password).",
                    "type": "string"
                },
                "sessionToken": {
                    "description": "An AWS session token.",
                    "type": "string"
                },
                "sharedCredentialsFile": {
                    "description": "Path to the shared credentials file.",
                    "type": "string"
                },
                "storageClass": {
                    "description": "The storage class to use when storing new objects in Liara",
                    "type": "string",
                    "example": "STANDARD"
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 4
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                },
                "useMultipartEtag": {
                    "description": "Whether to use ETag in multipart uploads for verification",
                    "type": "string",
                    "default": "unset"
                },
                "usePresignedRequest": {
                    "description": "Whether to use a presigned request or PutObject for single part uploads",
                    "type": "boolean",
                    "default": false
                },
                "v2Auth": {
                    "description": "If true use v2 authentication.",
                    "type": "boolean",
                    "default": false
                },
                "versionAt": {
                    "description": "Show file versions as they were at the specified time.",
                    "type": "string",
                    "default": "off"
                },
                "versions": {
                    "description": "Include old versions in directory listings.",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "storage.S3LyveCloudConfig": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "description": "AWS Access Key ID.",
                    "type": "string"
                },
                "acl": {
                    "description": "Canned ACL used when creating buckets and storing or copying objects.",
                    "type": "string"
                },
                "bucketAcl": {
                    "description": "Canned ACL used when creating buckets.",
                    "type": "string",
                    "example": "private"
                },
                "chunkSize": {
                    "description": "Chunk size to use for uploading.",
                    "type": "string",
                    "default": "5Mi"
                },
                "copyCutoff": {
                    "description": "Cutoff for switching to multipart copy.",
                    "type": "string",
                    "default": "4.656Gi"
                },
                "decompress": {
                    "description": "If set this will decompress gzip encoded objects.",
                    "type": "boolean",
                    "default": false
                },
                "disableChecksum": {
                    "description": "Don't store MD5 checksum with object metadata.",
                    "type": "boolean",
                    "default": false
                },
                "disableHttp2": {
                    "description": "Disable usage of http2 for S3 backends.",
                    "type": "boolean",
                    "default": false
                },
                "downloadUrl": {
                    "description": "Custom endpoint for downloads.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for S3 API.",
                    "type": "string",
                    "example": "s3.us-east-1.lyvecloud.seagate.com"
                },
                "envAuth": {
                    "description": "Get AWS credentials from runtime (environment variables or EC2/ECS meta data if no env vars).",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "forcePathStyle": {
                    "description": "If true use path style access if false use virtual hosted style.",
                    "type": "boolean",
                    "default": true
                },
                "listChunk": {
                    "description": "Size of listing chunk (response list for each ListObject S3 request).",
                    "type": "integer",
                    "default": 1000
                },
                "listUrlEncode": {
                    "description": "Whether to url encode listings: true/false/unset",
                    "type": "string",
                    "default": "unset"
                },
                "listVersion": {
                    "description": "Version of ListObjects to use: 1,2 or 0 for auto.",
                    "type": "integer",
                    "default": 0
                },
                "locationConstraint": {
                    "description": "Location constraint - must be set to match the Region.",
                    "type": "string"
                },
                "maxUploadParts": {
                    "description": "Maximum number of parts in a multipart upload.",
                    "type": "integer",
                    "default": 10000
                },
                "memoryPoolFlushTime": {
                    "description": "How often internal memory buffer pools will be flushed.",
                    "type": "string",
                    "default": "1m0s"
                },
                "memoryPoolUseMmap": {
                    "description": "Whether to use mmap buffers in internal memory pool.",
                    "type": "boolean",
                    "default": false
                },
                "mightGzip": {
                    "description": "Set this if the backend might gzip objects.",
                    "type": "string",
                    "default": "unset"
                },
                "noCheckBucket": {
                    "description": "If set, don't attempt to check the bucket exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "noHead": {
                    "description": "If set, don't HEAD uploaded objects to check integrity.",
                    "type": "boolean",
                    "default": false
                },
                "noHeadObject": {
                    "description": "If set, do not do HEAD before GET when getting objects.",
                    "type": "boolean",
                    "default": false
                },
                "noSystemMetadata": {
                    "description": "Suppress setting and reading of system metadata",
                    "type": "boolean",
                    "default": false
                },
                "profile": {
                    "description": "Profile to use in the shared credentials file.",
                    "type": "string"
                },
                "region": {
                    "description": "Region to connect to.",
                    "type": "string",
                    "example": ""
                },
                "secretAccessKey": {
                    "description": "AWS Secret Access Key (password).",
                    "type": "string"
                },
                "sessionToken": {
                    "description": "An AWS session token.",
                    "type": "string"
                },
                "sharedCredentialsFile": {
                    "description": "Path to the shared credentials file.",
                    "type": "string"
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 4
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                },
                "useMultipartEtag": {
                    "description": "Whether to use ETag in multipart uploads for verification",
                    "type": "string",
                    "default": "unset"
                },
                "usePresignedRequest": {
                    "description": "Whether to use a presigned request or PutObject for single part uploads",
                    "type": "boolean",
                    "default": false
                },
                "v2Auth": {
                    "description": "If true use v2 authentication.",
                    "type": "boolean",
                    "default": false
                },
                "versionAt": {
                    "description": "Show file versions as they were at the specified time.",
                    "type": "string",
                    "default": "off"
                },
                "versions": {
                    "description": "Include old versions in directory listings.",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "storage.S3MinioConfig": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "description": "AWS Access Key ID.",
                    "type": "string"
                },
                "acl": {
                    "description": "Canned ACL used when creating buckets and storing or copying objects.",
                    "type": "string"
                },
                "bucketAcl": {
                    "description": "Canned ACL used when creating buckets.",
                    "type": "string",
                    "example": "private"
                },
                "chunkSize": {
                    "description": "Chunk size to use for uploading.",
                    "type": "string",
                    "default": "5Mi"
                },
                "copyCutoff": {
                    "description": "Cutoff for switching to multipart copy.",
                    "type": "string",
                    "default": "4.656Gi"
                },
                "decompress": {
                    "description": "If set this will decompress gzip encoded objects.",
                    "type": "boolean",
                    "default": false
                },
                "disableChecksum": {
                    "description": "Don't store MD5 checksum with object metadata.",
                    "type": "boolean",
                    "default": false
                },
                "disableHttp2": {
                    "description": "Disable usage of http2 for S3 backends.",
                    "type": "boolean",
                    "default": false
                },
                "downloadUrl": {
                    "description": "Custom endpoint for downloads.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for S3 API.",
                    "type": "string"
                },
                "envAuth": {
                    "description": "Get AWS credentials from runtime (environment variables or EC2/ECS meta data if no env vars).",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "forcePathStyle": {
                    "description": "If true use path style access if false use virtual hosted style.",
                    "type": "boolean",
                    "default": true
                },
                "listChunk": {
                    "description": "Size of listing chunk (response list for each ListObject S3 request).",
                    "type": "integer",
                    "default": 1000
                },
                "listUrlEncode": {
                    "description": "Whether to url encode listings: true/false/unset",
                    "type": "string",
                    "default": "unset"
                },
                "listVersion": {
                    "description": "Version of ListObjects to use: 1,2 or 0 for auto.",
                    "type": "integer",
                    "default": 0
                },
                "locationConstraint": {
                    "description": "Location constraint - must be set to match the Region.",
                    "type": "string"
                },
                "maxUploadParts": {
                    "description": "Maximum number of parts in a multipart upload.",
                    "type": "integer",
                    "default": 10000
                },
                "memoryPoolFlushTime": {
                    "description": "How often internal memory buffer pools will be flushed.",
                    "type": "string",
                    "default": "1m0s"
                },
                "memoryPoolUseMmap": {
                    "description": "Whether to use mmap buffers in internal memory pool.",
                    "type": "boolean",
                    "default": false
                },
                "mightGzip": {
                    "description": "Set this if the backend might gzip objects.",
                    "type": "string",
                    "default": "unset"
                },
                "noCheckBucket": {
                    "description": "If set, don't attempt to check the bucket exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "noHead": {
                    "description": "If set, don't HEAD uploaded objects to check integrity.",
                    "type": "boolean",
                    "default": false
                },
                "noHeadObject": {
                    "description": "If set, do not do HEAD before GET when getting objects.",
                    "type": "boolean",
                    "default": false
                },
                "noSystemMetadata": {
                    "description": "Suppress setting and reading of system metadata",
                    "type": "boolean",
                    "default": false
                },
                "profile": {
                    "description": "Profile to use in the shared credentials file.",
                    "type": "string"
                },
                "region": {
                    "description": "Region to connect to.",
                    "type": "string",
                    "example": ""
                },
                "secretAccessKey": {
                    "description": "AWS Secret Access Key (password).",
                    "type": "string"
                },
                "serverSideEncryption": {
                    "description": "The server-side encryption algorithm used when storing this object in S3.",
                    "type": "string",
                    "example": ""
                },
                "sessionToken": {
                    "description": "An AWS session token.",
                    "type": "string"
                },
                "sharedCredentialsFile": {
                    "description": "Path to the shared credentials file.",
                    "type": "string"
                },
                "sseCustomerAlgorithm": {
                    "description": "If using SSE-C, the server-side encryption algorithm used when storing this object in S3.",
                    "type": "string",
                    "example": ""
                },
                "sseCustomerKey": {
                    "description": "To use SSE-C you may provide the secret encryption key used to encrypt/decrypt your data.",
                    "type": "string",
                    "example": ""
                },
                "sseCustomerKeyBase64": {
                    "description": "If using SSE-C you must provide the secret encryption key encoded in base64 format to encrypt/decrypt your data.",
                    "type": "string",
                    "example": ""
                },
                "sseCustomerKeyMd5": {
                    "description": "If using SSE-C you may provide the secret encryption key MD5 checksum (optional).",
                    "type": "string",
                    "example": ""
                },
                "sseKmsKeyId": {
                    "description": "If using KMS ID you must provide the ARN of Key.",
                    "type": "string",
                    "example": ""
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 4
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                },
                "useMultipartEtag": {
                    "description": "Whether to use ETag in multipart uploads for verification",
                    "type": "string",
                    "default": "unset"
                },
                "usePresignedRequest": {
                    "description": "Whether to use a presigned request or PutObject for single part uploads",
                    "type": "boolean",
                    "default": false
                },
                "v2Auth": {
                    "description": "If true use v2 authentication.",
                    "type": "boolean",
                    "default": false
                },
                "versionAt": {
                    "description": "Show file versions as they were at the specified time.",
                    "type": "string",
                    "default": "off"
                },
                "versions": {
                    "description": "Include old versions in directory listings.",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "storage.S3NeteaseConfig": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "description": "AWS Access Key ID.",
                    "type": "string"
                },
                "acl": {
                    "description": "Canned ACL used when creating buckets and storing or copying objects.",
                    "type": "string"
                },
                "bucketAcl": {
                    "description": "Canned ACL used when creating buckets.",
                    "type": "string",
                    "example": "private"
                },
                "chunkSize": {
                    "description": "Chunk size to use for uploading.",
                    "type": "string",
                    "default": "5Mi"
                },
                "copyCutoff": {
                    "description": "Cutoff for switching to multipart copy.",
                    "type": "string",
                    "default": "4.656Gi"
                },
                "decompress": {
                    "description": "If set this will decompress gzip encoded objects.",
                    "type": "boolean",
                    "default": false
                },
                "disableChecksum": {
                    "description": "Don't store MD5 checksum with object metadata.",
                    "type": "boolean",
                    "default": false
                },
                "disableHttp2": {
                    "description": "Disable usage of http2 for S3 backends.",
                    "type": "boolean",
                    "default": false
                },
                "downloadUrl": {
                    "description": "Custom endpoint for downloads.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for S3 API.",
                    "type": "string"
                },
                "envAuth": {
                    "description": "Get AWS credentials from runtime (environment variables or EC2/ECS meta data if no env vars).",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "forcePathStyle": {
                    "description": "If true use path style access if false use virtual hosted style.",
                    "type": "boolean",
                    "default": true
                },
                "listChunk": {
                    "description": "Size of listing chunk (response list for each ListObject S3 request).",
                    "type": "integer",
                    "default": 1000
                },
                "listUrlEncode": {
                    "description": "Whether to url encode listings: true/false/unset",
                    "type": "string",
                    "default": "unset"
                },
                "listVersion": {
                    "description": "Version of ListObjects to use: 1,2 or 0 for auto.",
                    "type": "integer",
                    "default": 0
                },
                "locationConstraint": {
                    "description": "Location constraint - must be set to match the Region.",
                    "type": "string"
                },
                "maxUploadParts": {
                    "description": "Maximum number of parts in a multipart upload.",
                    "type": "integer",
                    "default": 10000
                },
                "memoryPoolFlushTime": {
                    "description": "How often internal memory buffer pools will be flushed.",
                    "type": "string",
                    "default": "1m0s"
                },
                "memoryPoolUseMmap": {
                    "description": "Whether to use mmap buffers in internal memory pool.",
                    "type": "boolean",
                    "default": false
                },
                "mightGzip": {
                    "description": "Set this if the backend might gzip objects.",
                    "type": "string",
                    "default": "unset"
                },
                "noCheckBucket": {
                    "description": "If set, don't attempt to check the bucket exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "noHead": {
                    "description": "If set, don't HEAD uploaded objects to check integrity.",
                    "type": "boolean",
                    "default": false
                },
                "noHeadObject": {
                    "description": "If set, do not do HEAD before GET when getting objects.",
                    "type": "boolean",
                    "default": false
                },
                "noSystemMetadata": {
                    "description": "Suppress setting and reading of system metadata",
                    "type": "boolean",
                    "default": false
                },
                "profile": {
                    "description": "Profile to use in the shared credentials file.",
                    "type": "string"
                },
                "region": {
                    "description": "Region to connect to.",
                    "type": "string",
                    "example": ""
                },
                "secretAccessKey": {
                    "description": "AWS Secret Access Key (password).",
                    "type": "string"
                },
                "sessionToken": {
                    "description": "An AWS session token.",
                    "type": "string"
                },
                "sharedCredentialsFile": {
                    "description": "Path to the shared credentials file.",
                    "type": "string"
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 4
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                },
                "useMultipartEtag": {
                    "description": "Whether to use ETag in multipart uploads for verification",
                    "type": "string",
                    "default": "unset"
                },
                "usePresignedRequest": {
                    "description": "Whether to use a presigned request or PutObject for single part uploads",
                    "type": "boolean",
                    "default": false
                },
                "v2Auth": {
                    "description": "If true use v2 authentication.",
                    "type": "boolean",
                    "default": false
                },
                "versionAt": {
                    "description": "Show file versions as they were at the specified time.",
                    "type": "string",
                    "default": "off"
                },
                "versions": {
                    "description": "Include old versions in directory listings.",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "storage.S3OtherConfig": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "description": "AWS Access Key ID.",
                    "type": "string"
                },
                "acl": {
                    "description": "Canned ACL used when creating buckets and storing or copying objects.",
                    "type": "string"
                },
                "bucketAcl": {
                    "description": "Canned ACL used when creating buckets.",
                    "type": "string",
                    "example": "private"
                },
                "chunkSize": {
                    "description": "Chunk size to use for uploading.",
                    "type": "string",
                    "default": "5Mi"
                },
                "copyCutoff": {
                    "description": "Cutoff for switching to multipart copy.",
                    "type": "string",
                    "default": "4.656Gi"
                },
                "decompress": {
                    "description": "If set this will decompress gzip encoded objects.",
                    "type": "boolean",
                    "default": false
                },
                "disableChecksum": {
                    "description": "Don't store MD5 checksum with object metadata.",
                    "type": "boolean",
                    "default": false
                },
                "disableHttp2": {
                    "description": "Disable usage of http2 for S3 backends.",
                    "type": "boolean",
                    "default": false
                },
                "downloadUrl": {
                    "description": "Custom endpoint for downloads.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for S3 API.",
                    "type": "string"
                },
                "envAuth": {
                    "description": "Get AWS credentials from runtime (environment variables or EC2/ECS meta data if no env vars).",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "forcePathStyle": {
                    "description": "If true use path style access if false use virtual hosted style.",
                    "type": "boolean",
                    "default": true
                },
                "listChunk": {
                    "description": "Size of listing chunk (response list for each ListObject S3 request).",
                    "type": "integer",
                    "default": 1000
                },
                "listUrlEncode": {
                    "description": "Whether to url encode listings: true/false/unset",
                    "type": "string",
                    "default": "unset"
                },
                "listVersion": {
                    "description": "Version of ListObjects to use: 1,2 or 0 for auto.",
                    "type": "integer",
                    "default": 0
                },
                "locationConstraint": {
                    "description": "Location constraint - must be set to match the Region.",
                    "type": "string"
                },
                "maxUploadParts": {
                    "description": "Maximum number of parts in a multipart upload.",
                    "type": "integer",
                    "default": 10000
                },
                "memoryPoolFlushTime": {
                    "description": "How often internal memory buffer pools will be flushed.",
                    "type": "string",
                    "default": "1m0s"
                },
                "memoryPoolUseMmap": {
                    "description": "Whether to use mmap buffers in internal memory pool.",
                    "type": "boolean",
                    "default": false
                },
                "mightGzip": {
                    "description": "Set this if the backend might gzip objects.",
                    "type": "string",
                    "default": "unset"
                },
                "noCheckBucket": {
                    "description": "If set, don't attempt to check the bucket exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "noHead": {
                    "description": "If set, don't HEAD uploaded objects to check integrity.",
                    "type": "boolean",
                    "default": false
                },
                "noHeadObject": {
                    "description": "If set, do not do HEAD before GET when getting objects.",
                    "type": "boolean",
                    "default": false
                },
                "noSystemMetadata": {
                    "description": "Suppress setting and reading of system metadata",
                    "type": "boolean",
                    "default": false
                },
                "profile": {
                    "description": "Profile to use in the shared credentials file.",
                    "type": "string"
                },
                "region": {
                    "description": "Region to connect to.",
                    "type": "string",
                    "example": ""
                },
                "secretAccessKey": {
                    "description": "AWS Secret Access Key (password).",
                    "type": "string"
                },
                "sessionToken": {
                    "description": "An AWS session token.",
                    "type": "string"
                },
                "sharedCredentialsFile": {
                    "description": "Path to the shared credentials file.",
                    "type": "string"
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 4
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                },
                "useMultipartEtag": {
                    "description": "Whether to use ETag in multipart uploads for verification",
                    "type": "string",
                    "default": "unset"
                },
                "usePresignedRequest": {
                    "description": "Whether to use a presigned request or PutObject for single part uploads",
                    "type": "boolean",
                    "default": false
                },
                "v2Auth": {
                    "description": "If true use v2 authentication.",
                    "type": "boolean",
                    "default": false
                },
                "versionAt": {
                    "description": "Show file versions as they were at the specified time.",
                    "type": "string",
                    "default": "off"
                },
                "versions": {
                    "description": "Include old versions in directory listings.",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "storage.S3QiniuConfig": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "description": "AWS Access Key ID.",
                    "type": "string"
                },
                "acl": {
                    "description": "Canned ACL used when creating buckets and storing or copying objects.",
                    "type": "string"
                },
                "bucketAcl": {
                    "description": "Canned ACL used when creating buckets.",
                    "type": "string",
                    "example": "private"
                },
                "chunkSize": {
                    "description": "Chunk size to use for uploading.",
                    "type": "string",
                    "default": "5Mi"
                },
                "copyCutoff": {
                    "description": "Cutoff for switching to multipart copy.",
                    "type": "string",
                    "default": "4.656Gi"
                },
                "decompress": {
                    "description": "If set this will decompress gzip encoded objects.",
                    "type": "boolean",
                    "default": false
                },
                "disableChecksum": {
                    "description": "Don't store MD5 checksum with object metadata.",
                    "type": "boolean",
                    "default": false
                },
                "disableHttp2": {
                    "description": "Disable usage of http2 for S3 backends.",
                    "type": "boolean",
                    "default": false
                },
                "downloadUrl": {
                    "description": "Custom endpoint for downloads.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for Qiniu Object Storage.",
                    "type": "string",
                    "example": "s3-cn-east-1.qiniucs.com"
                },
                "envAuth": {
                    "description": "Get AWS credentials from runtime (environment variables or EC2/ECS meta data if no env vars).",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "forcePathStyle": {
                    "description": "If true use path style access if false use virtual hosted style.",
                    "type": "boolean",
                    "default": true
                },
                "listChunk": {
                    "description": "Size of listing chunk (response list for each ListObject S3 request).",
                    "type": "integer",
                    "default": 1000
                },
                "listUrlEncode": {
                    "description": "Whether to url encode listings: true/false/unset",
                    "type": "string",
                    "default": "unset"
                },
                "listVersion": {
                    "description": "Version of ListObjects to use: 1,2 or 0 for auto.",
                    "type": "integer",
                    "default": 0
                },
                "locationConstraint": {
                    "description": "Location constraint - must be set to match the Region.",
                    "type": "string",
                    "example": "cn-east-1"
                },
                "maxUploadParts": {
                    "description": "Maximum number of parts in a multipart upload.",
                    "type": "integer",
                    "default": 10000
                },
                "memoryPoolFlushTime": {
                    "description": "How often internal memory buffer pools will be flushed.",
                    "type": "string",
                    "default": "1m0s"
                },
                "memoryPoolUseMmap": {
                    "description": "Whether to use mmap buffers in internal memory pool.",
                    "type": "boolean",
                    "default": false
                },
                "mightGzip": {
                    "description": "Set this if the backend might gzip objects.",
                    "type": "string",
                    "default": "unset"
                },
                "noCheckBucket": {
                    "description": "If set, don't attempt to check the bucket exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "noHead": {
                    "description": "If set, don't HEAD uploaded objects to check integrity.",
                    "type": "boolean",
                    "default": false
                },
                "noHeadObject": {
                    "description": "If set, do not do HEAD before GET when getting objects.",
                    "type": "boolean",
                    "default": false
                },
                "noSystemMetadata": {
                    "description": "Suppress setting and reading of system metadata",
                    "type": "boolean",
                    "default": false
                },
                "profile": {
                    "description": "Profile to use in the shared credentials file.",
                    "type": "string"
                },
                "region": {
                    "description": "Region to connect to.",
                    "type": "string",
                    "example": "cn-east-1"
                },
                "secretAccessKey": {
                    "description": "AWS Secret Access Key (password).",
                    "type": "string"
                },
                "sessionToken": {
                    "description": "An AWS session token.",
                    "type": "string"
                },
                "sharedCredentialsFile": {
                    "description": "Path to the shared credentials file.",
                    "type": "string"
                },
                "storageClass": {
                    "description": "The storage class to use when storing new objects in Qiniu.",
                    "type": "string",
                    "example": "STANDARD"
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 4
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                },
                "useMultipartEtag": {
                    "description": "Whether to use ETag in multipart uploads for verification",
                    "type": "string",
                    "default": "unset"
                },
                "usePresignedRequest": {
                    "description": "Whether to use a presigned request or PutObject for single part uploads",
                    "type": "boolean",
                    "default": false
                },
                "v2Auth": {
                    "description": "If true use v2 authentication.",
                    "type": "boolean",
                    "default": false
                },
                "versionAt": {
                    "description": "Show file versions as they were at the specified time.",
                    "type": "string",
                    "default": "off"
                },
                "versions": {
                    "description": "Include old versions in directory listings.",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "storage.S3RackCorpConfig": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "description": "AWS Access Key ID.",
                    "type": "string"
                },
                "acl": {
                    "description": "Canned ACL used when creating buckets and storing or copying objects.",
                    "type": "string"
                },
                "bucketAcl": {
                    "description": "Canned ACL used when creating buckets.",
                    "type": "string",
                    "example": "private"
                },
                "chunkSize": {
                    "description": "Chunk size to use for uploading.",
                    "type": "string",
                    "default": "5Mi"
                },
                "copyCutoff": {
                    "description": "Cutoff for switching to multipart copy.",
                    "type": "string",
                    "default": "4.656Gi"
                },
                "decompress": {
                    "description": "If set this will decompress gzip encoded objects.",
                    "type": "boolean",
                    "default": false
                },
                "disableChecksum": {
                    "description": "Don't store MD5 checksum with object metadata.",
                    "type": "boolean",
                    "default": false
                },
                "disableHttp2": {
                    "description": "Disable usage of http2 for S3 backends.",
                    "type": "boolean",
                    "default": false
                },
                "downloadUrl": {
                    "description": "Custom endpoint for downloads.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for RackCorp Object Storage.",
                    "type": "string",
                    "example": "s3.rackcorp.com"
                },
                "envAuth": {
                    "description": "Get AWS credentials from runtime (environment variables or EC2/ECS meta data if no env vars).",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "forcePathStyle": {
                    "description": "If true use path style access if false use virtual hosted style.",
                    "type": "boolean",
                    "default": true
                },
                "listChunk": {
                    "description": "Size of listing chunk (response list for each ListObject S3 request).",
                    "type": "integer",
                    "default": 1000
                },
                "listUrlEncode": {
                    "description": "Whether to url encode listings: true/false/unset",
                    "type": "string",
                    "default": "unset"
                },
                "listVersion": {
                    "description": "Version of ListObjects to use: 1,2 or 0 for auto.",
                    "type": "integer",
                    "default": 0
                },
                "locationConstraint": {
                    "description": "Location constraint - the location where your bucket will be located and your data stored.",
                    "type": "string",
                    "example": "global"
                },
                "maxUploadParts": {
                    "description": "Maximum number of parts in a multipart upload.",
                    "type": "integer",
                    "default": 10000
                },
                "memoryPoolFlushTime": {
                    "description": "How often internal memory buffer pools will be flushed.",
                    "type": "string",
                    "default": "1m0s"
                },
                "memoryPoolUseMmap": {
                    "description": "Whether to use mmap buffers in internal memory pool.",
                    "type": "boolean",
                    "default": false
                },
                "mightGzip": {
                    "description": "Set this if the backend might gzip objects.",
                    "type": "string",
                    "default": "unset"
                },
                "noCheckBucket": {
                    "description": "If set, don't attempt to check the bucket exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "noHead": {
                    "description": "If set, don't HEAD uploaded objects to check integrity.",
                    "type": "boolean",
                    "default": false
                },
                "noHeadObject": {
                    "description": "If set, do not do HEAD before GET when getting objects.",
                    "type": "boolean",
                    "default": false
                },
                "noSystemMetadata": {
                    "description": "Suppress setting and reading of system metadata",
                    "type": "boolean",
                    "default": false
                },
                "profile": {
                    "description": "Profile to use in the shared credentials file.",
                    "type": "string"
                },
                "region": {
                    "description": "region - the location where your bucket will be created and your data stored.",
                    "type": "string",
                    "example": "global"
                },
                "secretAccessKey": {
                    "description": "AWS Secret Access Key (password).",
                    "type": "string"
                },
                "sessionToken": {
                    "description": "An AWS session token.",
                    "type": "string"
                },
                "sharedCredentialsFile": {
                    "description": "Path to the shared credentials file.",
                    "type": "string"
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 4
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                },
                "useMultipartEtag": {
                    "description": "Whether to use ETag in multipart uploads for verification",
                    "type": "string",
                    "default": "unset"
                },
                "usePresignedRequest": {
                    "description": "Whether to use a presigned request or PutObject for single part uploads",
                    "type": "boolean",
                    "default": false
                },
                "v2Auth": {
                    "description": "If true use v2 authentication.",
                    "type": "boolean",
                    "default": false
                },
                "versionAt": {
                    "description": "Show file versions as they were at the specified time.",
                    "type": "string",
                    "default": "off"
                },
                "versions": {
                    "description": "Include old versions in directory listings.",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "storage.S3ScalewayConfig": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "description": "AWS Access Key ID.",
                    "type": "string"
                },
                "acl": {
                    "description": "Canned ACL used when creating buckets and storing or copying objects.",
                    "type": "string"
                },
                "bucketAcl": {
                    "description": "Canned ACL used when creating buckets.",
                    "type": "string",
                    "example": "private"
                },
                "chunkSize": {
                    "description": "Chunk size to use for uploading.",
                    "type": "string",
                    "default": "5Mi"
                },
                "copyCutoff": {
                    "description": "Cutoff for switching to multipart copy.",
                    "type": "string",
                    "default": "4.656Gi"
                },
                "decompress": {
                    "description": "If set this will decompress gzip encoded objects.",
                    "type": "boolean",
                    "default": false
                },
                "disableChecksum": {
                    "description": "Don't store MD5 checksum with object metadata.",
                    "type": "boolean",
                    "default": false
                },
                "disableHttp2": {
                    "description": "Disable usage of http2 for S3 backends.",
                    "type": "boolean",
                    "default": false
                },
                "downloadUrl": {
                    "description": "Custom endpoint for downloads.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for Scaleway Object Storage.",
                    "type": "string",
                    "example": "s3.nl-ams.scw.cloud"
                },
                "envAuth": {
                    "description": "Get AWS credentials from runtime (environment variables or EC2/ECS meta data if no env vars).",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "forcePathStyle": {
                    "description": "If true use path style access if false use virtual hosted style.",
                    "type": "boolean",
                    "default": true
                },
                "listChunk": {
                    "description": "Size of listing chunk (response list for each ListObject S3 request).",
                    "type": "integer",
                    "default": 1000
                },
                "listUrlEncode": {
                    "description": "Whether to url encode listings: true/false/unset",
                    "type": "string",
                    "default": "unset"
                },
                "listVersion": {
                    "description": "Version of ListObjects to use: 1,2 or 0 for auto.",
                    "type": "integer",
                    "default": 0
                },
                "maxUploadParts": {
                    "description": "Maximum number of parts in a multipart upload.",
                    "type": "integer",
                    "default": 10000
                },
                "memoryPoolFlushTime": {
                    "description": "How often internal memory buffer pools will be flushed.",
                    "type": "string",
                    "default": "1m0s"
                },
                "memoryPoolUseMmap": {
                    "description": "Whether to use mmap buffers in internal memory pool.",
                    "type": "boolean",
                    "default": false
                },
                "mightGzip": {
                    "description": "Set this if the backend might gzip objects.",
                    "type": "string",
                    "default": "unset"
                },
                "noCheckBucket": {
                    "description": "If set, don't attempt to check the bucket exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "noHead": {
                    "description": "If set, don't HEAD uploaded objects to check integrity.",
                    "type": "boolean",
                    "default": false
                },
                "noHeadObject": {
                    "description": "If set, do not do HEAD before GET when getting objects.",
                    "type": "boolean",
                    "default": false
                },
                "noSystemMetadata": {
                    "description": "Suppress setting and reading of system metadata",
                    "type": "boolean",
                    "default": false
                },
                "profile": {
                    "description": "Profile to use in the shared credentials file.",
                    "type": "string"
                },
                "region": {
                    "description": "Region to connect to.",
                    "type": "string",
                    "example": "nl-ams"
                },
                "secretAccessKey": {
                    "description": "AWS Secret Access Key (password).",
                    "type": "string"
                },
                "sessionToken": {
                    "description": "An AWS session token.",
                    "type": "string"
                },
                "sharedCredentialsFile": {
                    "description": "Path to the shared credentials file.",
                    "type": "string"
                },
                "storageClass": {
                    "description": "The storage class to use when storing new objects in S3.",
                    "type": "string",
                    "example": ""
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 4
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                },
                "useMultipartEtag": {
                    "description": "Whether to use ETag in multipart uploads for verification",
                    "type": "string",
                    "default": "unset"
                },
                "usePresignedRequest": {
                    "description": "Whether to use a presigned request or PutObject for single part uploads",
                    "type": "boolean",
                    "default": false
                },
                "v2Auth": {
                    "description": "If true use v2 authentication.",
                    "type": "boolean",
                    "default": false
                },
                "versionAt": {
                    "description": "Show file versions as they were at the specified time.",
                    "type": "string",
                    "default": "off"
                },
                "versions": {
                    "description": "Include old versions in directory listings.",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "storage.S3SeaweedFSConfig": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "description": "AWS Access Key ID.",
                    "type": "string"
                },
                "acl": {
                    "description": "Canned ACL used when creating buckets and storing or copying objects.",
                    "type": "string"
                },
                "bucketAcl": {
                    "description": "Canned ACL used when creating buckets.",
                    "type": "string",
                    "example": "private"
                },
                "chunkSize": {
                    "description": "Chunk size to use for uploading.",
                    "type": "string",
                    "default": "5Mi"
                },
                "copyCutoff": {
                    "description": "Cutoff for switching to multipart copy.",
                    "type": "string",
                    "default": "4.656Gi"
                },
                "decompress": {
                    "description": "If set this will decompress gzip encoded objects.",
                    "type": "boolean",
                    "default": false
                },
                "disableChecksum": {
                    "description": "Don't store MD5 checksum with object metadata.",
                    "type": "boolean",
                    "default": false
                },
                "disableHttp2": {
                    "description": "Disable usage of http2 for S3 backends.",
                    "type": "boolean",
                    "default": false
                },
                "downloadUrl": {
                    "description": "Custom endpoint for downloads.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for S3 API.",
                    "type": "string",
                    "example": "localhost:8333"
                },
                "envAuth": {
                    "description": "Get AWS credentials from runtime (environment variables or EC2/ECS meta data if no env vars).",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "forcePathStyle": {
                    "description": "If true use path style access if false use virtual hosted style.",
                    "type": "boolean",
                    "default": true
                },
                "listChunk": {
                    "description": "Size of listing chunk (response list for each ListObject S3 request).",
                    "type": "integer",
                    "default": 1000
                },
                "listUrlEncode": {
                    "description": "Whether to url encode listings: true/false/unset",
                    "type": "string",
                    "default": "unset"
                },
                "listVersion": {
                    "description": "Version of ListObjects to use: 1,2 or 0 for auto.",
                    "type": "integer",
                    "default": 0
                },
                "locationConstraint": {
                    "description": "Location constraint - must be set to match the Region.",
                    "type": "string"
                },
                "maxUploadParts": {
                    "description": "Maximum number of parts in a multipart upload.",
                    "type": "integer",
                    "default": 10000
                },
                "memoryPoolFlushTime": {
                    "description": "How often internal memory buffer pools will be flushed.",
                    "type": "string",
                    "default": "1m0s"
                },
                "memoryPoolUseMmap": {
                    "description": "Whether to use mmap buffers in internal memory pool.",
                    "type": "boolean",
                    "default": false
                },
                "mightGzip": {
                    "description": "Set this if the backend might gzip objects.",
                    "type": "string",
                    "default": "unset"
                },
                "noCheckBucket": {
                    "description": "If set, don't attempt to check the bucket exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "noHead": {
                    "description": "If set, don't HEAD uploaded objects to check integrity.",
                    "type": "boolean",
                    "default": false
                },
                "noHeadObject": {
                    "description": "If set, do not do HEAD before GET when getting objects.",
                    "type": "boolean",
                    "default": false
                },
                "noSystemMetadata": {
                    "description": "Suppress setting and reading of system metadata",
                    "type": "boolean",
                    "default": false
                },
                "profile": {
                    "description": "Profile to use in the shared credentials file.",
                    "type": "string"
                },
                "region": {
                    "description": "Region to connect to.",
                    "type": "string",
                    "example": ""
                },
                "secretAccessKey": {
                    "description": "AWS Secret Access Key (password).",
                    "type": "string"
                },
                "sessionToken": {
                    "description": "An AWS session token.",
                    "type": "string"
                },
                "sharedCredentialsFile": {
                    "description": "Path to the shared credentials file.",
                    "type": "string"
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 4
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                },
                "useMultipartEtag": {
                    "description": "Whether to use ETag in multipart uploads for verification",
                    "type": "string",
                    "default": "unset"
                },
                "usePresignedRequest": {
                    "description": "Whether to use a presigned request or PutObject for single part uploads",
                    "type": "boolean",
                    "default": false
                },
                "v2Auth": {
                    "description": "If true use v2 authentication.",
                    "type": "boolean",
                    "default": false
                },
                "versionAt": {
                    "description": "Show file versions as they were at the specified time.",
                    "type": "string",
                    "default": "off"
                },
                "versions": {
                    "description": "Include old versions in directory listings.",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "storage.S3StackPathConfig": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "description": "AWS Access Key ID.",
                    "type": "string"
                },
                "acl": {
                    "description": "Canned ACL used when creating buckets and storing or copying objects.",
                    "type": "string"
                },
                "bucketAcl": {
                    "description": "Canned ACL used when creating buckets.",
                    "type": "string",
                    "example": "private"
                },
                "chunkSize": {
                    "description": "Chunk size to use for uploading.",
                    "type": "string",
                    "default": "5Mi"
                },
                "copyCutoff": {
                    "description": "Cutoff for switching to multipart copy.",
                    "type": "string",
                    "default": "4.656Gi"
                },
                "decompress": {
                    "description": "If set this will decompress gzip encoded objects.",
                    "type": "boolean",
                    "default": false
                },
                "disableChecksum": {
                    "description": "Don't store MD5 checksum with object metadata.",
                    "type": "boolean",
                    "default": false
                },
                "disableHttp2": {
                    "description": "Disable usage of http2 for S3 backends.",
                    "type": "boolean",
                    "default": false
                },
                "downloadUrl": {
                    "description": "Custom endpoint for downloads.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for StackPath Object Storage.",
                    "type": "string",
                    "example": "s3.us-east-2.stackpathstorage.com"
                },
                "envAuth": {
                    "description": "Get AWS credentials from runtime (environment variables or EC2/ECS meta data if no env vars).",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "forcePathStyle": {
                    "description": "If true use path style access if false use virtual hosted style.",
                    "type": "boolean",
                    "default": true
                },
                "listChunk": {
                    "description": "Size of listing chunk (response list for each ListObject S3 request).",
                    "type": "integer",
                    "default": 1000
                },
                "listUrlEncode": {
                    "description": "Whether to url encode listings: true/false/unset",
                    "type": "string",
                    "default": "unset"
                },
                "listVersion": {
                    "description": "Version of ListObjects to use: 1,2 or 0 for auto.",
                    "type": "integer",
                    "default": 0
                },
                "maxUploadParts": {
                    "description": "Maximum number of parts in a multipart upload.",
                    "type": "integer",
                    "default": 10000
                },
                "memoryPoolFlushTime": {
                    "description": "How often internal memory buffer pools will be flushed.",
                    "type": "string",
                    "default": "1m0s"
                },
                "memoryPoolUseMmap": {
                    "description": "Whether to use mmap buffers in internal memory pool.",
                    "type": "boolean",
                    "default": false
                },
                "mightGzip": {
                    "description": "Set this if the backend might gzip objects.",
                    "type": "string",
                    "default": "unset"
                },
                "noCheckBucket": {
                    "description": "If set, don't attempt to check the bucket exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "noHead": {
                    "description": "If set, don't HEAD uploaded objects to check integrity.",
                    "type": "boolean",
                    "default": false
                },
                "noHeadObject": {
                    "description": "If set, do not do HEAD before GET when getting objects.",
                    "type": "boolean",
                    "default": false
                },
                "noSystemMetadata": {
                    "description": "Suppress setting and reading of system metadata",
                    "type": "boolean",
                    "default": false
                },
                "profile": {
                    "description": "Profile to use in the shared credentials file.",
                    "type": "string"
                },
                "region": {
                    "description": "Region to connect to.",
                    "type": "string",
                    "example": ""
                },
                "secretAccessKey": {
                    "description": "AWS Secret Access Key (password).",
                    "type": "string"
                },
                "sessionToken": {
                    "description": "An AWS session token.",
                    "type": "string"
                },
                "sharedCredentialsFile": {
                    "description": "Path to the shared credentials file.",
                    "type": "string"
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 4
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                },
                "useMultipartEtag": {
                    "description": "Whether to use ETag in multipart uploads for verification",
                    "type": "string",
                    "default": "unset"
                },
                "usePresignedRequest": {
                    "description": "Whether to use a presigned request or PutObject for single part uploads",
                    "type": "boolean",
                    "default": false
                },
                "v2Auth": {
                    "description": "If true use v2 authentication.",
                    "type": "boolean",
                    "default": false
                },
                "versionAt": {
                    "description": "Show file versions as they were at the specified time.",
                    "type": "string",
                    "default": "off"
                },
                "versions": {
                    "description": "Include old versions in directory listings.",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "storage.S3StorjConfig": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "description": "AWS Access Key ID.",
                    "type": "string"
                },
                "bucketAcl": {
                    "description": "Canned ACL used when creating buckets.",
                    "type": "string",
                    "example": "private"
                },
                "chunkSize": {
                    "description": "Chunk size to use for uploading.",
                    "type": "string",
                    "default": "5Mi"
                },
                "copyCutoff": {
                    "description": "Cutoff for switching to multipart copy.",
                    "type": "string",
                    "default": "4.656Gi"
                },
                "decompress": {
                    "description": "If set this will decompress gzip encoded objects.",
                    "type": "boolean",
                    "default": false
                },
                "disableChecksum": {
                    "description": "Don't store MD5 checksum with object metadata.",
                    "type": "boolean",
                    "default": false
                },
                "disableHttp2": {
                    "description": "Disable usage of http2 for S3 backends.",
                    "type": "boolean",
                    "default": false
                },
                "downloadUrl": {
                    "description": "Custom endpoint for downloads.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for Storj Gateway.",
                    "type": "string",
                    "example": "gateway.storjshare.io"
                },
                "envAuth": {
                    "description": "Get AWS credentials from runtime (environment variables or EC2/ECS meta data if no env vars).",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "forcePathStyle": {
                    "description": "If true use path style access if false use virtual hosted style.",
                    "type": "boolean",
                    "default": true
                },
                "listChunk": {
                    "description": "Size of listing chunk (response list for each ListObject S3 request).",
                    "type": "integer",
                    "default": 1000
                },
                "listUrlEncode": {
                    "description": "Whether to url encode listings: true/false/unset",
                    "type": "string",
                    "default": "unset"
                },
                "listVersion": {
                    "description": "Version of ListObjects to use: 1,2 or 0 for auto.",
                    "type": "integer",
                    "default": 0
                },
                "maxUploadParts": {
                    "description": "Maximum number of parts in a multipart upload.",
                    "type": "integer",
                    "default": 10000
                },
                "memoryPoolFlushTime": {
                    "description": "How often internal memory buffer pools will be flushed.",
                    "type": "string",
                    "default": "1m0s"
                },
                "memoryPoolUseMmap": {
                    "description": "Whether to use mmap buffers in internal memory pool.",
                    "type": "boolean",
                    "default": false
                },
                "mightGzip": {
                    "description": "Set this if the backend might gzip objects.",
                    "type": "string",
                    "default": "unset"
                },
                "noCheckBucket": {
                    "description": "If set, don't attempt to check the bucket exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "noHead": {
                    "description": "If set, don't HEAD uploaded objects to check integrity.",
                    "type": "boolean",
                    "default": false
                },
                "noHeadObject": {
                    "description": "If set, do not do HEAD before GET when getting objects.",
                    "type": "boolean",
                    "default": false
                },
                "noSystemMetadata": {
                    "description": "Suppress setting and reading of system metadata",
                    "type": "boolean",
                    "default": false
                },
                "profile": {
                    "description": "Profile to use in the shared credentials file.",
                    "type": "string"
                },
                "secretAccessKey": {
                    "description": "AWS Secret Access Key (password).",
                    "type": "string"
                },
                "sessionToken": {
                    "description": "An AWS session token.",
                    "type": "string"
                },
                "sharedCredentialsFile": {
                    "description": "Path to the shared credentials file.",
                    "type": "string"
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 4
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                },
                "useMultipartEtag": {
                    "description": "Whether to use ETag in multipart uploads for verification",
                    "type": "string",
                    "default": "unset"
                },
                "usePresignedRequest": {
                    "description": "Whether to use a presigned request or PutObject for single part uploads",
                    "type": "boolean",
                    "default": false
                },
                "v2Auth": {
                    "description": "If true use v2 authentication.",
                    "type": "boolean",
                    "default": false
                },
                "versionAt": {
                    "description": "Show file versions as they were at the specified time.",
                    "type": "string",
                    "default": "off"
                },
                "versions": {
                    "description": "Include old versions in directory listings.",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "storage.S3TencentCOSConfig": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "description": "AWS Access Key ID.",
                    "type": "string"
                },
                "acl": {
                    "description": "Canned ACL used when creating buckets and storing or copying objects.",
                    "type": "string",
                    "example": "default"
                },
                "bucketAcl": {
                    "description": "Canned ACL used when creating buckets.",
                    "type": "string",
                    "example": "private"
                },
                "chunkSize": {
                    "description": "Chunk size to use for uploading.",
                    "type": "string",
                    "default": "5Mi"
                },
                "copyCutoff": {
                    "description": "Cutoff for switching to multipart copy.",
                    "type": "string",
                    "default": "4.656Gi"
                },
                "decompress": {
                    "description": "If set this will decompress gzip encoded objects.",
                    "type": "boolean",
                    "default": false
                },
                "disableChecksum": {
                    "description": "Don't store MD5 checksum with object metadata.",
                    "type": "boolean",
                    "default": false
                },
                "disableHttp2": {
                    "description": "Disable usage of http2 for S3 backends.",
                    "type": "boolean",
                    "default": false
                },
                "downloadUrl": {
                    "description": "Custom endpoint for downloads.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for Tencent COS API.",
                    "type": "string",
                    "example": "cos.ap-beijing.myqcloud.com"
                },
                "envAuth": {
                    "description": "Get AWS credentials from runtime (environment variables or EC2/ECS meta data if no env vars).",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "forcePathStyle": {
                    "description": "If true use path style access if false use virtual hosted style.",
                    "type": "boolean",
                    "default": true
                },
                "listChunk": {
                    "description": "Size of listing chunk (response list for each ListObject S3 request).",
                    "type": "integer",
                    "default": 1000
                },
                "listUrlEncode": {
                    "description": "Whether to url encode listings: true/false/unset",
                    "type": "string",
                    "default": "unset"
                },
                "listVersion": {
                    "description": "Version of ListObjects to use: 1,2 or 0 for auto.",
                    "type": "integer",
                    "default": 0
                },
                "maxUploadParts": {
                    "description": "Maximum number of parts in a multipart upload.",
                    "type": "integer",
                    "default": 10000
                },
                "memoryPoolFlushTime": {
                    "description": "How often internal memory buffer pools will be flushed.",
                    "type": "string",
                    "default": "1m0s"
                },
                "memoryPoolUseMmap": {
                    "description": "Whether to use mmap buffers in internal memory pool.",
                    "type": "boolean",
                    "default": false
                },
                "mightGzip": {
                    "description": "Set this if the backend might gzip objects.",
                    "type": "string",
                    "default": "unset"
                },
                "noCheckBucket": {
                    "description": "If set, don't attempt to check the bucket exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "noHead": {
                    "description": "If set, don't HEAD uploaded objects to check integrity.",
                    "type": "boolean",
                    "default": false
                },
                "noHeadObject": {
                    "description": "If set, do not do HEAD before GET when getting objects.",
                    "type": "boolean",
                    "default": false
                },
                "noSystemMetadata": {
                    "description": "Suppress setting and reading of system metadata",
                    "type": "boolean",
                    "default": false
                },
                "profile": {
                    "description": "Profile to use in the shared credentials file.",
                    "type": "string"
                },
                "secretAccessKey": {
                    "description": "AWS Secret Access Key (password).",
                    "type": "string"
                },
                "sessionToken": {
                    "description": "An AWS session token.",
                    "type": "string"
                },
                "sharedCredentialsFile": {
                    "description": "Path to the shared credentials file.",
                    "type": "string"
                },
                "storageClass": {
                    "description": "The storage class to use when storing new objects in Tencent COS.",
                    "type": "string",
                    "example": ""
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 4
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                },
                "useMultipartEtag": {
                    "description": "Whether to use ETag in multipart uploads for verification",
                    "type": "string",
                    "default": "unset"
                },
                "usePresignedRequest": {
                    "description": "Whether to use a presigned request or PutObject for single part uploads",
                    "type": "boolean",
                    "default": false
                },
                "v2Auth": {
                    "description": "If true use v2 authentication.",
                    "type": "boolean",
                    "default": false
                },
                "versionAt": {
                    "description": "Show file versions as they were at the specified time.",
                    "type": "string",
                    "default": "off"
                },
                "versions": {
                    "description": "Include old versions in directory listings.",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "storage.S3WasabiConfig": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "description": "AWS Access Key ID.",
                    "type": "string"
                },
                "acl": {
                    "description": "Canned ACL used when creating buckets and storing or copying objects.",
                    "type": "string"
                },
                "bucketAcl": {
                    "description": "Canned ACL used when creating buckets.",
                    "type": "string",
                    "example": "private"
                },
                "chunkSize": {
                    "description": "Chunk size to use for uploading.",
                    "type": "string",
                    "default": "5Mi"
                },
                "copyCutoff": {
                    "description": "Cutoff for switching to multipart copy.",
                    "type": "string",
                    "default": "4.656Gi"
                },
                "decompress": {
                    "description": "If set this will decompress gzip encoded objects.",
                    "type": "boolean",
                    "default": false
                },
                "disableChecksum": {
                    "description": "Don't store MD5 checksum with object metadata.",
                    "type": "boolean",
                    "default": false
                },
                "disableHttp2": {
                    "description": "Disable usage of http2 for S3 backends.",
                    "type": "boolean",
                    "default": false
                },
                "downloadUrl": {
                    "description": "Custom endpoint for downloads.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for S3 API.",
                    "type": "string",
                    "example": "s3.wasabisys.com"
                },
                "envAuth": {
                    "description": "Get AWS credentials from runtime (environment variables or EC2/ECS meta data if no env vars).",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "forcePathStyle": {
                    "description": "If true use path style access if false use virtual hosted style.",
                    "type": "boolean",
                    "default": true
                },
                "listChunk": {
                    "description": "Size of listing chunk (response list for each ListObject S3 request).",
                    "type": "integer",
                    "default": 1000
                },
                "listUrlEncode": {
                    "description": "Whether to url encode listings: true/false/unset",
                    "type": "string",
                    "default": "unset"
                },
                "listVersion": {
                    "description": "Version of ListObjects to use: 1,2 or 0 for auto.",
                    "type": "integer",
                    "default": 0
                },
                "locationConstraint": {
                    "description": "Location constraint - must be set to match the Region.",
                    "type": "string"
                },
                "maxUploadParts": {
                    "description": "Maximum number of parts in a multipart upload.",
                    "type": "integer",
                    "default": 10000
                },
                "memoryPoolFlushTime": {
                    "description": "How often internal memory buffer pools will be flushed.",
                    "type": "string",
                    "default": "1m0s"
                },
                "memoryPoolUseMmap": {
                    "description": "Whether to use mmap buffers in internal memory pool.",
                    "type": "boolean",
                    "default": false
                },
                "mightGzip": {
                    "description": "Set this if the backend might gzip objects.",
                    "type": "string",
                    "default": "unset"
                },
                "noCheckBucket": {
                    "description": "If set, don't attempt to check the bucket exists or create it.",
                    "type": "boolean",
                    "default": false
                },
                "noHead": {
                    "description": "If set, don't HEAD uploaded objects to check integrity.",
                    "type": "boolean",
                    "default": false
                },
                "noHeadObject": {
                    "description": "If set, do not do HEAD before GET when getting objects.",
                    "type": "boolean",
                    "default": false
                },
                "noSystemMetadata": {
                    "description": "Suppress setting and reading of system metadata",
                    "type": "boolean",
                    "default": false
                },
                "profile": {
                    "description": "Profile to use in the shared credentials file.",
                    "type": "string"
                },
                "region": {
                    "description": "Region to connect to.",
                    "type": "string",
                    "example": ""
                },
                "secretAccessKey": {
                    "description": "AWS Secret Access Key (password).",
                    "type": "string"
                },
                "sessionToken": {
                    "description": "An AWS session token.",
                    "type": "string"
                },
                "sharedCredentialsFile": {
                    "description": "Path to the shared credentials file.",
                    "type": "string"
                },
                "uploadConcurrency": {
                    "description": "Concurrency for multipart uploads.",
                    "type": "integer",
                    "default": 4
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to chunked upload.",
                    "type": "string",
                    "default": "200Mi"
                },
                "useMultipartEtag": {
                    "description": "Whether to use ETag in multipart uploads for verification",
                    "type": "string",
                    "default": "unset"
                },
                "usePresignedRequest": {
                    "description": "Whether to use a presigned request or PutObject for single part uploads",
                    "type": "boolean",
                    "default": false
                },
                "v2Auth": {
                    "description": "If true use v2 authentication.",
                    "type": "boolean",
                    "default": false
                },
                "versionAt": {
                    "description": "Show file versions as they were at the specified time.",
                    "type": "string",
                    "default": "off"
                },
                "versions": {
                    "description": "Include old versions in directory listings.",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "storage.SeafileConfig": {
            "type": "object",
            "properties": {
                "2fa": {
                    "description": "Two-factor authentication ('true' if the account has 2FA enabled).",
                    "type": "boolean",
                    "default": false
                },
                "authToken": {
                    "description": "Authentication token.",
                    "type": "string"
                },
                "createLibrary": {
                    "description": "Should rclone create a library if it doesn't exist.",
                    "type": "boolean",
                    "default": false
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,DoubleQuote,BackSlash,Ctl,InvalidUtf8"
                },
                "library": {
                    "description": "Name of the library.",
                    "type": "string"
                },
                "libraryKey": {
                    "description": "Library password (for encrypted libraries only).",
                    "type": "string"
                },
                "pass": {
                    "description": "Password.",
                    "type": "string"
                },
                "url": {
                    "description": "URL of seafile host to connect to.",
                    "type": "string",
                    "example": "https://cloud.seafile.com/"
                },
                "user": {
                    "description": "User name (usually email address).",
                    "type": "string"
                }
            }
        },
        "storage.SftpConfig": {
            "type": "object",
            "properties": {
                "askPassword": {
                    "description": "Allow asking for SFTP password when needed.",
                    "type": "boolean",
                    "default": false
                },
                "chunkSize": {
                    "description": "Upload and download chunk size.",
                    "type": "string",
                    "default": "32Ki"
                },
                "ciphers": {
                    "description": "Space separated list of ciphers to be used for session encryption, ordered by preference.",
                    "type": "string"
                },
                "concurrency": {
                    "description": "The maximum number of outstanding requests for one file",
                    "type": "integer",
                    "default": 64
                },
                "disableConcurrentReads": {
                    "description": "If set don't use concurrent reads.",
                    "type": "boolean",
                    "default": false
                },
                "disableConcurrentWrites": {
                    "description": "If set don't use concurrent writes.",
                    "type": "boolean",
                    "default": false
                },
                "disableHashcheck": {
                    "description": "Disable the execution of SSH commands to determine if remote file hashing is available.",
                    "type": "boolean",
                    "default": false
                },
                "host": {
                    "description": "SSH host to connect to.",
                    "type": "string"
                },
                "idleTimeout": {
                    "description": "Max time before closing idle connections.",
                    "type": "string",
                    "default": "1m0s"
                },
                "keyExchange": {
                    "description": "Space separated list of key exchange algorithms, ordered by preference.",
                    "type": "string"
                },
                "keyFile": {
                    "description": "Path to PEM-encoded private key file.",
                    "type": "string"
                },
                "keyFilePass": {
                    "description": "The passphrase to decrypt the PEM-encoded private key file.",
                    "type": "string"
                },
                "keyPem": {
                    "description": "Raw PEM-encoded private key.",
                    "type": "string"
                },
                "keyUseAgent": {
                    "description": "When set forces the usage of the ssh-agent.",
                    "type": "boolean",
                    "default": false
                },
                "knownHostsFile": {
                    "description": "Optional path to known_hosts file.",
                    "type": "string",
                    "example": "~/.ssh/known_hosts"
                },
                "macs": {
                    "description": "Space separated list of MACs (message authentication code) algorithms, ordered by preference.",
                    "type": "string"
                },
                "md5sumCommand": {
                    "description": "The command used to read md5 hashes.",
                    "type": "string"
                },
                "pass": {
                    "description": "SSH password, leave blank to use ssh-agent.",
                    "type": "string"
                },
                "pathOverride": {
                    "description": "Override path used by SSH shell commands.",
                    "type": "string"
                },
                "port": {
                    "description": "SSH port number.",
                    "type": "integer",
                    "default": 22
                },
                "pubkeyFile": {
                    "description": "Optional path to public key file.",
                    "type": "string"
                },
                "serverCommand": {
                    "description": "Specifies the path or command to run a sftp server on the remote host.",
                    "type": "string"
                },
                "setEnv": {
                    "description": "Environment variables to pass to sftp and commands",
                    "type": "string"
                },
                "setModtime": {
                    "description": "Set the modified time on the remote if set.",
                    "type": "boolean",
                    "default": true
                },
                "sha1sumCommand": {
                    "description": "The command used to read sha1 hashes.",
                    "type": "string"
                },
                "shellType": {
                    "description": "The type of SSH shell on remote server, if any.",
                    "type": "string",
                    "example": "none"
                },
                "skipLinks": {
                    "description": "Set to skip any symlinks and any other non regular files.",
                    "type": "boolean",
                    "default": false
                },
                "subsystem": {
                    "description": "Specifies the SSH2 subsystem on the remote host.",
                    "type": "string",
                    "default": "sftp"
                },
                "useFstat": {
                    "description": "If set use fstat instead of stat.",
                    "type": "boolean",
                    "default": false
                },
                "useInsecureCipher": {
                    "description": "Enable the use of insecure ciphers and key exchange methods.",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "user": {
                    "description": "SSH username.",
                    "type": "string",
                    "default": "$USER"
                }
            }
        },
        "storage.SharefileConfig": {
            "type": "object",
            "properties": {
                "chunkSize": {
                    "description": "Upload chunk size.",
                    "type": "string",
                    "default": "64Mi"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,LtGt,DoubleQuote,Colon,Question,Asterisk,Pipe,BackSlash,Ctl,LeftSpace,LeftPeriod,RightSpace,RightPeriod,InvalidUtf8,Dot"
                },
                "endpoint": {
                    "description": "Endpoint for API calls.",
                    "type": "string"
                },
                "rootFolderId": {
                    "description": "ID of the root folder.",
                    "type": "string",
                    "example": ""
                },
                "uploadCutoff": {
                    "description": "Cutoff for switching to multipart upload.",
                    "type": "string",
                    "default": "128Mi"
                }
            }
        },
        "storage.SiaConfig": {
            "type": "object",
            "properties": {
                "apiPassword": {
                    "description": "Sia Daemon API Password.",
                    "type": "string"
                },
                "apiUrl": {
                    "description": "Sia daemon API URL, like http://sia.daemon.host:9980.",
                    "type": "string",
                    "default": "http://127.0.0.1:9980"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,Question,Hash,Percent,Del,Ctl,InvalidUtf8,Dot"
                },
                "userAgent": {
                    "description": "Siad User Agent",
                    "type": "string",
                    "default": "Sia-Agent"
                }
            }
        },
        "storage.SmbConfig": {
            "type": "object",
            "properties": {
                "caseInsensitive": {
                    "description": "Whether the server is configured to be case-insensitive.",
                    "type": "boolean",
                    "default": true
                },
                "domain": {
                    "description": "Domain name for NTLM authentication.",
                    "type": "string",
                    "default": "WORKGROUP"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,LtGt,DoubleQuote,Colon,Question,Asterisk,Pipe,BackSlash,Ctl,RightSpace,RightPeriod,InvalidUtf8,Dot"
                },
                "hideSpecialShare": {
                    "description": "Hide special shares (e.g. print$) which users aren't supposed to access.",
                    "type": "boolean",
                    "default": true
                },
                "host": {
                    "description": "SMB server hostname to connect to.",
                    "type": "string"
                },
                "idleTimeout": {
                    "description": "Max time before closing idle connections.",
                    "type": "string",
                    "default": "1m0s"
                },
                "pass": {
                    "description": "SMB password.",
                    "type": "string"
                },
                "port": {
                    "description": "SMB port number.",
                    "type": "integer",
                    "default": 445
                },
                "spn": {
                    "description": "Service principal name.",
                    "type": "string"
                },
                "user": {
                    "description": "SMB username.",
                    "type": "string",
                    "default": "$USER"
                }
            }
        },
        "storage.StorjExistingConfig": {
            "type": "object",
            "properties": {
                "accessGrant": {
                    "description": "Access grant.",
                    "type": "string"
                }
            }
        },
        "storage.StorjNewConfig": {
            "type": "object",
            "properties": {
                "apiKey": {
                    "description": "API key.",
                    "type": "string"
                },
                "passphrase": {
                    "description": "Encryption passphrase.",
                    "type": "string"
                },
                "satelliteAddress": {
                    "description": "Satellite address.",
                    "type": "string",
                    "default": "us1.storj.io",
                    "example": "us1.storj.io"
                }
            }
        },
        "storage.SugarsyncConfig": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "description": "Sugarsync Access Key ID.",
                    "type": "string"
                },
                "appId": {
                    "description": "Sugarsync App ID.",
                    "type": "string"
                },
                "authorization": {
                    "description": "Sugarsync authorization.",
                    "type": "string"
                },
                "authorizationExpiry": {
                    "description": "Sugarsync authorization expiry.",
                    "type": "string"
                },
                "deletedId": {
                    "description": "Sugarsync deleted folder id.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,Ctl,InvalidUtf8,Dot"
                },
                "hardDelete": {
                    "description": "Permanently delete files if true",
                    "type": "boolean",
                    "default": false
                },
                "privateAccessKey": {
                    "description": "Sugarsync Private Access Key.",
                    "type": "string"
                },
                "refreshToken": {
                    "description": "Sugarsync refresh token.",
                    "type": "string"
                },
                "rootId": {
                    "description": "Sugarsync root id.",
                    "type": "string"
                },
                "user": {
                    "description": "Sugarsync user.",
                    "type": "string"
                }
            }
        },
        "storage.SwiftConfig": {
            "type": "object",
            "properties": {
                "applicationCredentialId": {
                    "description": "Application Credential ID (OS_APPLICATION_CREDENTIAL_ID).",
                    "type": "string"
                },
                "applicationCredentialName": {
                    "description": "Application Credential Name (OS_APPLICATION_CREDENTIAL_NAME).",
                    "type": "string"
                },
                "applicationCredentialSecret": {
                    "description": "Application Credential Secret (OS_APPLICATION_CREDENTIAL_SECRET).",
                    "type": "string"
                },
                "auth": {
                    "description": "Authentication URL for server (OS_AUTH_URL).",
                    "type": "string",
                    "example": "https://auth.api.rackspacecloud.com/v1.0"
                },
                "authToken": {
                    "description": "Auth Token from alternate authentication - optional (OS_AUTH_TOKEN).",
                    "type": "string"
                },
                "authVersion": {
                    "description": "AuthVersion - optional - set to (1,2,3) if your auth URL has no version (ST_AUTH_VERSION).",
                    "type": "integer",
                    "default": 0
                },
                "chunkSize": {
                    "description": "Above this size files will be chunked into a _segments container.",
                    "type": "string",
                    "default": "5Gi"
                },
                "domain": {
                    "description": "User domain - optional (v3 auth) (OS_USER_DOMAIN_NAME)",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,InvalidUtf8"
                },
                "endpointType": {
                    "description": "Endpoint type to choose from the service catalogue (OS_ENDPOINT_TYPE).",
                    "type": "string",
                    "default": "public",
                    "example": "public"
                },
                "envAuth": {
                    "description": "Get swift credentials from environment variables in standard OpenStack form.",
                    "type": "boolean",
                    "default": false,
                    "example": false
                },
                "key": {
                    "description": "API key or password (OS_PASSWORD).",
                    "type": "string"
                },
                "leavePartsOnError": {
                    "description": "If true avoid calling abort upload on a failure.",
                    "type": "boolean",
                    "default": false
                },
                "noChunk": {
                    "description": "Don't chunk files during streaming upload.",
                    "type": "boolean",
                    "default": false
                },
                "noLargeObjects": {
                    "description": "Disable support for static and dynamic large objects",
                    "type": "boolean",
                    "default": false
                },
                "region": {
                    "description": "Region name - optional (OS_REGION_NAME).",
                    "type": "string"
                },
                "storagePolicy": {
                    "description": "The storage policy to use when creating a new container.",
                    "type": "string",
                    "example": ""
                },
                "storageUrl": {
                    "description": "Storage URL - optional (OS_STORAGE_URL).",
                    "type": "string"
                },
                "tenant": {
                    "description": "Tenant name - optional for v1 auth, this or tenant_id required otherwise (OS_TENANT_NAME or OS_PROJECT_NAME).",
                    "type": "string"
                },
                "tenantDomain": {
                    "description": "Tenant domain - optional (v3 auth) (OS_PROJECT_DOMAIN_NAME).",
                    "type": "string"
                },
                "tenantId": {
                    "description": "Tenant ID - optional for v1 auth, this or tenant required otherwise (OS_TENANT_ID).",
                    "type": "string"
                },
                "user": {
                    "description": "User name to log in (OS_USERNAME).",
                    "type": "string"
                },
                "userId": {
                    "description": "User ID to log in - optional - most swift systems use user and leave this blank (v3 auth) (OS_USER_ID).",
                    "type": "string"
                }
            }
        },
        "storage.UptoboxConfig": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "description": "Your access token.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,LtGt,DoubleQuote,BackQuote,Del,Ctl,LeftSpace,InvalidUtf8,Dot"
                }
            }
        },
        "storage.WebdavConfig": {
            "type": "object",
            "properties": {
                "bearerToken": {
                    "description": "Bearer token instead of user/pass (e.g. a Macaroon).",
                    "type": "string"
                },
                "bearerTokenCommand": {
                    "description": "Command to run to get a bearer token.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string"
                },
                "headers": {
                    "description": "Set HTTP headers for all transactions.",
                    "type": "string"
                },
                "pass": {
                    "description": "Password.",
                    "type": "string"
                },
                "url": {
                    "description": "URL of http host to connect to.",
                    "type": "string"
                },
                "user": {
                    "description": "User name.",
                    "type": "string"
                },
                "vendor": {
                    "description": "Name of the WebDAV site/service/software you are using.",
                    "type": "string",
                    "example": "nextcloud"
                }
            }
        },
        "storage.YandexConfig": {
            "type": "object",
            "properties": {
                "authUrl": {
                    "description": "Auth server URL.",
                    "type": "string"
                },
                "clientId": {
                    "description": "OAuth Client Id.",
                    "type": "string"
                },
                "clientSecret": {
                    "description": "OAuth Client Secret.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Slash,Del,Ctl,InvalidUtf8,Dot"
                },
                "hardDelete": {
                    "description": "Delete files permanently rather than putting them into the trash.",
                    "type": "boolean",
                    "default": false
                },
                "token": {
                    "description": "OAuth Access Token as a JSON blob.",
                    "type": "string"
                },
                "tokenUrl": {
                    "description": "Token server url.",
                    "type": "string"
                }
            }
        },
        "storage.ZohoConfig": {
            "type": "object",
            "properties": {
                "authUrl": {
                    "description": "Auth server URL.",
                    "type": "string"
                },
                "clientId": {
                    "description": "OAuth Client Id.",
                    "type": "string"
                },
                "clientSecret": {
                    "description": "OAuth Client Secret.",
                    "type": "string"
                },
                "encoding": {
                    "description": "The encoding for the backend.",
                    "type": "string",
                    "default": "Del,Ctl,InvalidUtf8"
                },
                "region": {
                    "description": "Zoho region to connect to.",
                    "type": "string",
                    "example": "com"
                },
                "token": {
                    "description": "OAuth Access Token as a JSON blob.",
                    "type": "string"
                },
                "tokenUrl": {
                    "description": "Token server url.",
                    "type": "string"
                }
            }
        },
        "store.PieceReader": {
            "type": "object"
        },
        "wallet.ImportRequest": {
            "type": "object",
            "properties": {
                "privateKey": {
                    "description": "This is the exported private key from lotus wallet export",
                    "type": "string"
                }
            }
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}