basePath: /api
definitions:
  api.HTTPError:
    properties:
      err:
        type: string
    type: object
  dataprep.AddPieceRequest:
    properties:
      filePath:
        description: Path to the CAR file, used to determine the size of the file
          and root CID
        type: string
      pieceCid:
        description: CID of the piece
        type: string
      pieceSize:
        description: Size of the piece
        type: string
      rootCid:
        description: Root CID of the CAR file, if not provided, will be determined
          by the CAR file header. Used to populate the label field of storage deal
        type: string
    type: object
  dataprep.CreateRequest:
    properties:
      deleteAfterExport:
        default: false
        description: Whether to delete the source files after export
        type: boolean
      maxSize:
        default: 31.5GiB
        description: Maximum size of the CAR files to be created
        type: string
      outputStorages:
        description: Name of Output storage systems to be used for the output
        items:
          type: string
        type: array
      pieceSize:
        description: Target piece size of the CAR files used for piece commitment
          calculation
        type: string
      sourceStorages:
        description: Name of Source storage systems to be used for the source
        items:
          type: string
        type: array
    required:
    - maxSize
    - sourceStorages
    type: object
  dataprep.DirEntry:
    properties:
      cid:
        type: string
      fileVersions:
        items:
          $ref: '#/definitions/dataprep.Version'
        type: array
      isDir:
        type: boolean
      path:
        type: string
    type: object
  dataprep.ExploreResult:
    properties:
      cid:
        type: string
      path:
        type: string
      subEntries:
        items:
          $ref: '#/definitions/dataprep.DirEntry'
        type: array
    type: object
  dataprep.PieceList:
    properties:
      attachmentId:
        type: integer
      pieces:
        items:
          $ref: '#/definitions/model.Car'
        type: array
      source:
        $ref: '#/definitions/model.Storage'
      storageId:
        type: integer
    type: object
  dataprep.SourceStatus:
    properties:
      attachmentId:
        type: integer
      jobs:
        items:
          $ref: '#/definitions/model.Job'
        type: array
      source:
        $ref: '#/definitions/model.Storage'
      storageId:
        type: integer
    type: object
  dataprep.Version:
    properties:
      cid:
        type: string
      hash:
        type: string
      id:
        type: integer
      lastModified:
        type: string
      size:
        type: integer
    type: object
  deal.ListDealRequest:
    properties:
      preparations:
        description: preparation ID filter
        items:
          type: integer
        type: array
      providers:
        description: provider filter
        items:
          type: string
        type: array
      schedules:
        description: schedule id filter
        items:
          type: integer
        type: array
      sources:
        description: source filter
        items:
          type: string
        type: array
      states:
        description: state filter
        items:
          $ref: '#/definitions/model.DealState'
        type: array
    type: object
  deal.Proposal:
    properties:
      clientAddress:
        description: Client address
        type: string
      duration:
        default: 12740h
        description: Duration in epoch or in duration format, i.e. 1500000, 2400h
        type: string
      fileSize:
        description: File size in bytes for boost to fetch the CAR file
        type: integer
      httpHeaders:
        description: http headers to be passed with the request (i.e. key=value)
        items:
          type: string
        type: array
      ipni:
        default: true
        description: Whether the deal should be IPNI
        type: boolean
      keepUnsealed:
        default: true
        description: Whether the deal should be kept unsealed
        type: boolean
      pieceCid:
        description: Piece CID
        type: string
      pieceSize:
        description: Piece size
        type: string
      pricePerDeal:
        default: 0
        description: Price in FIL per deal
        type: number
      pricePerGb:
        default: 0
        description: Price in FIL  per GiB
        type: number
      pricePerGbEpoch:
        default: 0
        description: Price in FIL per GiB per epoch
        type: number
      providerId:
        description: Provider ID
        type: string
      rootCid:
        default: bafkqaaa
        description: Root CID that is required as part of the deal proposal, if empty,
          will be set to empty CID
        type: string
      startDelay:
        default: 72h
        description: Deal start delay in epoch or in duration format, i.e. 1000, 72h
        type: string
      urlTemplate:
        description: URL template with PIECE_CID placeholder for boost to fetch the
          CAR file, i.e. http://127.0.0.1/piece/{PIECE_CID}.car
        type: string
      verified:
        default: true
        description: Whether the deal should be verified
        type: boolean
    type: object
  fs.Duration:
    enum:
    - -9223372036854775808
    - 9223372036854775807
    - 1
    - 1000
    - 1000000
    - 1000000000
    - 60000000000
    - 3600000000000
    - 3153600000000000000
    type: integer
    x-enum-varnames:
    - ModTimeNotSupported
  fs.Tristate:
    properties:
      valid:
        type: boolean
      value:
        type: boolean
    type: object
  model.CID:
    type: object
  model.Car:
    properties:
      attachmentId:
        type: integer
      createdAt:
        type: string
      fileSize:
        type: integer
      id:
        type: integer
      jobId:
        type: integer
      pieceCid:
        $ref: '#/definitions/model.CID'
      pieceSize:
        type: integer
      preparationId:
        description: Association
        type: integer
      rootCid:
        $ref: '#/definitions/model.CID'
      storageId:
        type: integer
      storagePath:
        description: StoragePath is the path to the CAR file inside the storage. If
          the StorageID is nil but StoragePath is not empty, it means the CAR file
          is stored at the local absolute path.
        type: string
    type: object
  model.ConfigMap:
    additionalProperties:
      type: string
    type: object
  model.Deal:
    properties:
      clientId:
        type: string
      createdAt:
        type: string
      dealId:
        type: integer
      endEpoch:
        type: integer
      errorMessage:
        type: string
      id:
        type: integer
      label:
        type: string
      pieceCid:
        $ref: '#/definitions/model.CID'
      pieceSize:
        type: integer
      price:
        type: string
      proposalId:
        type: string
      provider:
        type: string
      scheduleId:
        description: Associations
        type: integer
      sectorStartEpoch:
        type: integer
      startEpoch:
        type: integer
      state:
        $ref: '#/definitions/model.DealState'
      updatedAt:
        type: string
      verified:
        type: boolean
    type: object
  model.DealState:
    enum:
    - proposed
    - published
    - active
    - expired
    - proposal_expired
    - rejected
    - slashed
    - error
    type: string
    x-enum-varnames:
    - DealProposed
    - DealPublished
    - DealActive
    - DealExpired
    - DealProposalExpired
    - DealRejected
    - DealSlashed
    - DealErrored
  model.Job:
    properties:
      attachmentId:
        type: integer
      errorMessage:
        type: string
      errorStackTrace:
        type: string
      id:
        type: integer
      state:
        $ref: '#/definitions/model.JobState'
      type:
        $ref: '#/definitions/model.JobType'
      workerId:
        description: Associations
        type: string
    type: object
  model.JobState:
    enum:
    - created
    - ready
    - paused
    - processing
    - complete
    - error
    type: string
    x-enum-varnames:
    - Created
    - Ready
    - Paused
    - Processing
    - Complete
    - Error
  model.JobType:
    enum:
    - scan
    - pack
    - daggen
    type: string
    x-enum-varnames:
    - Scan
    - Pack
    - DagGen
  model.Preparation:
    properties:
      createdAt:
        type: string
      deleteAfterExport:
        description: DeleteAfterExport is a flag that indicates whether the source
          files should be deleted after export.
        type: boolean
      id:
        type: integer
      maxSize:
        type: integer
      pieceSize:
        type: integer
      updatedAt:
        type: string
    type: object
  model.Schedule:
    properties:
      allowedPieceCids:
        items:
          type: string
        type: array
      announceToIpni:
        type: boolean
      createdAt:
        type: string
      duration:
        type: integer
      errorMessage:
        type: string
      httpHeaders:
        items:
          type: string
        type: array
      id:
        type: integer
      keepUnsealed:
        type: boolean
      maxPendingDealNumber:
        type: integer
      maxPendingDealSize:
        type: integer
      notes:
        type: string
      preparationId:
        description: Associations
        type: integer
      pricePerDeal:
        type: number
      pricePerGb:
        type: number
      pricePerGbEpoch:
        type: number
      provider:
        type: string
      scheduleCron:
        type: string
      scheduleDealNumber:
        type: integer
      scheduleDealSize:
        type: integer
      startDelay:
        type: integer
      state:
        $ref: '#/definitions/model.ScheduleState'
      totalDealNumber:
        type: integer
      totalDealSize:
        type: integer
      updatedAt:
        type: string
      urlTemplate:
        type: string
      verified:
        type: boolean
    type: object
  model.ScheduleState:
    enum:
    - active
    - paused
    - error
    - completed
    type: string
    x-enum-varnames:
    - ScheduleActive
    - SchedulePaused
    - ScheduleError
    - ScheduleCompleted
  model.Storage:
    properties:
      config:
        allOf:
        - $ref: '#/definitions/model.ConfigMap'
        description: Config is a map of key-value pairs that can be used to store
          RClone options.
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      path:
        description: Path is the path to the storage root.
        type: string
      type:
        type: string
      updatedAt:
        type: string
    type: object
  model.Wallet:
    properties:
      address:
        description: Address is the Filecoin full address of the wallet
        type: string
      id:
        description: ID is the short ID of the wallet
        type: string
      privateKey:
        description: PrivateKey is the private key of the wallet
        type: string
    type: object
  schedule.CreateRequest:
    properties:
      allowedPieceCids:
        description: Allowed piece CIDs in this schedule
        items:
          type: string
        type: array
      duration:
        default: 12840h
        description: Duration in epoch or in duration format, i.e. 1500000, 2400h
        type: string
      httpHeaders:
        description: http headers to be passed with the request (i.e. key=value)
        items:
          type: string
        type: array
      ipni:
        default: true
        description: Whether the deal should be IPNI
        type: boolean
      keepUnsealed:
        default: true
        description: Whether the deal should be kept unsealed
        type: boolean
      maxPendingDealNumber:
        description: Max pending deal number
        type: integer
      maxPendingDealSize:
        description: Max pending deal size in human readable format, i.e. 100 TiB
        type: string
      notes:
        description: Notes
        type: string
      preparationId:
        description: Preparation ID
        type: integer
      pricePerDeal:
        default: 0
        description: Price in FIL per deal
        type: number
      pricePerGb:
        default: 0
        description: Price in FIL  per GiB
        type: number
      pricePerGbEpoch:
        default: 0
        description: Price in FIL per GiB per epoch
        type: number
      provider:
        description: Provider
        type: string
      scheduleCron:
        description: Schedule cron patter
        type: string
      scheduleDealNumber:
        description: Number of deals per scheduled time
        type: integer
      scheduleDealSize:
        description: Size of deals per schedule trigger in human readable format,
          i.e. 100 TiB
        type: string
      startDelay:
        default: 72h
        description: Deal start delay in epoch or in duration format, i.e. 1000, 72h
        type: string
      totalDealNumber:
        description: Total number of deals
        type: integer
      totalDealSize:
        description: Total size of deals in human readable format, i.e. 100 TiB
        type: string
      urlTemplate:
        description: URL template with PIECE_CID placeholder for boost to fetch the
          CAR file, i.e. http://127.0.0.1/piece/{PIECE_CID}.car
        type: string
      verified:
        default: true
        description: Whether the deal should be verified
        type: boolean
    type: object
  storage.BoxConfig:
    properties:
      accessToken:
        description: Box App Primary Access Token
        type: string
      authUrl:
        description: Auth server URL.
        type: string
      boxConfigFile:
        description: Box App config.json location
        type: string
      boxSubType:
        default: user
        example: user
        type: string
      clientId:
        description: OAuth Client Id.
        type: string
      clientSecret:
        description: OAuth Client Secret.
        type: string
      commitRetries:
        default: 100
        description: Max number of times to try committing a multipart file.
        type: integer
      encoding:
        default: Slash,BackSlash,Del,Ctl,RightSpace,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      listChunk:
        default: 1000
        description: Size of listing chunk 1-1000.
        type: integer
      ownedBy:
        description: Only show items owned by the login (email address) passed in.
        type: string
      rootFolderId:
        default: "0"
        description: Fill in for rclone to use a non root folder as its starting point.
        type: string
      token:
        description: OAuth Access Token as a JSON blob.
        type: string
      tokenUrl:
        description: Token server url.
        type: string
      uploadCutoff:
        default: 50Mi
        description: Cutoff for switching to multipart upload (>= 50 MiB).
        type: string
    type: object
  storage.CreateAcdStorageRequest:
    type: object
  storage.CreateAzureblobStorageRequest:
    type: object
  storage.CreateB2StorageRequest:
    type: object
  storage.CreateBoxStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.BoxConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateDriveStorageRequest:
    type: object
  storage.CreateDropboxStorageRequest:
    type: object
  storage.CreateFichierStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.FichierConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateFilefabricStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.FilefabricConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateFtpStorageRequest:
    type: object
  storage.CreateGcsStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.GcsConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateGphotosStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.GphotosConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateHdfsStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.HdfsConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateHidriveStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.HidriveConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateHttpStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.HttpConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateInternetarchiveStorageRequest:
    type: object
  storage.CreateJottacloudStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.JottacloudConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateKoofrDigistorageStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.KoofrDigistorageConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateKoofrKoofrStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.KoofrKoofrConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateKoofrOtherStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.KoofrOtherConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateLocalStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.LocalConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateMailruStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.MailruConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateMegaStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.MegaConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateNetstorageStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.NetstorageConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateOnedriveStorageRequest:
    type: object
  storage.CreateOosEnv_authStorageRequest:
    type: object
  storage.CreateOosInstance_principal_authStorageRequest:
    type: object
  storage.CreateOosNo_authStorageRequest:
    type: object
  storage.CreateOosResource_principal_authStorageRequest:
    type: object
  storage.CreateOosUser_principal_authStorageRequest:
    type: object
  storage.CreateOpendriveStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.OpendriveConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreatePcloudStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.PcloudConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreatePremiumizemeStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.PremiumizemeConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreatePutioStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.PutioConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateQingstorStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.QingstorConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateRequest:
    properties:
      config:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
      path:
        type: string
      provider:
        type: string
    required:
    - name
    - path
    type: object
  storage.CreateS3AWSStorageRequest:
    type: object
  storage.CreateS3AlibabaStorageRequest:
    type: object
  storage.CreateS3ArvanCloudStorageRequest:
    type: object
  storage.CreateS3CephStorageRequest:
    type: object
  storage.CreateS3ChinaMobileStorageRequest:
    type: object
  storage.CreateS3CloudflareStorageRequest:
    type: object
  storage.CreateS3DigitalOceanStorageRequest:
    type: object
  storage.CreateS3DreamhostStorageRequest:
    type: object
  storage.CreateS3HuaweiOBSStorageRequest:
    type: object
  storage.CreateS3IBMCOSStorageRequest:
    type: object
  storage.CreateS3IDriveStorageRequest:
    type: object
  storage.CreateS3IONOSStorageRequest:
    type: object
  storage.CreateS3LiaraStorageRequest:
    type: object
  storage.CreateS3LyveCloudStorageRequest:
    type: object
  storage.CreateS3MinioStorageRequest:
    type: object
  storage.CreateS3NeteaseStorageRequest:
    type: object
  storage.CreateS3OtherStorageRequest:
    type: object
  storage.CreateS3QiniuStorageRequest:
    type: object
  storage.CreateS3RackCorpStorageRequest:
    type: object
  storage.CreateS3ScalewayStorageRequest:
    type: object
  storage.CreateS3SeaweedFSStorageRequest:
    type: object
  storage.CreateS3StackPathStorageRequest:
    type: object
  storage.CreateS3StorjStorageRequest:
    type: object
  storage.CreateS3TencentCOSStorageRequest:
    type: object
  storage.CreateS3WasabiStorageRequest:
    type: object
  storage.CreateSeafileStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.SeafileConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateSftpStorageRequest:
    type: object
  storage.CreateSharefileStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.SharefileConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateSiaStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.SiaConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateSmbStorageRequest:
    type: object
  storage.CreateStorjExistingStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.StorjExistingConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateStorjNewStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.StorjNewConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateSugarsyncStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.SugarsyncConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateSwiftStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.SwiftConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateUptoboxStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.UptoboxConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateWebdavStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.WebdavConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateYandexStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.YandexConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateZohoStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.ZohoConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.DirEntry:
    properties:
      dirId:
        type: string
      hash:
        type: string
      isDir:
        type: boolean
      lastModified:
        type: string
      numItems:
        type: integer
      path:
        type: string
      size:
        type: integer
    type: object
  storage.FichierConfig:
    properties:
      apiKey:
        description: Your API Key, get it from https://1fichier.com/console/params.pl.
        type: string
      encoding:
        default: Slash,LtGt,DoubleQuote,SingleQuote,BackQuote,Dollar,BackSlash,Del,Ctl,LeftSpace,RightSpace,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      filePassword:
        description: If you want to download a shared file that is password protected,
          add this parameter.
        type: string
      folderPassword:
        description: If you want to list the files in a shared folder that is password
          protected, add this parameter.
        type: string
      sharedFolder:
        description: If you want to download a shared folder, add this parameter.
        type: string
    type: object
  storage.FilefabricConfig:
    properties:
      encoding:
        default: Slash,Del,Ctl,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      permanentToken:
        description: Permanent Authentication Token.
        type: string
      rootFolderId:
        description: ID of the root folder.
        type: string
      token:
        description: Session Token.
        type: string
      tokenExpiry:
        description: Token expiry time.
        type: string
      url:
        description: URL of the Enterprise File Fabric to connect to.
        example: https://storagemadeeasy.com
        type: string
      version:
        description: Version read from the file fabric.
        type: string
    type: object
  storage.GcsConfig:
    properties:
      anonymous:
        default: false
        description: Access public buckets and objects without credentials.
        type: boolean
      authUrl:
        description: Auth server URL.
        type: string
      bucketAcl:
        description: Access Control List for new buckets.
        example: authenticatedRead
        type: string
      bucketPolicyOnly:
        default: false
        description: Access checks should use bucket-level IAM policies.
        type: boolean
      clientId:
        description: OAuth Client Id.
        type: string
      clientSecret:
        description: OAuth Client Secret.
        type: string
      decompress:
        default: false
        description: If set this will decompress gzip encoded objects.
        type: boolean
      encoding:
        default: Slash,CrLf,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for the service.
        type: string
      envAuth:
        default: false
        description: Get GCP IAM credentials from runtime (environment variables or
          instance meta data if no env vars).
        example: false
        type: boolean
      location:
        description: Location for the newly created buckets.
        example: ""
        type: string
      noCheckBucket:
        default: false
        description: If set, don't attempt to check the bucket exists or create it.
        type: boolean
      objectAcl:
        description: Access Control List for new objects.
        example: authenticatedRead
        type: string
      projectNumber:
        description: Project number.
        type: string
      serviceAccountCredentials:
        description: Service Account Credentials JSON blob.
        type: string
      serviceAccountFile:
        description: Service Account Credentials JSON file path.
        type: string
      storageClass:
        description: The storage class to use when storing objects in Google Cloud
          Storage.
        example: ""
        type: string
      token:
        description: OAuth Access Token as a JSON blob.
        type: string
      tokenUrl:
        description: Token server url.
        type: string
    type: object
  storage.GphotosConfig:
    properties:
      authUrl:
        description: Auth server URL.
        type: string
      clientId:
        description: OAuth Client Id.
        type: string
      clientSecret:
        description: OAuth Client Secret.
        type: string
      encoding:
        default: Slash,CrLf,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      includeArchived:
        default: false
        description: Also view and download archived media.
        type: boolean
      readOnly:
        default: false
        description: Set to make the Google Photos backend read only.
        type: boolean
      readSize:
        default: false
        description: Set to read the size of media items.
        type: boolean
      startYear:
        default: 2000
        description: Year limits the photos to be downloaded to those which are uploaded
          after the given year.
        type: integer
      token:
        description: OAuth Access Token as a JSON blob.
        type: string
      tokenUrl:
        description: Token server url.
        type: string
    type: object
  storage.HdfsConfig:
    properties:
      dataTransferProtection:
        description: 'Kerberos data transfer protection: authentication|integrity|privacy.'
        example: privacy
        type: string
      encoding:
        default: Slash,Colon,Del,Ctl,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      namenode:
        description: Hadoop name node and port.
        type: string
      servicePrincipalName:
        description: Kerberos service principal name for the namenode.
        type: string
      username:
        description: Hadoop user name.
        example: root
        type: string
    type: object
  storage.HidriveConfig:
    properties:
      authUrl:
        description: Auth server URL.
        type: string
      chunkSize:
        default: 48Mi
        description: Chunksize for chunked uploads.
        type: string
      clientId:
        description: OAuth Client Id.
        type: string
      clientSecret:
        description: OAuth Client Secret.
        type: string
      disableFetchingMemberCount:
        default: false
        description: Do not fetch number of objects in directories unless it is absolutely
          necessary.
        type: boolean
      encoding:
        default: Slash,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        default: https://api.hidrive.strato.com/2.1
        description: Endpoint for the service.
        type: string
      rootPrefix:
        default: /
        description: The root/parent folder for all paths.
        example: /
        type: string
      scopeAccess:
        default: rw
        description: Access permissions that rclone should use when requesting access
          from HiDrive.
        example: rw
        type: string
      scopeRole:
        default: user
        description: User-level that rclone should use when requesting access from
          HiDrive.
        example: user
        type: string
      token:
        description: OAuth Access Token as a JSON blob.
        type: string
      tokenUrl:
        description: Token server url.
        type: string
      uploadConcurrency:
        default: 4
        description: Concurrency for chunked uploads.
        type: integer
      uploadCutoff:
        default: 96Mi
        description: Cutoff/Threshold for chunked uploads.
        type: string
    type: object
  storage.HttpConfig:
    properties:
      headers:
        description: Set HTTP headers for all transactions.
        items:
          type: string
        type: array
      noHead:
        default: false
        description: Don't use HEAD requests.
        type: boolean
      noSlash:
        default: false
        description: Set this if the site doesn't end directories with /.
        type: boolean
      url:
        description: URL of HTTP host to connect to.
        type: string
    type: object
  storage.JottacloudConfig:
    properties:
      encoding:
        default: Slash,LtGt,DoubleQuote,Colon,Question,Asterisk,Pipe,Del,Ctl,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      hardDelete:
        default: false
        description: Delete files permanently rather than putting them into the trash.
        type: boolean
      md5MemoryLimit:
        default: 10Mi
        description: Files bigger than this will be cached on disk to calculate the
          MD5 if required.
        type: string
      noVersions:
        default: false
        description: Avoid server side versioning by deleting files and recreating
          files instead of overwriting them.
        type: boolean
      trashedOnly:
        default: false
        description: Only show files that are in the trash.
        type: boolean
      uploadResumeLimit:
        default: 10Mi
        description: Files bigger than this can be resumed if the upload fail's.
        type: string
    type: object
  storage.KoofrDigistorageConfig:
    properties:
      encoding:
        default: Slash,BackSlash,Del,Ctl,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      mountid:
        description: Mount ID of the mount to use.
        type: string
      password:
        description: Your password for rclone (generate one at https://storage.rcs-rds.ro/app/admin/preferences/password).
        type: string
      setmtime:
        default: true
        description: Does the backend support setting modification time.
        type: boolean
      user:
        description: Your user name.
        type: string
    type: object
  storage.KoofrKoofrConfig:
    properties:
      encoding:
        default: Slash,BackSlash,Del,Ctl,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      mountid:
        description: Mount ID of the mount to use.
        type: string
      password:
        description: Your password for rclone (generate one at https://app.koofr.net/app/admin/preferences/password).
        type: string
      setmtime:
        default: true
        description: Does the backend support setting modification time.
        type: boolean
      user:
        description: Your user name.
        type: string
    type: object
  storage.KoofrOtherConfig:
    properties:
      encoding:
        default: Slash,BackSlash,Del,Ctl,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: The Koofr API endpoint to use.
        type: string
      mountid:
        description: Mount ID of the mount to use.
        type: string
      password:
        description: Your password for rclone (generate one at your service's settings
          page).
        type: string
      setmtime:
        default: true
        description: Does the backend support setting modification time.
        type: boolean
      user:
        description: Your user name.
        type: string
    type: object
  storage.LocalConfig:
    properties:
      caseInsensitive:
        default: false
        description: Force the filesystem to report itself as case insensitive.
        type: boolean
      caseSensitive:
        default: false
        description: Force the filesystem to report itself as case sensitive.
        type: boolean
      copyLinks:
        default: false
        description: Follow symlinks and copy the pointed to item.
        type: boolean
      encoding:
        default: Slash,Dot
        description: The encoding for the backend.
        type: string
      links:
        default: false
        description: Translate symlinks to/from regular files with a '.rclonelink'
          extension.
        type: boolean
      noCheckUpdated:
        default: false
        description: Don't check to see if the files change during upload.
        type: boolean
      noPreallocate:
        default: false
        description: Disable preallocation of disk space for transferred files.
        type: boolean
      noSetModtime:
        default: false
        description: Disable setting modtime.
        type: boolean
      noSparse:
        default: false
        description: Disable sparse files for multi-thread downloads.
        type: boolean
      nounc:
        default: false
        description: Disable UNC (long path names) conversion on Windows.
        example: true
        type: boolean
      oneFileSystem:
        default: false
        description: Don't cross filesystem boundaries (unix/macOS only).
        type: boolean
      skipLinks:
        default: false
        description: Don't warn about skipped symlinks.
        type: boolean
      unicodeNormalization:
        default: false
        description: Apply unicode NFC normalization to paths and filenames.
        type: boolean
      zeroSizeLinks:
        default: false
        description: Assume the Stat size of links is zero (and read them instead)
          (deprecated).
        type: boolean
    type: object
  storage.MailruConfig:
    properties:
      checkHash:
        default: true
        description: What should copy do if file checksum is mismatched or invalid.
        example: true
        type: boolean
      encoding:
        default: Slash,LtGt,DoubleQuote,Colon,Question,Asterisk,Pipe,BackSlash,Del,Ctl,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      pass:
        description: Password.
        type: string
      quirks:
        description: Comma separated list of internal maintenance flags.
        type: string
      speedupEnable:
        default: true
        description: Skip full upload if there is another file with same data hash.
        example: true
        type: boolean
      speedupFilePatterns:
        default: '*.mkv,*.avi,*.mp4,*.mp3,*.zip,*.gz,*.rar,*.pdf'
        description: Comma separated list of file name patterns eligible for speedup
          (put by hash).
        example: ""
        type: string
      speedupMaxDisk:
        default: 3Gi
        description: This option allows you to disable speedup (put by hash) for large
          files.
        example: "0"
        type: string
      speedupMaxMemory:
        default: 32Mi
        description: Files larger than the size given below will always be hashed
          on disk.
        example: "0"
        type: string
      user:
        description: User name (usually email).
        type: string
      userAgent:
        description: HTTP user agent used internally by client.
        type: string
    type: object
  storage.MegaConfig:
    properties:
      debug:
        default: false
        description: Output more debug from Mega.
        type: boolean
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      hardDelete:
        default: false
        description: Delete files permanently rather than putting them into the trash.
        type: boolean
      pass:
        description: Password.
        type: string
      useHttps:
        default: false
        description: Use HTTPS for transfers.
        type: boolean
      user:
        description: User name.
        type: string
    type: object
  storage.NetstorageConfig:
    properties:
      account:
        description: Set the NetStorage account name
        type: string
      host:
        description: Domain+path of NetStorage host to connect to.
        type: string
      protocol:
        default: https
        description: Select between HTTP or HTTPS protocol.
        example: http
        type: string
      secret:
        description: Set the NetStorage account secret/G2O key for authentication.
        type: string
    type: object
  storage.OpendriveConfig:
    properties:
      chunkSize:
        default: 10Mi
        description: Files will be uploaded in chunks this size.
        type: string
      encoding:
        default: Slash,LtGt,DoubleQuote,Colon,Question,Asterisk,Pipe,BackSlash,LeftSpace,LeftCrLfHtVt,RightSpace,RightCrLfHtVt,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      password:
        description: Password.
        type: string
      username:
        description: Username.
        type: string
    type: object
  storage.PcloudConfig:
    properties:
      authUrl:
        description: Auth server URL.
        type: string
      clientId:
        description: OAuth Client Id.
        type: string
      clientSecret:
        description: OAuth Client Secret.
        type: string
      encoding:
        default: Slash,BackSlash,Del,Ctl,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      hostname:
        default: api.pcloud.com
        description: Hostname to connect to.
        example: api.pcloud.com
        type: string
      password:
        description: Your pcloud password.
        type: string
      rootFolderId:
        default: d0
        description: Fill in for rclone to use a non root folder as its starting point.
        type: string
      token:
        description: OAuth Access Token as a JSON blob.
        type: string
      tokenUrl:
        description: Token server url.
        type: string
      username:
        description: Your pcloud username.
        type: string
    type: object
  storage.PremiumizemeConfig:
    properties:
      apiKey:
        description: API Key.
        type: string
      encoding:
        default: Slash,DoubleQuote,BackSlash,Del,Ctl,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
    type: object
  storage.PutioConfig:
    properties:
      encoding:
        default: Slash,BackSlash,Del,Ctl,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
    type: object
  storage.QingstorConfig:
    properties:
      accessKeyId:
        description: QingStor Access Key ID.
        type: string
      chunkSize:
        default: 4Mi
        description: Chunk size to use for uploading.
        type: string
      connectionRetries:
        default: 3
        description: Number of connection retries.
        type: integer
      encoding:
        default: Slash,Ctl,InvalidUtf8
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Enter an endpoint URL to connection QingStor API.
        type: string
      envAuth:
        default: false
        description: Get QingStor credentials from runtime.
        example: false
        type: boolean
      secretAccessKey:
        description: QingStor Secret Access Key (password).
        type: string
      uploadConcurrency:
        default: 1
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
      zone:
        description: Zone to connect to.
        example: pek3a
        type: string
    type: object
  storage.SeafileConfig:
    properties:
      2fa:
        default: false
        description: Two-factor authentication ('true' if the account has 2FA enabled).
        type: boolean
      authToken:
        description: Authentication token.
        type: string
      createLibrary:
        default: false
        description: Should rclone create a library if it doesn't exist.
        type: boolean
      encoding:
        default: Slash,DoubleQuote,BackSlash,Ctl,InvalidUtf8
        description: The encoding for the backend.
        type: string
      library:
        description: Name of the library.
        type: string
      libraryKey:
        description: Library password (for encrypted libraries only).
        type: string
      pass:
        description: Password.
        type: string
      url:
        description: URL of seafile host to connect to.
        example: https://cloud.seafile.com/
        type: string
      user:
        description: User name (usually email address).
        type: string
    type: object
  storage.SharefileConfig:
    properties:
      chunkSize:
        default: 64Mi
        description: Upload chunk size.
        type: string
      encoding:
        default: Slash,LtGt,DoubleQuote,Colon,Question,Asterisk,Pipe,BackSlash,Ctl,LeftSpace,LeftPeriod,RightSpace,RightPeriod,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for API calls.
        type: string
      rootFolderId:
        description: ID of the root folder.
        example: ""
        type: string
      uploadCutoff:
        default: 128Mi
        description: Cutoff for switching to multipart upload.
        type: string
    type: object
  storage.SiaConfig:
    properties:
      apiPassword:
        description: Sia Daemon API Password.
        type: string
      apiUrl:
        default: http://127.0.0.1:9980
        description: Sia daemon API URL, like http://sia.daemon.host:9980.
        type: string
      encoding:
        default: Slash,Question,Hash,Percent,Del,Ctl,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      userAgent:
        default: Sia-Agent
        description: Siad User Agent
        type: string
    type: object
  storage.StorjExistingConfig:
    properties:
      accessGrant:
        description: Access grant.
        type: string
    type: object
  storage.StorjNewConfig:
    properties:
      apiKey:
        description: API key.
        type: string
      passphrase:
        description: Encryption passphrase.
        type: string
      satelliteAddress:
        default: us1.storj.io
        description: Satellite address.
        example: us1.storj.io
        type: string
    type: object
  storage.SugarsyncConfig:
    properties:
      accessKeyId:
        description: Sugarsync Access Key ID.
        type: string
      appId:
        description: Sugarsync App ID.
        type: string
      authorization:
        description: Sugarsync authorization.
        type: string
      authorizationExpiry:
        description: Sugarsync authorization expiry.
        type: string
      deletedId:
        description: Sugarsync deleted folder id.
        type: string
      encoding:
        default: Slash,Ctl,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      hardDelete:
        default: false
        description: Permanently delete files if true
        type: boolean
      privateAccessKey:
        description: Sugarsync Private Access Key.
        type: string
      refreshToken:
        description: Sugarsync refresh token.
        type: string
      rootId:
        description: Sugarsync root id.
        type: string
      user:
        description: Sugarsync user.
        type: string
    type: object
  storage.SwiftConfig:
    properties:
      applicationCredentialId:
        description: Application Credential ID (OS_APPLICATION_CREDENTIAL_ID).
        type: string
      applicationCredentialName:
        description: Application Credential Name (OS_APPLICATION_CREDENTIAL_NAME).
        type: string
      applicationCredentialSecret:
        description: Application Credential Secret (OS_APPLICATION_CREDENTIAL_SECRET).
        type: string
      auth:
        description: Authentication URL for server (OS_AUTH_URL).
        example: https://auth.api.rackspacecloud.com/v1.0
        type: string
      authToken:
        description: Auth Token from alternate authentication - optional (OS_AUTH_TOKEN).
        type: string
      authVersion:
        default: 0
        description: AuthVersion - optional - set to (1,2,3) if your auth URL has
          no version (ST_AUTH_VERSION).
        type: integer
      chunkSize:
        default: 5Gi
        description: Above this size files will be chunked into a _segments container.
        type: string
      domain:
        description: User domain - optional (v3 auth) (OS_USER_DOMAIN_NAME)
        type: string
      encoding:
        default: Slash,InvalidUtf8
        description: The encoding for the backend.
        type: string
      endpointType:
        default: public
        description: Endpoint type to choose from the service catalogue (OS_ENDPOINT_TYPE).
        example: public
        type: string
      envAuth:
        default: false
        description: Get swift credentials from environment variables in standard
          OpenStack form.
        example: false
        type: boolean
      key:
        description: API key or password (OS_PASSWORD).
        type: string
      leavePartsOnError:
        default: false
        description: If true avoid calling abort upload on a failure.
        type: boolean
      noChunk:
        default: false
        description: Don't chunk files during streaming upload.
        type: boolean
      noLargeObjects:
        default: false
        description: Disable support for static and dynamic large objects
        type: boolean
      region:
        description: Region name - optional (OS_REGION_NAME).
        type: string
      storagePolicy:
        description: The storage policy to use when creating a new container.
        example: ""
        type: string
      storageUrl:
        description: Storage URL - optional (OS_STORAGE_URL).
        type: string
      tenant:
        description: Tenant name - optional for v1 auth, this or tenant_id required
          otherwise (OS_TENANT_NAME or OS_PROJECT_NAME).
        type: string
      tenantDomain:
        description: Tenant domain - optional (v3 auth) (OS_PROJECT_DOMAIN_NAME).
        type: string
      tenantId:
        description: Tenant ID - optional for v1 auth, this or tenant required otherwise
          (OS_TENANT_ID).
        type: string
      user:
        description: User name to log in (OS_USERNAME).
        type: string
      userId:
        description: User ID to log in - optional - most swift systems use user and
          leave this blank (v3 auth) (OS_USER_ID).
        type: string
    type: object
  storage.UptoboxConfig:
    properties:
      accessToken:
        description: Your access token.
        type: string
      encoding:
        default: Slash,LtGt,DoubleQuote,BackQuote,Del,Ctl,LeftSpace,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
    type: object
  storage.WebdavConfig:
    properties:
      bearerToken:
        description: Bearer token instead of user/pass (e.g. a Macaroon).
        type: string
      bearerTokenCommand:
        description: Command to run to get a bearer token.
        type: string
      encoding:
        description: The encoding for the backend.
        type: string
      headers:
        description: Set HTTP headers for all transactions.
        items:
          type: string
        type: array
      pass:
        description: Password.
        type: string
      url:
        description: URL of http host to connect to.
        type: string
      user:
        description: User name.
        type: string
      vendor:
        description: Name of the WebDAV site/service/software you are using.
        example: nextcloud
        type: string
    type: object
  storage.YandexConfig:
    properties:
      authUrl:
        description: Auth server URL.
        type: string
      clientId:
        description: OAuth Client Id.
        type: string
      clientSecret:
        description: OAuth Client Secret.
        type: string
      encoding:
        default: Slash,Del,Ctl,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      hardDelete:
        default: false
        description: Delete files permanently rather than putting them into the trash.
        type: boolean
      token:
        description: OAuth Access Token as a JSON blob.
        type: string
      tokenUrl:
        description: Token server url.
        type: string
    type: object
  storage.ZohoConfig:
    properties:
      authUrl:
        description: Auth server URL.
        type: string
      clientId:
        description: OAuth Client Id.
        type: string
      clientSecret:
        description: OAuth Client Secret.
        type: string
      encoding:
        default: Del,Ctl,InvalidUtf8
        description: The encoding for the backend.
        type: string
      region:
        description: Zoho region to connect to.
        example: com
        type: string
      token:
        description: OAuth Access Token as a JSON blob.
        type: string
      tokenUrl:
        description: Token server url.
        type: string
    type: object
  store.PieceReader:
    type: object
  wallet.ImportRequest:
    properties:
      privateKey:
        description: This is the exported private key from lotus wallet export
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:9090
info:
  contact:
    name: Xinan Xu
    url: https://github.com/data-preservation-programs/singularity/issues
  description: This is the API for Singularity, a tool for large-scale clients with
    PB-scale data onboarding to Filecoin network.
  license:
    name: MIT + Apache 2.0
    url: https://github.com/data-preservation-programs/singularity/blob/main/LICENSE
  title: Singularity API
  version: beta
paths:
  /deal:
    post:
      consumes:
      - application/json
      description: List all deals
      parameters:
      - description: ListDealRequest
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/deal.ListDealRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Deal'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: List all deals
      tags:
      - Deal
  /piece/{id}/metadata:
    get:
      description: Get metadata for a piece for how it may be reassembled from the
        data source
      parameters:
      - description: Piece CID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.PieceReader'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get metadata for a piece
      tags:
      - Piece
  /preparation:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Preparation'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: List all preparations
      tags:
      - Preparation
    post:
      consumes:
      - application/json
      parameters:
      - description: Create Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dataprep.CreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Preparation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create a new preparation
      tags:
      - Preparation
  /preparation/{id}:
    get:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dataprep.SourceStatus'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get the status of a preparation
      tags:
      - Preparation
  /preparation/{id}/output/{name}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID
        in: path
        name: id
        required: true
        type: integer
      - description: Output storage name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Preparation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Detach an output storage from a preparation
      tags:
      - Preparation
    post:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID
        in: path
        name: id
        required: true
        type: integer
      - description: Output storage name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Preparation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Attach an output storage with a preparation
      tags:
      - Preparation
  /preparation/{id}/piece:
    get:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dataprep.PieceList'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: List all prepared pieces for a preparation
      tags:
      - Piece
    post:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID
        in: path
        name: id
        required: true
        type: integer
      - description: Piece information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dataprep.AddPieceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Car'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Add a piece to a preparation
      tags:
      - Piece
  /preparation/{id}/source/{name}:
    post:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID
        in: path
        name: id
        required: true
        type: integer
      - description: Source storage name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Preparation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Attach a source storage with a preparation
      tags:
      - Preparation
  /preparation/{id}/source/{name}/explore/{path}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID
        in: path
        name: id
        required: true
        type: integer
      - description: Source storage name
        in: path
        name: name
        required: true
        type: string
      - description: Directory path
        in: path
        name: path
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dataprep.ExploreResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Explore a directory in a prepared source storage
      tags:
      - Preparation
  /preparation/{id}/source/{name}/pause-daggen:
    post:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID
        in: path
        name: id
        required: true
        type: integer
      - description: Storage name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Job'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Pause an ongoing DAG generation job
      tags:
      - Job
  /preparation/{id}/source/{name}/pause-pack:
    post:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID
        in: path
        name: id
        required: true
        type: integer
      - description: Storage name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Job'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Pause all packing job
      tags:
      - Job
  /preparation/{id}/source/{name}/pause-pack/{job_id}:
    post:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID
        in: path
        name: id
        required: true
        type: integer
      - description: Storage name
        in: path
        name: name
        required: true
        type: string
      - description: Pack Job ID
        in: path
        name: job_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Job'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Pause a specific packing job
      tags:
      - Job
  /preparation/{id}/source/{name}/pause-scan:
    post:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID
        in: path
        name: id
        required: true
        type: integer
      - description: Storage name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Job'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Pause an ongoing scanning job
      tags:
      - Job
  /preparation/{id}/source/{name}/start-daggen:
    post:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID
        in: path
        name: id
        required: true
        type: integer
      - description: Storage name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Job'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Start a new DAG generation job
      tags:
      - Job
  /preparation/{id}/source/{name}/start-pack:
    post:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID
        in: path
        name: id
        required: true
        type: integer
      - description: Storage name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Job'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Start or restart all packing job
      tags:
      - Job
  /preparation/{id}/source/{name}/start-pack/{job_id}:
    post:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID
        in: path
        name: id
        required: true
        type: integer
      - description: Storage name
        in: path
        name: name
        required: true
        type: string
      - description: Pack Job ID
        in: path
        name: job_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Job'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Start or restart a specific packing job
      tags:
      - Job
  /preparation/{id}/source/{name}/start-scan:
    post:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID
        in: path
        name: id
        required: true
        type: integer
      - description: Storage name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Job'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Start a new scanning job
      tags:
      - Job
  /preparation/{id}/wallet:
    post:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Wallet'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: List all wallets of a preparation.
      tags:
      - Wallet Association
  /preparation/{id}/wallet/{wallet}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID
        in: path
        name: id
        required: true
        type: integer
      - description: Wallet Address
        in: path
        name: wallet
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Preparation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Detach a new wallet from a preparation
      tags:
      - Wallet Association
    post:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID
        in: path
        name: id
        required: true
        type: integer
      - description: Wallet Address
        in: path
        name: wallet
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Preparation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Attach a new wallet with a preparation
      tags:
      - Wallet Association
  /schedule:
    post:
      consumes:
      - application/json
      description: Create a new schedule
      parameters:
      - description: CreateRequest
        in: body
        name: schedule
        required: true
        schema:
          $ref: '#/definitions/schedule.CreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Schedule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create a new schedule
      tags:
      - Deal Schedule
  /schedule/{id}/pause:
    post:
      parameters:
      - description: Schedule ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Schedule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Pause a specific schedule
      tags:
      - Deal Schedule
  /schedule/{id}/resume:
    post:
      parameters:
      - description: Schedule ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Schedule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Resume a specific schedule
      tags:
      - Deal Schedule
  /schedules:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Schedule'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: List all deal making schedules
      tags:
      - Deal Schedule
  /send_deal:
    post:
      consumes:
      - application/json
      description: Send a manual deal proposal
      parameters:
      - description: Proposal
        in: body
        name: proposal
        required: true
        schema:
          $ref: '#/definitions/deal.Proposal'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Deal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Send a manual deal proposal
      tags:
      - Deal
  /storage:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Storage'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: List all storages
      tags:
      - Storage
  /storage/{name}:
    delete:
      parameters:
      - description: Name
        in: path
        name: name
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Remove a storage
      tags:
      - Storage
    patch:
      consumes:
      - application/json
      parameters:
      - description: Name
        in: path
        name: name
        required: true
        type: string
      - description: Configuration
        in: body
        name: config
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Update a storage connection
      tags:
      - Storage
  /storage/{name}/explore/{path}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Storage name
        in: path
        name: name
        required: true
        type: string
      - description: Path in the storage system to explore
        in: path
        name: path
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/storage.DirEntry'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Explore directory entries in a storage system
      tags:
      - Storage
  /storage/{storageType}:
    post:
      consumes:
      - application/json
      parameters:
      - description: Storage type
        in: path
        name: storageType
        required: true
        type: string
      - description: Storage configuration
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/storage.CreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create a new storage
      tags:
      - Storage
  /storage/acd:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateAcdStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Acd storage
      tags:
      - Storage
  /storage/azureblob:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateAzureblobStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Azureblob storage
      tags:
      - Storage
  /storage/b2:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateB2StorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create B2 storage
      tags:
      - Storage
  /storage/box:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateBoxStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Box storage
      tags:
      - Storage
  /storage/drive:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateDriveStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Drive storage
      tags:
      - Storage
  /storage/dropbox:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateDropboxStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Dropbox storage
      tags:
      - Storage
  /storage/fichier:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateFichierStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Fichier storage
      tags:
      - Storage
  /storage/filefabric:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateFilefabricStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Filefabric storage
      tags:
      - Storage
  /storage/ftp:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateFtpStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Ftp storage
      tags:
      - Storage
  /storage/gcs:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateGcsStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Gcs storage
      tags:
      - Storage
  /storage/gphotos:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateGphotosStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Gphotos storage
      tags:
      - Storage
  /storage/hdfs:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateHdfsStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Hdfs storage
      tags:
      - Storage
  /storage/hidrive:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateHidriveStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Hidrive storage
      tags:
      - Storage
  /storage/http:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateHttpStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Http storage
      tags:
      - Storage
  /storage/internetarchive:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateInternetarchiveStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Internetarchive storage
      tags:
      - Storage
  /storage/jottacloud:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateJottacloudStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Jottacloud storage
      tags:
      - Storage
  /storage/koofr/digistorage:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateKoofrDigistorageStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Koofr storage with digistorage - Digi Storage, https://storage.rcs-rds.ro/
      tags:
      - Storage
  /storage/koofr/koofr:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateKoofrKoofrStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Koofr storage with koofr - Koofr, https://app.koofr.net/
      tags:
      - Storage
  /storage/koofr/other:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateKoofrOtherStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Koofr storage with other - Any other Koofr API compatible storage
        service
      tags:
      - Storage
  /storage/local:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateLocalStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Local storage
      tags:
      - Storage
  /storage/mailru:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateMailruStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Mailru storage
      tags:
      - Storage
  /storage/mega:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateMegaStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Mega storage
      tags:
      - Storage
  /storage/netstorage:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateNetstorageStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Netstorage storage
      tags:
      - Storage
  /storage/onedrive:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateOnedriveStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Onedrive storage
      tags:
      - Storage
  /storage/oos/env_auth:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateOosEnv_authStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Oos storage with env_auth - automatically pickup the credentials
        from runtime(env), first one to provide auth wins
      tags:
      - Storage
  /storage/oos/instance_principal_auth:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateOosInstance_principal_authStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Oos storage with instance_principal_auth - use instance principals
        to authorize an instance to make API calls.
      tags:
      - Storage
  /storage/oos/no_auth:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateOosNo_authStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Oos storage with no_auth - no credentials needed, this is typically
        for reading public buckets
      tags:
      - Storage
  /storage/oos/resource_principal_auth:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateOosResource_principal_authStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Oos storage with resource_principal_auth - use resource principals
        to make API calls
      tags:
      - Storage
  /storage/oos/user_principal_auth:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateOosUser_principal_authStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Oos storage with user_principal_auth - use an OCI user and an
        API key for authentication.
      tags:
      - Storage
  /storage/opendrive:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateOpendriveStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Opendrive storage
      tags:
      - Storage
  /storage/pcloud:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreatePcloudStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Pcloud storage
      tags:
      - Storage
  /storage/premiumizeme:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreatePremiumizemeStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Premiumizeme storage
      tags:
      - Storage
  /storage/putio:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreatePutioStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Putio storage
      tags:
      - Storage
  /storage/qingstor:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateQingstorStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Qingstor storage
      tags:
      - Storage
  /storage/s3/alibaba:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3AlibabaStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with Alibaba - Alibaba Cloud Object Storage System
        (OSS) formerly Aliyun
      tags:
      - Storage
  /storage/s3/arvancloud:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3ArvanCloudStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with ArvanCloud - Arvan Cloud Object Storage (AOS)
      tags:
      - Storage
  /storage/s3/aws:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3AWSStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with AWS - Amazon Web Services (AWS) S3
      tags:
      - Storage
  /storage/s3/ceph:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3CephStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with Ceph - Ceph Object Storage
      tags:
      - Storage
  /storage/s3/chinamobile:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3ChinaMobileStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with ChinaMobile - China Mobile Ecloud Elastic Object
        Storage (EOS)
      tags:
      - Storage
  /storage/s3/cloudflare:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3CloudflareStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with Cloudflare - Cloudflare R2 Storage
      tags:
      - Storage
  /storage/s3/digitalocean:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3DigitalOceanStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with DigitalOcean - DigitalOcean Spaces
      tags:
      - Storage
  /storage/s3/dreamhost:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3DreamhostStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with Dreamhost - Dreamhost DreamObjects
      tags:
      - Storage
  /storage/s3/huaweiobs:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3HuaweiOBSStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with HuaweiOBS - Huawei Object Storage Service
      tags:
      - Storage
  /storage/s3/ibmcos:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3IBMCOSStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with IBMCOS - IBM COS S3
      tags:
      - Storage
  /storage/s3/idrive:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3IDriveStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with IDrive - IDrive e2
      tags:
      - Storage
  /storage/s3/ionos:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3IONOSStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with IONOS - IONOS Cloud
      tags:
      - Storage
  /storage/s3/liara:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3LiaraStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with Liara - Liara Object Storage
      tags:
      - Storage
  /storage/s3/lyvecloud:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3LyveCloudStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with LyveCloud - Seagate Lyve Cloud
      tags:
      - Storage
  /storage/s3/minio:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3MinioStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with Minio - Minio Object Storage
      tags:
      - Storage
  /storage/s3/netease:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3NeteaseStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with Netease - Netease Object Storage (NOS)
      tags:
      - Storage
  /storage/s3/other:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3OtherStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with Other - Any other S3 compatible provider
      tags:
      - Storage
  /storage/s3/qiniu:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3QiniuStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with Qiniu - Qiniu Object Storage (Kodo)
      tags:
      - Storage
  /storage/s3/rackcorp:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3RackCorpStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with RackCorp - RackCorp Object Storage
      tags:
      - Storage
  /storage/s3/scaleway:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3ScalewayStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with Scaleway - Scaleway Object Storage
      tags:
      - Storage
  /storage/s3/seaweedfs:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3SeaweedFSStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with SeaweedFS - SeaweedFS S3
      tags:
      - Storage
  /storage/s3/stackpath:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3StackPathStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with StackPath - StackPath Object Storage
      tags:
      - Storage
  /storage/s3/storj:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3StorjStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with Storj - Storj (S3 Compatible Gateway)
      tags:
      - Storage
  /storage/s3/tencentcos:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3TencentCOSStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with TencentCOS - Tencent Cloud Object Storage (COS)
      tags:
      - Storage
  /storage/s3/wasabi:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3WasabiStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with Wasabi - Wasabi Object Storage
      tags:
      - Storage
  /storage/seafile:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateSeafileStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Seafile storage
      tags:
      - Storage
  /storage/sftp:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateSftpStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Sftp storage
      tags:
      - Storage
  /storage/sharefile:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateSharefileStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Sharefile storage
      tags:
      - Storage
  /storage/sia:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateSiaStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Sia storage
      tags:
      - Storage
  /storage/smb:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateSmbStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Smb storage
      tags:
      - Storage
  /storage/storj/existing:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateStorjExistingStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Storj storage with existing - Use an existing access grant.
      tags:
      - Storage
  /storage/storj/new:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateStorjNewStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Storj storage with new - Create a new access grant from satellite
        address, API key, and passphrase.
      tags:
      - Storage
  /storage/sugarsync:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateSugarsyncStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Sugarsync storage
      tags:
      - Storage
  /storage/swift:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateSwiftStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Swift storage
      tags:
      - Storage
  /storage/uptobox:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateUptoboxStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Uptobox storage
      tags:
      - Storage
  /storage/webdav:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateWebdavStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Webdav storage
      tags:
      - Storage
  /storage/yandex:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateYandexStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Yandex storage
      tags:
      - Storage
  /storage/zoho:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateZohoStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Zoho storage
      tags:
      - Storage
  /wallet:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Wallet'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: List all imported wallets
      tags:
      - Wallet
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/wallet.ImportRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Wallet'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Import a private key
      tags:
      - Wallet
  /wallet/{address}:
    delete:
      parameters:
      - description: Address
        in: path
        name: address
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Remove a wallet
      tags:
      - Wallet
swagger: "2.0"
