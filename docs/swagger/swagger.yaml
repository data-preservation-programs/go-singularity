basePath: /api
definitions:
  api.HTTPError:
    properties:
      err:
        type: string
    type: object
  dataprep.AddPieceRequest:
    properties:
      filePath:
        description: Path to the CAR file, used to determine the size of the file
          and root CID
        type: string
      pieceCid:
        description: CID of the piece
        type: string
      pieceSize:
        description: Size of the piece
        type: string
      rootCid:
        description: Root CID of the CAR file, if not provided, will be determined
          by the CAR file header. Used to populate the label field of storage deal
        type: string
    type: object
  dataprep.CreateRequest:
    properties:
      deleteAfterExport:
        default: false
        description: Whether to delete the source files after export
        type: boolean
      maxSize:
        default: 31.5GiB
        description: Maximum size of the CAR files to be created
        type: string
      name:
        description: Name of the preparation
        type: string
      outputStorages:
        description: Name of Output storage systems to be used for the output
        items:
          type: string
        type: array
      pieceSize:
        description: Target piece size of the CAR files used for piece commitment
          calculation
        type: string
      sourceStorages:
        description: Name of Source storage systems to be used for the source
        items:
          type: string
        type: array
    required:
    - maxSize
    - name
    - sourceStorages
    type: object
  dataprep.DirEntry:
    properties:
      cid:
        type: string
      fileVersions:
        items:
          $ref: '#/definitions/dataprep.Version'
        type: array
      isDir:
        type: boolean
      path:
        type: string
    type: object
  dataprep.ExploreResult:
    properties:
      cid:
        type: string
      path:
        type: string
      subEntries:
        items:
          $ref: '#/definitions/dataprep.DirEntry'
        type: array
    type: object
  dataprep.PieceList:
    properties:
      attachmentId:
        type: integer
      pieces:
        items:
          $ref: '#/definitions/model.Car'
        type: array
      source:
        $ref: '#/definitions/model.Storage'
      storageId:
        type: integer
    type: object
  dataprep.Version:
    properties:
      cid:
        type: string
      hash:
        type: string
      id:
        type: integer
      lastModified:
        type: string
      size:
        type: integer
    type: object
  deal.ListDealRequest:
    properties:
      preparations:
        description: preparation ID or name filter
        items:
          type: string
        type: array
      providers:
        description: provider filter
        items:
          type: string
        type: array
      schedules:
        description: schedule id filter
        items:
          type: integer
        type: array
      sources:
        description: source ID or name filter
        items:
          type: string
        type: array
      states:
        description: state filter
        items:
          $ref: '#/definitions/model.DealState'
        type: array
    type: object
  deal.Proposal:
    properties:
      clientAddress:
        description: Client address
        type: string
      duration:
        default: 12740h
        description: Duration in epoch or in duration format, i.e. 1500000, 2400h
        type: string
      fileSize:
        description: File size in bytes for boost to fetch the CAR file
        type: integer
      httpHeaders:
        description: http headers to be passed with the request (i.e. key=value)
        items:
          type: string
        type: array
      ipni:
        default: true
        description: Whether the deal should be IPNI
        type: boolean
      keepUnsealed:
        default: true
        description: Whether the deal should be kept unsealed
        type: boolean
      pieceCid:
        description: Piece CID
        type: string
      pieceSize:
        description: Piece size
        type: string
      pricePerDeal:
        default: 0
        description: Price in FIL per deal
        type: number
      pricePerGb:
        default: 0
        description: Price in FIL  per GiB
        type: number
      pricePerGbEpoch:
        default: 0
        description: Price in FIL per GiB per epoch
        type: number
      providerId:
        description: Provider ID
        type: string
      rootCid:
        default: bafkqaaa
        description: Root CID that is required as part of the deal proposal, if empty,
          will be set to empty CID
        type: string
      startDelay:
        default: 72h
        description: Deal start delay in epoch or in duration format, i.e. 1000, 72h
        type: string
      urlTemplate:
        description: URL template with PIECE_CID placeholder for boost to fetch the
          CAR file, i.e. http://127.0.0.1/piece/{PIECE_CID}.car
        type: string
      verified:
        default: true
        description: Whether the deal should be verified
        type: boolean
    type: object
  file.Info:
    properties:
      path:
        description: Path to the new file, relative to the source
        type: string
    type: object
  job.SourceStatus:
    properties:
      attachmentId:
        type: integer
      jobs:
        items:
          $ref: '#/definitions/model.Job'
        type: array
      source:
        $ref: '#/definitions/model.Storage'
      storageId:
        type: integer
    type: object
  model.Car:
    properties:
      attachmentId:
        type: integer
      createdAt:
        type: string
      fileSize:
        type: integer
      id:
        type: integer
      jobId:
        type: integer
      pieceCid:
        type: string
      pieceSize:
        type: integer
      preparationId:
        description: Association
        type: integer
      rootCid:
        type: string
      storageId:
        type: integer
      storagePath:
        description: StoragePath is the path to the CAR file inside the storage. If
          the StorageID is nil but StoragePath is not empty, it means the CAR file
          is stored at the local absolute path.
        type: string
    type: object
  model.ConfigMap:
    additionalProperties:
      type: string
    type: object
  model.Deal:
    properties:
      clientId:
        type: string
      createdAt:
        type: string
      dealId:
        type: integer
      endEpoch:
        type: integer
      errorMessage:
        type: string
      id:
        type: integer
      label:
        type: string
      pieceCid:
        type: string
      pieceSize:
        type: integer
      price:
        type: string
      proposalId:
        type: string
      provider:
        type: string
      scheduleId:
        description: Associations
        type: integer
      sectorStartEpoch:
        type: integer
      startEpoch:
        type: integer
      state:
        $ref: '#/definitions/model.DealState'
      updatedAt:
        type: string
      verified:
        type: boolean
    type: object
  model.DealState:
    enum:
    - proposed
    - published
    - active
    - expired
    - proposal_expired
    - rejected
    - slashed
    - error
    type: string
    x-enum-varnames:
    - DealProposed
    - DealPublished
    - DealActive
    - DealExpired
    - DealProposalExpired
    - DealRejected
    - DealSlashed
    - DealErrored
  model.File:
    properties:
      attachmentId:
        description: Associations
        type: integer
      cid:
        description: CID is the CID of the file.
        type: string
      directoryId:
        type: integer
      fileRanges:
        items:
          $ref: '#/definitions/model.FileRange'
        type: array
      hash:
        description: Hash is the hash of the file.
        type: string
      id:
        type: integer
      lastModifiedNano:
        type: integer
      path:
        description: Path is the relative path to the file inside the storage.
        type: string
      size:
        description: Size is the size of the file in bytes.
        type: integer
    type: object
  model.FileRange:
    properties:
      cid:
        description: CID is the CID of the range.
        type: string
      fileId:
        type: integer
      id:
        type: integer
      jobId:
        description: Associations
        type: integer
      length:
        description: Length is the length of the range in bytes.
        type: integer
      offset:
        description: Offset is the offset of the range inside the file.
        type: integer
    type: object
  model.Job:
    properties:
      attachmentId:
        type: integer
      errorMessage:
        type: string
      errorStackTrace:
        type: string
      id:
        type: integer
      state:
        $ref: '#/definitions/model.JobState'
      type:
        $ref: '#/definitions/model.JobType'
      workerId:
        description: Associations
        type: string
    type: object
  model.JobState:
    enum:
    - created
    - ready
    - paused
    - processing
    - complete
    - error
    type: string
    x-enum-varnames:
    - Created
    - Ready
    - Paused
    - Processing
    - Complete
    - Error
  model.JobType:
    enum:
    - scan
    - pack
    - daggen
    type: string
    x-enum-varnames:
    - Scan
    - Pack
    - DagGen
  model.Preparation:
    properties:
      createdAt:
        type: string
      deleteAfterExport:
        description: DeleteAfterExport is a flag that indicates whether the source
          files should be deleted after export.
        type: boolean
      id:
        type: integer
      maxSize:
        type: integer
      name:
        type: string
      pieceSize:
        type: integer
      updatedAt:
        type: string
    type: object
  model.Schedule:
    properties:
      allowedPieceCids:
        items:
          type: string
        type: array
      announceToIpni:
        type: boolean
      createdAt:
        type: string
      duration:
        type: integer
      errorMessage:
        type: string
      httpHeaders:
        items:
          type: string
        type: array
      id:
        type: integer
      keepUnsealed:
        type: boolean
      maxPendingDealNumber:
        type: integer
      maxPendingDealSize:
        type: integer
      notes:
        type: string
      preparationId:
        description: Associations
        type: integer
      pricePerDeal:
        type: number
      pricePerGb:
        type: number
      pricePerGbEpoch:
        type: number
      provider:
        type: string
      scheduleCron:
        type: string
      scheduleCronPerpetual:
        type: boolean
      scheduleDealNumber:
        type: integer
      scheduleDealSize:
        type: integer
      startDelay:
        type: integer
      state:
        $ref: '#/definitions/model.ScheduleState'
      totalDealNumber:
        type: integer
      totalDealSize:
        type: integer
      updatedAt:
        type: string
      urlTemplate:
        type: string
      verified:
        type: boolean
    type: object
  model.ScheduleState:
    enum:
    - active
    - paused
    - error
    - completed
    type: string
    x-enum-varnames:
    - ScheduleActive
    - SchedulePaused
    - ScheduleError
    - ScheduleCompleted
  model.Storage:
    properties:
      config:
        allOf:
        - $ref: '#/definitions/model.ConfigMap'
        description: Config is a map of key-value pairs that can be used to store
          RClone options.
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      path:
        description: Path is the path to the storage root.
        type: string
      type:
        type: string
      updatedAt:
        type: string
    type: object
  model.Wallet:
    properties:
      address:
        description: Address is the Filecoin full address of the wallet
        type: string
      id:
        description: ID is the short ID of the wallet
        type: string
      privateKey:
        description: PrivateKey is the private key of the wallet
        type: string
    type: object
  schedule.CreateRequest:
    properties:
      allowedPieceCids:
        description: Allowed piece CIDs in this schedule
        items:
          type: string
        type: array
      duration:
        default: 12840h
        description: Duration in epoch or in duration format, i.e. 1500000, 2400h
        type: string
      httpHeaders:
        description: http headers to be passed with the request (i.e. key=value)
        items:
          type: string
        type: array
      ipni:
        default: true
        description: Whether the deal should be IPNI
        type: boolean
      keepUnsealed:
        default: true
        description: Whether the deal should be kept unsealed
        type: boolean
      maxPendingDealNumber:
        description: Max pending deal number
        type: integer
      maxPendingDealSize:
        description: Max pending deal size in human readable format, i.e. 100 TiB
        type: string
      notes:
        description: Notes
        type: string
      preparation:
        description: Preparation ID or name
        type: string
      pricePerDeal:
        default: 0
        description: Price in FIL per deal
        type: number
      pricePerGb:
        default: 0
        description: Price in FIL  per GiB
        type: number
      pricePerGbEpoch:
        default: 0
        description: Price in FIL per GiB per epoch
        type: number
      provider:
        description: Provider
        type: string
      scheduleCron:
        description: Schedule cron patter
        type: string
      scheduleCronPerpetual:
        description: Whether a cron schedule should run in definitely
        type: boolean
      scheduleDealNumber:
        description: Number of deals per scheduled time
        type: integer
      scheduleDealSize:
        description: Size of deals per schedule trigger in human readable format,
          i.e. 100 TiB
        type: string
      startDelay:
        default: 72h
        description: Deal start delay in epoch or in duration format, i.e. 1000, 72h
        type: string
      totalDealNumber:
        description: Total number of deals
        type: integer
      totalDealSize:
        description: Total size of deals in human readable format, i.e. 100 TiB
        type: string
      urlTemplate:
        description: URL template with PIECE_CID placeholder for boost to fetch the
          CAR file, i.e. http://127.0.0.1/piece/{PIECE_CID}.car
        type: string
      verified:
        default: true
        description: Whether the deal should be verified
        type: boolean
    type: object
  storage.AcdConfig:
    properties:
      authUrl:
        description: Auth server URL.
        type: string
      checkpoint:
        description: Checkpoint for internal polling (debug).
        type: string
      clientId:
        description: OAuth Client Id.
        type: string
      clientSecret:
        description: OAuth Client Secret.
        type: string
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      templinkThreshold:
        default: 9Gi
        description: Files >= this size will be downloaded via their tempLink.
        type: string
      token:
        description: OAuth Access Token as a JSON blob.
        type: string
      tokenUrl:
        description: Token server url.
        type: string
      uploadWaitPerGb:
        default: 3m0s
        description: Additional time per GiB to wait after a failed complete upload
          to see if it appears.
        type: string
    type: object
  storage.AzureblobConfig:
    properties:
      accessTier:
        description: 'Access tier of blob: hot, cool or archive.'
        type: string
      account:
        description: Azure Storage Account Name.
        type: string
      archiveTierDelete:
        default: false
        description: Delete archive tier blobs before overwriting.
        type: boolean
      chunkSize:
        default: 4Mi
        description: Upload chunk size.
        type: string
      clientCertificatePassword:
        description: Password for the certificate file (optional).
        type: string
      clientCertificatePath:
        description: Path to a PEM or PKCS12 certificate file including the private
          key.
        type: string
      clientId:
        description: The ID of the client in use.
        type: string
      clientSecret:
        description: One of the service principal's client secrets
        type: string
      clientSendCertificateChain:
        default: false
        description: Send the certificate chain when using certificate auth.
        type: boolean
      disableChecksum:
        default: false
        description: Don't store MD5 checksum with object metadata.
        type: boolean
      encoding:
        default: Slash,BackSlash,Del,Ctl,RightPeriod,InvalidUtf8
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for the service.
        type: string
      envAuth:
        default: false
        description: Read credentials from runtime (environment variables, CLI or
          MSI).
        type: boolean
      key:
        description: Storage Account Shared Key.
        type: string
      listChunk:
        default: 5000
        description: Size of blob list.
        type: integer
      memoryPoolFlushTime:
        default: 1m0s
        description: How often internal memory buffer pools will be flushed.
        type: string
      memoryPoolUseMmap:
        default: false
        description: Whether to use mmap buffers in internal memory pool.
        type: boolean
      msiClientId:
        description: Object ID of the user-assigned MSI to use, if any.
        type: string
      msiMiResId:
        description: Azure resource ID of the user-assigned MSI to use, if any.
        type: string
      msiObjectId:
        description: Object ID of the user-assigned MSI to use, if any.
        type: string
      noCheckContainer:
        default: false
        description: If set, don't attempt to check the container exists or create
          it.
        type: boolean
      noHeadObject:
        default: false
        description: If set, do not do HEAD before GET when getting objects.
        type: boolean
      password:
        description: The user's password
        type: string
      publicAccess:
        description: 'Public access level of a container: blob or container.'
        example: ""
        type: string
      sasUrl:
        description: SAS URL for container level access only.
        type: string
      servicePrincipalFile:
        description: Path to file containing credentials for use with a service principal.
        type: string
      tenant:
        description: ID of the service principal's tenant. Also called its directory
          ID.
        type: string
      uploadConcurrency:
        default: 16
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        description: Cutoff for switching to chunked upload (<= 256 MiB) (deprecated).
        type: string
      useEmulator:
        default: false
        description: Uses local storage emulator if provided as 'true'.
        type: boolean
      useMsi:
        default: false
        description: Use a managed service identity to authenticate (only works in
          Azure).
        type: boolean
      username:
        description: User name (usually an email address)
        type: string
    type: object
  storage.B2Config:
    properties:
      account:
        description: Account ID or Application Key ID.
        type: string
      chunkSize:
        default: 96Mi
        description: Upload chunk size.
        type: string
      copyCutoff:
        default: 4Gi
        description: Cutoff for switching to multipart copy.
        type: string
      disableChecksum:
        default: false
        description: Disable checksums for large (> upload cutoff) files.
        type: boolean
      downloadAuthDuration:
        default: 1w
        description: Time before the authorization token will expire in s or suffix
          ms|s|m|h|d.
        type: string
      downloadUrl:
        description: Custom endpoint for downloads.
        type: string
      encoding:
        default: Slash,BackSlash,Del,Ctl,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for the service.
        type: string
      hardDelete:
        default: false
        description: Permanently delete files on remote removal, otherwise hide files.
        type: boolean
      key:
        description: Application Key.
        type: string
      memoryPoolFlushTime:
        default: 1m0s
        description: How often internal memory buffer pools will be flushed.
        type: string
      memoryPoolUseMmap:
        default: false
        description: Whether to use mmap buffers in internal memory pool.
        type: boolean
      testMode:
        description: A flag string for X-Bz-Test-Mode header for debugging.
        type: string
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
      versionAt:
        default: "off"
        description: Show file versions as they were at the specified time.
        type: string
      versions:
        default: false
        description: Include old versions in directory listings.
        type: boolean
    type: object
  storage.BoxConfig:
    properties:
      accessToken:
        description: Box App Primary Access Token
        type: string
      authUrl:
        description: Auth server URL.
        type: string
      boxConfigFile:
        description: Box App config.json location
        type: string
      boxSubType:
        default: user
        example: user
        type: string
      clientId:
        description: OAuth Client Id.
        type: string
      clientSecret:
        description: OAuth Client Secret.
        type: string
      commitRetries:
        default: 100
        description: Max number of times to try committing a multipart file.
        type: integer
      encoding:
        default: Slash,BackSlash,Del,Ctl,RightSpace,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      listChunk:
        default: 1000
        description: Size of listing chunk 1-1000.
        type: integer
      ownedBy:
        description: Only show items owned by the login (email address) passed in.
        type: string
      rootFolderId:
        default: "0"
        description: Fill in for rclone to use a non root folder as its starting point.
        type: string
      token:
        description: OAuth Access Token as a JSON blob.
        type: string
      tokenUrl:
        description: Token server url.
        type: string
      uploadCutoff:
        default: 50Mi
        description: Cutoff for switching to multipart upload (>= 50 MiB).
        type: string
    type: object
  storage.CreateAcdStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.AcdConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateAzureblobStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.AzureblobConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateB2StorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.B2Config'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateBoxStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.BoxConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateDriveStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.DriveConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateDropboxStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.DropboxConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateFichierStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.FichierConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateFilefabricStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.FilefabricConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateFtpStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.FtpConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateGcsStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.GcsConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateGphotosStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.GphotosConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateHdfsStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.HdfsConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateHidriveStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.HidriveConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateHttpStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.HttpConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateInternetarchiveStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.InternetarchiveConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateJottacloudStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.JottacloudConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateKoofrDigistorageStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.KoofrDigistorageConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateKoofrKoofrStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.KoofrKoofrConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateKoofrOtherStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.KoofrOtherConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateLocalStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.LocalConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateMailruStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.MailruConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateMegaStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.MegaConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateNetstorageStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.NetstorageConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateOnedriveStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.OnedriveConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateOosEnv_authStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.OosEnv_authConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateOosInstance_principal_authStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.OosInstance_principal_authConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateOosNo_authStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.OosNo_authConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateOosResource_principal_authStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.OosResource_principal_authConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateOosUser_principal_authStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.OosUser_principal_authConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateOpendriveStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.OpendriveConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreatePcloudStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.PcloudConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreatePremiumizemeStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.PremiumizemeConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreatePutioStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.PutioConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateQingstorStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.QingstorConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateRequest:
    properties:
      config:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
      path:
        type: string
      provider:
        type: string
    required:
    - name
    - path
    type: object
  storage.CreateS3AWSStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.S3AWSConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateS3AlibabaStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.S3AlibabaConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateS3ArvanCloudStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.S3ArvanCloudConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateS3CephStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.S3CephConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateS3ChinaMobileStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.S3ChinaMobileConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateS3CloudflareStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.S3CloudflareConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateS3DigitalOceanStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.S3DigitalOceanConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateS3DreamhostStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.S3DreamhostConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateS3HuaweiOBSStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.S3HuaweiOBSConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateS3IBMCOSStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.S3IBMCOSConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateS3IDriveStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.S3IDriveConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateS3IONOSStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.S3IONOSConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateS3LiaraStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.S3LiaraConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateS3LyveCloudStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.S3LyveCloudConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateS3MinioStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.S3MinioConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateS3NeteaseStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.S3NeteaseConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateS3OtherStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.S3OtherConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateS3QiniuStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.S3QiniuConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateS3RackCorpStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.S3RackCorpConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateS3ScalewayStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.S3ScalewayConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateS3SeaweedFSStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.S3SeaweedFSConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateS3StackPathStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.S3StackPathConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateS3StorjStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.S3StorjConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateS3TencentCOSStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.S3TencentCOSConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateS3WasabiStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.S3WasabiConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateSeafileStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.SeafileConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateSftpStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.SftpConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateSharefileStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.SharefileConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateSiaStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.SiaConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateSmbStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.SmbConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateStorjExistingStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.StorjExistingConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateStorjNewStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.StorjNewConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateSugarsyncStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.SugarsyncConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateSwiftStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.SwiftConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateUptoboxStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.UptoboxConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateWebdavStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.WebdavConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateYandexStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.YandexConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.CreateZohoStorageRequest:
    properties:
      config:
        $ref: '#/definitions/storage.ZohoConfig'
      name:
        description: Name of the storage, must be unique
        example: my-storage
        type: string
      path:
        description: Path of the storage
        type: string
    type: object
  storage.DirEntry:
    properties:
      dirId:
        type: string
      hash:
        type: string
      isDir:
        type: boolean
      lastModified:
        type: string
      numItems:
        type: integer
      path:
        type: string
      size:
        type: integer
    type: object
  storage.DriveConfig:
    properties:
      acknowledgeAbuse:
        default: false
        description: Set to allow files which return cannotDownloadAbusiveFile to
          be downloaded.
        type: boolean
      allowImportNameChange:
        default: false
        description: Allow the filetype to change when uploading Google docs.
        type: boolean
      alternateExport:
        default: false
        description: 'Deprecated: No longer needed.'
        type: boolean
      authOwnerOnly:
        default: false
        description: Only consider files owned by the authenticated user.
        type: boolean
      authUrl:
        description: Auth server URL.
        type: string
      chunkSize:
        default: 8Mi
        description: Upload chunk size.
        type: string
      clientId:
        description: Google Application Client Id
        type: string
      clientSecret:
        description: OAuth Client Secret.
        type: string
      copyShortcutContent:
        default: false
        description: Server side copy contents of shortcuts instead of the shortcut.
        type: boolean
      disableHttp2:
        default: true
        description: Disable drive using http2.
        type: boolean
      encoding:
        default: InvalidUtf8
        description: The encoding for the backend.
        type: string
      exportFormats:
        default: docx,xlsx,pptx,svg
        description: Comma separated list of preferred formats for downloading Google
          docs.
        type: string
      formats:
        description: 'Deprecated: See export_formats.'
        type: string
      impersonate:
        description: Impersonate this user when using a service account.
        type: string
      importFormats:
        description: Comma separated list of preferred formats for uploading Google
          docs.
        type: string
      keepRevisionForever:
        default: false
        description: Keep new head revision of each file forever.
        type: boolean
      listChunk:
        default: 1000
        description: Size of listing chunk 100-1000, 0 to disable.
        type: integer
      pacerBurst:
        default: 100
        description: Number of API calls to allow without sleeping.
        type: integer
      pacerMinSleep:
        default: 100ms
        description: Minimum time to sleep between API calls.
        type: string
      resourceKey:
        description: Resource key for accessing a link-shared file.
        type: string
      rootFolderId:
        description: ID of the root folder.
        type: string
      scope:
        description: Scope that rclone should use when requesting access from drive.
        example: drive
        type: string
      serverSideAcrossConfigs:
        default: false
        description: Allow server-side operations (e.g. copy) to work across different
          drive configs.
        type: boolean
      serviceAccountCredentials:
        description: Service Account Credentials JSON blob.
        type: string
      serviceAccountFile:
        description: Service Account Credentials JSON file path.
        type: string
      sharedWithMe:
        default: false
        description: Only show files that are shared with me.
        type: boolean
      sizeAsQuota:
        default: false
        description: Show sizes as storage quota usage, not actual size.
        type: boolean
      skipChecksumGphotos:
        default: false
        description: Skip MD5 checksum on Google photos and videos only.
        type: boolean
      skipDanglingShortcuts:
        default: false
        description: If set skip dangling shortcut files.
        type: boolean
      skipGdocs:
        default: false
        description: Skip google documents in all listings.
        type: boolean
      skipShortcuts:
        default: false
        description: If set skip shortcut files.
        type: boolean
      starredOnly:
        default: false
        description: Only show files that are starred.
        type: boolean
      stopOnDownloadLimit:
        default: false
        description: Make download limit errors be fatal.
        type: boolean
      stopOnUploadLimit:
        default: false
        description: Make upload limit errors be fatal.
        type: boolean
      teamDrive:
        description: ID of the Shared Drive (Team Drive).
        type: string
      token:
        description: OAuth Access Token as a JSON blob.
        type: string
      tokenUrl:
        description: Token server url.
        type: string
      trashedOnly:
        default: false
        description: Only show files that are in the trash.
        type: boolean
      uploadCutoff:
        default: 8Mi
        description: Cutoff for switching to chunked upload.
        type: string
      useCreatedDate:
        default: false
        description: Use file created date instead of modified date.
        type: boolean
      useSharedDate:
        default: false
        description: Use date file was shared instead of modified date.
        type: boolean
      useTrash:
        default: true
        description: Send files to the trash instead of deleting permanently.
        type: boolean
      v2DownloadMinSize:
        default: "off"
        description: If Object's are greater, use drive v2 API to download.
        type: string
    type: object
  storage.DropboxConfig:
    properties:
      authUrl:
        description: Auth server URL.
        type: string
      batchCommitTimeout:
        default: 10m0s
        description: Max time to wait for a batch to finish committing
        type: string
      batchMode:
        default: sync
        description: Upload file batching sync|async|off.
        type: string
      batchSize:
        default: 0
        description: Max number of files in upload batch.
        type: integer
      batchTimeout:
        default: 0s
        description: Max time to allow an idle upload batch before uploading.
        type: string
      chunkSize:
        default: 48Mi
        description: Upload chunk size (< 150Mi).
        type: string
      clientId:
        description: OAuth Client Id.
        type: string
      clientSecret:
        description: OAuth Client Secret.
        type: string
      encoding:
        default: Slash,BackSlash,Del,RightSpace,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      impersonate:
        description: Impersonate this user when using a business account.
        type: string
      sharedFiles:
        default: false
        description: Instructs rclone to work on individual shared files.
        type: boolean
      sharedFolders:
        default: false
        description: Instructs rclone to work on shared folders.
        type: boolean
      token:
        description: OAuth Access Token as a JSON blob.
        type: string
      tokenUrl:
        description: Token server url.
        type: string
    type: object
  storage.FichierConfig:
    properties:
      apiKey:
        description: Your API Key, get it from https://1fichier.com/console/params.pl.
        type: string
      encoding:
        default: Slash,LtGt,DoubleQuote,SingleQuote,BackQuote,Dollar,BackSlash,Del,Ctl,LeftSpace,RightSpace,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      filePassword:
        description: If you want to download a shared file that is password protected,
          add this parameter.
        type: string
      folderPassword:
        description: If you want to list the files in a shared folder that is password
          protected, add this parameter.
        type: string
      sharedFolder:
        description: If you want to download a shared folder, add this parameter.
        type: string
    type: object
  storage.FilefabricConfig:
    properties:
      encoding:
        default: Slash,Del,Ctl,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      permanentToken:
        description: Permanent Authentication Token.
        type: string
      rootFolderId:
        description: ID of the root folder.
        type: string
      token:
        description: Session Token.
        type: string
      tokenExpiry:
        description: Token expiry time.
        type: string
      url:
        description: URL of the Enterprise File Fabric to connect to.
        example: https://storagemadeeasy.com
        type: string
      version:
        description: Version read from the file fabric.
        type: string
    type: object
  storage.FtpConfig:
    properties:
      askPassword:
        default: false
        description: Allow asking for FTP password when needed.
        type: boolean
      closeTimeout:
        default: 1m0s
        description: Maximum time to wait for a response to close.
        type: string
      concurrency:
        default: 0
        description: Maximum number of FTP simultaneous connections, 0 for unlimited.
        type: integer
      disableEpsv:
        default: false
        description: Disable using EPSV even if server advertises support.
        type: boolean
      disableMlsd:
        default: false
        description: Disable using MLSD even if server advertises support.
        type: boolean
      disableTls13:
        default: false
        description: Disable TLS 1.3 (workaround for FTP servers with buggy TLS)
        type: boolean
      disableUtf8:
        default: false
        description: Disable using UTF-8 even if server advertises support.
        type: boolean
      encoding:
        default: Slash,Del,Ctl,RightSpace,Dot
        description: The encoding for the backend.
        example: Asterisk,Ctl,Dot,Slash
        type: string
      explicitTls:
        default: false
        description: Use Explicit FTPS (FTP over TLS).
        type: boolean
      forceListHidden:
        default: false
        description: Use LIST -a to force listing of hidden files and folders. This
          will disable the use of MLSD.
        type: boolean
      host:
        description: FTP host to connect to.
        type: string
      idleTimeout:
        default: 1m0s
        description: Max time before closing idle connections.
        type: string
      noCheckCertificate:
        default: false
        description: Do not verify the TLS certificate of the server.
        type: boolean
      pass:
        description: FTP password.
        type: string
      port:
        default: 21
        description: FTP port number.
        type: integer
      shutTimeout:
        default: 1m0s
        description: Maximum time to wait for data connection closing status.
        type: string
      tls:
        default: false
        description: Use Implicit FTPS (FTP over TLS).
        type: boolean
      tlsCacheSize:
        default: 32
        description: Size of TLS session cache for all control and data connections.
        type: integer
      user:
        default: $USER
        description: FTP username.
        type: string
      writingMdtm:
        default: false
        description: Use MDTM to set modification time (VsFtpd quirk)
        type: boolean
    type: object
  storage.GcsConfig:
    properties:
      anonymous:
        default: false
        description: Access public buckets and objects without credentials.
        type: boolean
      authUrl:
        description: Auth server URL.
        type: string
      bucketAcl:
        description: Access Control List for new buckets.
        example: authenticatedRead
        type: string
      bucketPolicyOnly:
        default: false
        description: Access checks should use bucket-level IAM policies.
        type: boolean
      clientId:
        description: OAuth Client Id.
        type: string
      clientSecret:
        description: OAuth Client Secret.
        type: string
      decompress:
        default: false
        description: If set this will decompress gzip encoded objects.
        type: boolean
      encoding:
        default: Slash,CrLf,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for the service.
        type: string
      envAuth:
        default: false
        description: Get GCP IAM credentials from runtime (environment variables or
          instance meta data if no env vars).
        example: false
        type: boolean
      location:
        description: Location for the newly created buckets.
        example: ""
        type: string
      noCheckBucket:
        default: false
        description: If set, don't attempt to check the bucket exists or create it.
        type: boolean
      objectAcl:
        description: Access Control List for new objects.
        example: authenticatedRead
        type: string
      projectNumber:
        description: Project number.
        type: string
      serviceAccountCredentials:
        description: Service Account Credentials JSON blob.
        type: string
      serviceAccountFile:
        description: Service Account Credentials JSON file path.
        type: string
      storageClass:
        description: The storage class to use when storing objects in Google Cloud
          Storage.
        example: ""
        type: string
      token:
        description: OAuth Access Token as a JSON blob.
        type: string
      tokenUrl:
        description: Token server url.
        type: string
    type: object
  storage.GphotosConfig:
    properties:
      authUrl:
        description: Auth server URL.
        type: string
      clientId:
        description: OAuth Client Id.
        type: string
      clientSecret:
        description: OAuth Client Secret.
        type: string
      encoding:
        default: Slash,CrLf,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      includeArchived:
        default: false
        description: Also view and download archived media.
        type: boolean
      readOnly:
        default: false
        description: Set to make the Google Photos backend read only.
        type: boolean
      readSize:
        default: false
        description: Set to read the size of media items.
        type: boolean
      startYear:
        default: 2000
        description: Year limits the photos to be downloaded to those which are uploaded
          after the given year.
        type: integer
      token:
        description: OAuth Access Token as a JSON blob.
        type: string
      tokenUrl:
        description: Token server url.
        type: string
    type: object
  storage.HdfsConfig:
    properties:
      dataTransferProtection:
        description: 'Kerberos data transfer protection: authentication|integrity|privacy.'
        example: privacy
        type: string
      encoding:
        default: Slash,Colon,Del,Ctl,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      namenode:
        description: Hadoop name node and port.
        type: string
      servicePrincipalName:
        description: Kerberos service principal name for the namenode.
        type: string
      username:
        description: Hadoop user name.
        example: root
        type: string
    type: object
  storage.HidriveConfig:
    properties:
      authUrl:
        description: Auth server URL.
        type: string
      chunkSize:
        default: 48Mi
        description: Chunksize for chunked uploads.
        type: string
      clientId:
        description: OAuth Client Id.
        type: string
      clientSecret:
        description: OAuth Client Secret.
        type: string
      disableFetchingMemberCount:
        default: false
        description: Do not fetch number of objects in directories unless it is absolutely
          necessary.
        type: boolean
      encoding:
        default: Slash,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        default: https://api.hidrive.strato.com/2.1
        description: Endpoint for the service.
        type: string
      rootPrefix:
        default: /
        description: The root/parent folder for all paths.
        example: /
        type: string
      scopeAccess:
        default: rw
        description: Access permissions that rclone should use when requesting access
          from HiDrive.
        example: rw
        type: string
      scopeRole:
        default: user
        description: User-level that rclone should use when requesting access from
          HiDrive.
        example: user
        type: string
      token:
        description: OAuth Access Token as a JSON blob.
        type: string
      tokenUrl:
        description: Token server url.
        type: string
      uploadConcurrency:
        default: 4
        description: Concurrency for chunked uploads.
        type: integer
      uploadCutoff:
        default: 96Mi
        description: Cutoff/Threshold for chunked uploads.
        type: string
    type: object
  storage.HttpConfig:
    properties:
      headers:
        description: Set HTTP headers for all transactions.
        type: string
      noHead:
        default: false
        description: Don't use HEAD requests.
        type: boolean
      noSlash:
        default: false
        description: Set this if the site doesn't end directories with /.
        type: boolean
      url:
        description: URL of HTTP host to connect to.
        type: string
    type: object
  storage.InternetarchiveConfig:
    properties:
      accessKeyId:
        description: IAS3 Access Key.
        type: string
      disableChecksum:
        default: true
        description: Don't ask the server to test against MD5 checksum calculated
          by rclone.
        type: boolean
      encoding:
        default: Slash,LtGt,CrLf,Del,Ctl,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        default: https://s3.us.archive.org
        description: IAS3 Endpoint.
        type: string
      frontEndpoint:
        default: https://archive.org
        description: Host of InternetArchive Frontend.
        type: string
      secretAccessKey:
        description: IAS3 Secret Key (password).
        type: string
      waitArchive:
        default: 0s
        description: Timeout for waiting the server's processing tasks (specifically
          archive and book_op) to finish.
        type: string
    type: object
  storage.JottacloudConfig:
    properties:
      encoding:
        default: Slash,LtGt,DoubleQuote,Colon,Question,Asterisk,Pipe,Del,Ctl,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      hardDelete:
        default: false
        description: Delete files permanently rather than putting them into the trash.
        type: boolean
      md5MemoryLimit:
        default: 10Mi
        description: Files bigger than this will be cached on disk to calculate the
          MD5 if required.
        type: string
      noVersions:
        default: false
        description: Avoid server side versioning by deleting files and recreating
          files instead of overwriting them.
        type: boolean
      trashedOnly:
        default: false
        description: Only show files that are in the trash.
        type: boolean
      uploadResumeLimit:
        default: 10Mi
        description: Files bigger than this can be resumed if the upload fail's.
        type: string
    type: object
  storage.KoofrDigistorageConfig:
    properties:
      encoding:
        default: Slash,BackSlash,Del,Ctl,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      mountid:
        description: Mount ID of the mount to use.
        type: string
      password:
        description: Your password for rclone (generate one at https://storage.rcs-rds.ro/app/admin/preferences/password).
        type: string
      setmtime:
        default: true
        description: Does the backend support setting modification time.
        type: boolean
      user:
        description: Your user name.
        type: string
    type: object
  storage.KoofrKoofrConfig:
    properties:
      encoding:
        default: Slash,BackSlash,Del,Ctl,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      mountid:
        description: Mount ID of the mount to use.
        type: string
      password:
        description: Your password for rclone (generate one at https://app.koofr.net/app/admin/preferences/password).
        type: string
      setmtime:
        default: true
        description: Does the backend support setting modification time.
        type: boolean
      user:
        description: Your user name.
        type: string
    type: object
  storage.KoofrOtherConfig:
    properties:
      encoding:
        default: Slash,BackSlash,Del,Ctl,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: The Koofr API endpoint to use.
        type: string
      mountid:
        description: Mount ID of the mount to use.
        type: string
      password:
        description: Your password for rclone (generate one at your service's settings
          page).
        type: string
      setmtime:
        default: true
        description: Does the backend support setting modification time.
        type: boolean
      user:
        description: Your user name.
        type: string
    type: object
  storage.LocalConfig:
    properties:
      caseInsensitive:
        default: false
        description: Force the filesystem to report itself as case insensitive.
        type: boolean
      caseSensitive:
        default: false
        description: Force the filesystem to report itself as case sensitive.
        type: boolean
      copyLinks:
        default: false
        description: Follow symlinks and copy the pointed to item.
        type: boolean
      encoding:
        default: Slash,Dot
        description: The encoding for the backend.
        type: string
      links:
        default: false
        description: Translate symlinks to/from regular files with a '.rclonelink'
          extension.
        type: boolean
      noCheckUpdated:
        default: false
        description: Don't check to see if the files change during upload.
        type: boolean
      noPreallocate:
        default: false
        description: Disable preallocation of disk space for transferred files.
        type: boolean
      noSetModtime:
        default: false
        description: Disable setting modtime.
        type: boolean
      noSparse:
        default: false
        description: Disable sparse files for multi-thread downloads.
        type: boolean
      nounc:
        default: false
        description: Disable UNC (long path names) conversion on Windows.
        example: true
        type: boolean
      oneFileSystem:
        default: false
        description: Don't cross filesystem boundaries (unix/macOS only).
        type: boolean
      skipLinks:
        default: false
        description: Don't warn about skipped symlinks.
        type: boolean
      unicodeNormalization:
        default: false
        description: Apply unicode NFC normalization to paths and filenames.
        type: boolean
      zeroSizeLinks:
        default: false
        description: Assume the Stat size of links is zero (and read them instead)
          (deprecated).
        type: boolean
    type: object
  storage.MailruConfig:
    properties:
      checkHash:
        default: true
        description: What should copy do if file checksum is mismatched or invalid.
        example: true
        type: boolean
      encoding:
        default: Slash,LtGt,DoubleQuote,Colon,Question,Asterisk,Pipe,BackSlash,Del,Ctl,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      pass:
        description: Password.
        type: string
      quirks:
        description: Comma separated list of internal maintenance flags.
        type: string
      speedupEnable:
        default: true
        description: Skip full upload if there is another file with same data hash.
        example: true
        type: boolean
      speedupFilePatterns:
        default: '*.mkv,*.avi,*.mp4,*.mp3,*.zip,*.gz,*.rar,*.pdf'
        description: Comma separated list of file name patterns eligible for speedup
          (put by hash).
        example: ""
        type: string
      speedupMaxDisk:
        default: 3Gi
        description: This option allows you to disable speedup (put by hash) for large
          files.
        example: "0"
        type: string
      speedupMaxMemory:
        default: 32Mi
        description: Files larger than the size given below will always be hashed
          on disk.
        example: "0"
        type: string
      user:
        description: User name (usually email).
        type: string
      userAgent:
        description: HTTP user agent used internally by client.
        type: string
    type: object
  storage.MegaConfig:
    properties:
      debug:
        default: false
        description: Output more debug from Mega.
        type: boolean
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      hardDelete:
        default: false
        description: Delete files permanently rather than putting them into the trash.
        type: boolean
      pass:
        description: Password.
        type: string
      useHttps:
        default: false
        description: Use HTTPS for transfers.
        type: boolean
      user:
        description: User name.
        type: string
    type: object
  storage.NetstorageConfig:
    properties:
      account:
        description: Set the NetStorage account name
        type: string
      host:
        description: Domain+path of NetStorage host to connect to.
        type: string
      protocol:
        default: https
        description: Select between HTTP or HTTPS protocol.
        example: http
        type: string
      secret:
        description: Set the NetStorage account secret/G2O key for authentication.
        type: string
    type: object
  storage.OnedriveConfig:
    properties:
      accessScopes:
        default: Files.Read Files.ReadWrite Files.Read.All Files.ReadWrite.All Sites.Read.All
          offline_access
        description: Set scopes to be requested by rclone.
        example: Files.Read Files.ReadWrite Files.Read.All Files.ReadWrite.All Sites.Read.All
          offline_access
        type: string
      authUrl:
        description: Auth server URL.
        type: string
      chunkSize:
        default: 10Mi
        description: Chunk size to upload files with - must be multiple of 320k (327,680
          bytes).
        type: string
      clientId:
        description: OAuth Client Id.
        type: string
      clientSecret:
        description: OAuth Client Secret.
        type: string
      disableSitePermission:
        default: false
        description: Disable the request for Sites.Read.All permission.
        type: boolean
      driveId:
        description: The ID of the drive to use.
        type: string
      driveType:
        description: The type of the drive (personal | business | documentLibrary).
        type: string
      encoding:
        default: Slash,LtGt,DoubleQuote,Colon,Question,Asterisk,Pipe,BackSlash,Del,Ctl,LeftSpace,LeftTilde,RightSpace,RightPeriod,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      exposeOnenoteFiles:
        default: false
        description: Set to make OneNote files show up in directory listings.
        type: boolean
      hashType:
        default: auto
        description: Specify the hash in use for the backend.
        example: auto
        type: string
      linkPassword:
        description: Set the password for links created by the link command.
        type: string
      linkScope:
        default: anonymous
        description: Set the scope of the links created by the link command.
        example: anonymous
        type: string
      linkType:
        default: view
        description: Set the type of the links created by the link command.
        example: view
        type: string
      listChunk:
        default: 1000
        description: Size of listing chunk.
        type: integer
      noVersions:
        default: false
        description: Remove all versions on modifying operations.
        type: boolean
      region:
        default: global
        description: Choose national cloud region for OneDrive.
        example: global
        type: string
      rootFolderId:
        description: ID of the root folder.
        type: string
      serverSideAcrossConfigs:
        default: false
        description: Allow server-side operations (e.g. copy) to work across different
          onedrive configs.
        type: boolean
      token:
        description: OAuth Access Token as a JSON blob.
        type: string
      tokenUrl:
        description: Token server url.
        type: string
    type: object
  storage.OosEnv_authConfig:
    properties:
      chunkSize:
        default: 5Mi
        description: Chunk size to use for uploading.
        type: string
      compartment:
        description: Object storage compartment OCID
        type: string
      copyCutoff:
        default: 4.656Gi
        description: Cutoff for switching to multipart copy.
        type: string
      copyTimeout:
        default: 1m0s
        description: Timeout for copy.
        type: string
      disableChecksum:
        default: false
        description: Don't store MD5 checksum with object metadata.
        type: boolean
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for Object storage API.
        type: string
      leavePartsOnError:
        default: false
        description: If true avoid calling abort upload on a failure, leaving all
          successfully uploaded parts on S3 for manual recovery.
        type: boolean
      namespace:
        description: Object storage namespace
        type: string
      noCheckBucket:
        default: false
        description: If set, don't attempt to check the bucket exists or create it.
        type: boolean
      region:
        description: Object storage Region
        type: string
      sseCustomerAlgorithm:
        description: If using SSE-C, the optional header that specifies "AES256" as
          the encryption algorithm.
        example: ""
        type: string
      sseCustomerKey:
        description: To use SSE-C, the optional header that specifies the base64-encoded
          256-bit encryption key to use to
        example: ""
        type: string
      sseCustomerKeyFile:
        description: To use SSE-C, a file containing the base64-encoded string of
          the AES-256 encryption key associated
        example: ""
        type: string
      sseCustomerKeySha256:
        description: If using SSE-C, The optional header that specifies the base64-encoded
          SHA256 hash of the encryption
        example: ""
        type: string
      sseKmsKeyId:
        description: if using using your own master key in vault, this header specifies
          the
        example: ""
        type: string
      storageTier:
        default: Standard
        description: The storage class to use when storing new objects in storage.
          https://docs.oracle.com/en-us/iaas/Content/Object/Concepts/understandingstoragetiers.htm
        example: Standard
        type: string
      uploadConcurrency:
        default: 10
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
    type: object
  storage.OosInstance_principal_authConfig:
    properties:
      chunkSize:
        default: 5Mi
        description: Chunk size to use for uploading.
        type: string
      compartment:
        description: Object storage compartment OCID
        type: string
      copyCutoff:
        default: 4.656Gi
        description: Cutoff for switching to multipart copy.
        type: string
      copyTimeout:
        default: 1m0s
        description: Timeout for copy.
        type: string
      disableChecksum:
        default: false
        description: Don't store MD5 checksum with object metadata.
        type: boolean
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for Object storage API.
        type: string
      leavePartsOnError:
        default: false
        description: If true avoid calling abort upload on a failure, leaving all
          successfully uploaded parts on S3 for manual recovery.
        type: boolean
      namespace:
        description: Object storage namespace
        type: string
      noCheckBucket:
        default: false
        description: If set, don't attempt to check the bucket exists or create it.
        type: boolean
      region:
        description: Object storage Region
        type: string
      sseCustomerAlgorithm:
        description: If using SSE-C, the optional header that specifies "AES256" as
          the encryption algorithm.
        example: ""
        type: string
      sseCustomerKey:
        description: To use SSE-C, the optional header that specifies the base64-encoded
          256-bit encryption key to use to
        example: ""
        type: string
      sseCustomerKeyFile:
        description: To use SSE-C, a file containing the base64-encoded string of
          the AES-256 encryption key associated
        example: ""
        type: string
      sseCustomerKeySha256:
        description: If using SSE-C, The optional header that specifies the base64-encoded
          SHA256 hash of the encryption
        example: ""
        type: string
      sseKmsKeyId:
        description: if using using your own master key in vault, this header specifies
          the
        example: ""
        type: string
      storageTier:
        default: Standard
        description: The storage class to use when storing new objects in storage.
          https://docs.oracle.com/en-us/iaas/Content/Object/Concepts/understandingstoragetiers.htm
        example: Standard
        type: string
      uploadConcurrency:
        default: 10
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
    type: object
  storage.OosNo_authConfig:
    properties:
      chunkSize:
        default: 5Mi
        description: Chunk size to use for uploading.
        type: string
      copyCutoff:
        default: 4.656Gi
        description: Cutoff for switching to multipart copy.
        type: string
      copyTimeout:
        default: 1m0s
        description: Timeout for copy.
        type: string
      disableChecksum:
        default: false
        description: Don't store MD5 checksum with object metadata.
        type: boolean
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for Object storage API.
        type: string
      leavePartsOnError:
        default: false
        description: If true avoid calling abort upload on a failure, leaving all
          successfully uploaded parts on S3 for manual recovery.
        type: boolean
      namespace:
        description: Object storage namespace
        type: string
      noCheckBucket:
        default: false
        description: If set, don't attempt to check the bucket exists or create it.
        type: boolean
      region:
        description: Object storage Region
        type: string
      sseCustomerAlgorithm:
        description: If using SSE-C, the optional header that specifies "AES256" as
          the encryption algorithm.
        example: ""
        type: string
      sseCustomerKey:
        description: To use SSE-C, the optional header that specifies the base64-encoded
          256-bit encryption key to use to
        example: ""
        type: string
      sseCustomerKeyFile:
        description: To use SSE-C, a file containing the base64-encoded string of
          the AES-256 encryption key associated
        example: ""
        type: string
      sseCustomerKeySha256:
        description: If using SSE-C, The optional header that specifies the base64-encoded
          SHA256 hash of the encryption
        example: ""
        type: string
      sseKmsKeyId:
        description: if using using your own master key in vault, this header specifies
          the
        example: ""
        type: string
      storageTier:
        default: Standard
        description: The storage class to use when storing new objects in storage.
          https://docs.oracle.com/en-us/iaas/Content/Object/Concepts/understandingstoragetiers.htm
        example: Standard
        type: string
      uploadConcurrency:
        default: 10
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
    type: object
  storage.OosResource_principal_authConfig:
    properties:
      chunkSize:
        default: 5Mi
        description: Chunk size to use for uploading.
        type: string
      compartment:
        description: Object storage compartment OCID
        type: string
      copyCutoff:
        default: 4.656Gi
        description: Cutoff for switching to multipart copy.
        type: string
      copyTimeout:
        default: 1m0s
        description: Timeout for copy.
        type: string
      disableChecksum:
        default: false
        description: Don't store MD5 checksum with object metadata.
        type: boolean
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for Object storage API.
        type: string
      leavePartsOnError:
        default: false
        description: If true avoid calling abort upload on a failure, leaving all
          successfully uploaded parts on S3 for manual recovery.
        type: boolean
      namespace:
        description: Object storage namespace
        type: string
      noCheckBucket:
        default: false
        description: If set, don't attempt to check the bucket exists or create it.
        type: boolean
      region:
        description: Object storage Region
        type: string
      sseCustomerAlgorithm:
        description: If using SSE-C, the optional header that specifies "AES256" as
          the encryption algorithm.
        example: ""
        type: string
      sseCustomerKey:
        description: To use SSE-C, the optional header that specifies the base64-encoded
          256-bit encryption key to use to
        example: ""
        type: string
      sseCustomerKeyFile:
        description: To use SSE-C, a file containing the base64-encoded string of
          the AES-256 encryption key associated
        example: ""
        type: string
      sseCustomerKeySha256:
        description: If using SSE-C, The optional header that specifies the base64-encoded
          SHA256 hash of the encryption
        example: ""
        type: string
      sseKmsKeyId:
        description: if using using your own master key in vault, this header specifies
          the
        example: ""
        type: string
      storageTier:
        default: Standard
        description: The storage class to use when storing new objects in storage.
          https://docs.oracle.com/en-us/iaas/Content/Object/Concepts/understandingstoragetiers.htm
        example: Standard
        type: string
      uploadConcurrency:
        default: 10
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
    type: object
  storage.OosUser_principal_authConfig:
    properties:
      chunkSize:
        default: 5Mi
        description: Chunk size to use for uploading.
        type: string
      compartment:
        description: Object storage compartment OCID
        type: string
      configFile:
        default: ~/.oci/config
        description: Path to OCI config file
        example: ~/.oci/config
        type: string
      configProfile:
        default: Default
        description: Profile name inside the oci config file
        example: Default
        type: string
      copyCutoff:
        default: 4.656Gi
        description: Cutoff for switching to multipart copy.
        type: string
      copyTimeout:
        default: 1m0s
        description: Timeout for copy.
        type: string
      disableChecksum:
        default: false
        description: Don't store MD5 checksum with object metadata.
        type: boolean
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for Object storage API.
        type: string
      leavePartsOnError:
        default: false
        description: If true avoid calling abort upload on a failure, leaving all
          successfully uploaded parts on S3 for manual recovery.
        type: boolean
      namespace:
        description: Object storage namespace
        type: string
      noCheckBucket:
        default: false
        description: If set, don't attempt to check the bucket exists or create it.
        type: boolean
      region:
        description: Object storage Region
        type: string
      sseCustomerAlgorithm:
        description: If using SSE-C, the optional header that specifies "AES256" as
          the encryption algorithm.
        example: ""
        type: string
      sseCustomerKey:
        description: To use SSE-C, the optional header that specifies the base64-encoded
          256-bit encryption key to use to
        example: ""
        type: string
      sseCustomerKeyFile:
        description: To use SSE-C, a file containing the base64-encoded string of
          the AES-256 encryption key associated
        example: ""
        type: string
      sseCustomerKeySha256:
        description: If using SSE-C, The optional header that specifies the base64-encoded
          SHA256 hash of the encryption
        example: ""
        type: string
      sseKmsKeyId:
        description: if using using your own master key in vault, this header specifies
          the
        example: ""
        type: string
      storageTier:
        default: Standard
        description: The storage class to use when storing new objects in storage.
          https://docs.oracle.com/en-us/iaas/Content/Object/Concepts/understandingstoragetiers.htm
        example: Standard
        type: string
      uploadConcurrency:
        default: 10
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
    type: object
  storage.OpendriveConfig:
    properties:
      chunkSize:
        default: 10Mi
        description: Files will be uploaded in chunks this size.
        type: string
      encoding:
        default: Slash,LtGt,DoubleQuote,Colon,Question,Asterisk,Pipe,BackSlash,LeftSpace,LeftCrLfHtVt,RightSpace,RightCrLfHtVt,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      password:
        description: Password.
        type: string
      username:
        description: Username.
        type: string
    type: object
  storage.PcloudConfig:
    properties:
      authUrl:
        description: Auth server URL.
        type: string
      clientId:
        description: OAuth Client Id.
        type: string
      clientSecret:
        description: OAuth Client Secret.
        type: string
      encoding:
        default: Slash,BackSlash,Del,Ctl,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      hostname:
        default: api.pcloud.com
        description: Hostname to connect to.
        example: api.pcloud.com
        type: string
      password:
        description: Your pcloud password.
        type: string
      rootFolderId:
        default: d0
        description: Fill in for rclone to use a non root folder as its starting point.
        type: string
      token:
        description: OAuth Access Token as a JSON blob.
        type: string
      tokenUrl:
        description: Token server url.
        type: string
      username:
        description: Your pcloud username.
        type: string
    type: object
  storage.PremiumizemeConfig:
    properties:
      apiKey:
        description: API Key.
        type: string
      encoding:
        default: Slash,DoubleQuote,BackSlash,Del,Ctl,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
    type: object
  storage.PutioConfig:
    properties:
      encoding:
        default: Slash,BackSlash,Del,Ctl,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
    type: object
  storage.QingstorConfig:
    properties:
      accessKeyId:
        description: QingStor Access Key ID.
        type: string
      chunkSize:
        default: 4Mi
        description: Chunk size to use for uploading.
        type: string
      connectionRetries:
        default: 3
        description: Number of connection retries.
        type: integer
      encoding:
        default: Slash,Ctl,InvalidUtf8
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Enter an endpoint URL to connection QingStor API.
        type: string
      envAuth:
        default: false
        description: Get QingStor credentials from runtime.
        example: false
        type: boolean
      secretAccessKey:
        description: QingStor Secret Access Key (password).
        type: string
      uploadConcurrency:
        default: 1
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
      zone:
        description: Zone to connect to.
        example: pek3a
        type: string
    type: object
  storage.S3AWSConfig:
    properties:
      accessKeyId:
        description: AWS Access Key ID.
        type: string
      acl:
        description: Canned ACL used when creating buckets and storing or copying
          objects.
        type: string
      bucketAcl:
        description: Canned ACL used when creating buckets.
        example: private
        type: string
      chunkSize:
        default: 5Mi
        description: Chunk size to use for uploading.
        type: string
      copyCutoff:
        default: 4.656Gi
        description: Cutoff for switching to multipart copy.
        type: string
      decompress:
        default: false
        description: If set this will decompress gzip encoded objects.
        type: boolean
      disableChecksum:
        default: false
        description: Don't store MD5 checksum with object metadata.
        type: boolean
      disableHttp2:
        default: false
        description: Disable usage of http2 for S3 backends.
        type: boolean
      downloadUrl:
        description: Custom endpoint for downloads.
        type: string
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for S3 API.
        type: string
      envAuth:
        default: false
        description: Get AWS credentials from runtime (environment variables or EC2/ECS
          meta data if no env vars).
        example: false
        type: boolean
      forcePathStyle:
        default: true
        description: If true use path style access if false use virtual hosted style.
        type: boolean
      leavePartsOnError:
        default: false
        description: If true avoid calling abort upload on a failure, leaving all
          successfully uploaded parts on S3 for manual recovery.
        type: boolean
      listChunk:
        default: 1000
        description: Size of listing chunk (response list for each ListObject S3 request).
        type: integer
      listUrlEncode:
        default: unset
        description: 'Whether to url encode listings: true/false/unset'
        type: string
      listVersion:
        default: 0
        description: 'Version of ListObjects to use: 1,2 or 0 for auto.'
        type: integer
      locationConstraint:
        description: Location constraint - must be set to match the Region.
        example: ""
        type: string
      maxUploadParts:
        default: 10000
        description: Maximum number of parts in a multipart upload.
        type: integer
      memoryPoolFlushTime:
        default: 1m0s
        description: How often internal memory buffer pools will be flushed.
        type: string
      memoryPoolUseMmap:
        default: false
        description: Whether to use mmap buffers in internal memory pool.
        type: boolean
      mightGzip:
        default: unset
        description: Set this if the backend might gzip objects.
        type: string
      noCheckBucket:
        default: false
        description: If set, don't attempt to check the bucket exists or create it.
        type: boolean
      noHead:
        default: false
        description: If set, don't HEAD uploaded objects to check integrity.
        type: boolean
      noHeadObject:
        default: false
        description: If set, do not do HEAD before GET when getting objects.
        type: boolean
      noSystemMetadata:
        default: false
        description: Suppress setting and reading of system metadata
        type: boolean
      profile:
        description: Profile to use in the shared credentials file.
        type: string
      region:
        description: Region to connect to.
        example: us-east-1
        type: string
      requesterPays:
        default: false
        description: Enables requester pays option when interacting with S3 bucket.
        type: boolean
      secretAccessKey:
        description: AWS Secret Access Key (password).
        type: string
      serverSideEncryption:
        description: The server-side encryption algorithm used when storing this object
          in S3.
        example: ""
        type: string
      sessionToken:
        description: An AWS session token.
        type: string
      sharedCredentialsFile:
        description: Path to the shared credentials file.
        type: string
      sseCustomerAlgorithm:
        description: If using SSE-C, the server-side encryption algorithm used when
          storing this object in S3.
        example: ""
        type: string
      sseCustomerKey:
        description: To use SSE-C you may provide the secret encryption key used to
          encrypt/decrypt your data.
        example: ""
        type: string
      sseCustomerKeyBase64:
        description: If using SSE-C you must provide the secret encryption key encoded
          in base64 format to encrypt/decrypt your data.
        example: ""
        type: string
      sseCustomerKeyMd5:
        description: If using SSE-C you may provide the secret encryption key MD5
          checksum (optional).
        example: ""
        type: string
      sseKmsKeyId:
        description: If using KMS ID you must provide the ARN of Key.
        example: ""
        type: string
      storageClass:
        description: The storage class to use when storing new objects in S3.
        example: ""
        type: string
      stsEndpoint:
        description: Endpoint for STS.
        type: string
      uploadConcurrency:
        default: 4
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
      useAccelerateEndpoint:
        default: false
        description: If true use the AWS S3 accelerated endpoint.
        type: boolean
      useMultipartEtag:
        default: unset
        description: Whether to use ETag in multipart uploads for verification
        type: string
      usePresignedRequest:
        default: false
        description: Whether to use a presigned request or PutObject for single part
          uploads
        type: boolean
      v2Auth:
        default: false
        description: If true use v2 authentication.
        type: boolean
      versionAt:
        default: "off"
        description: Show file versions as they were at the specified time.
        type: string
      versions:
        default: false
        description: Include old versions in directory listings.
        type: boolean
    type: object
  storage.S3AlibabaConfig:
    properties:
      accessKeyId:
        description: AWS Access Key ID.
        type: string
      acl:
        description: Canned ACL used when creating buckets and storing or copying
          objects.
        type: string
      bucketAcl:
        description: Canned ACL used when creating buckets.
        example: private
        type: string
      chunkSize:
        default: 5Mi
        description: Chunk size to use for uploading.
        type: string
      copyCutoff:
        default: 4.656Gi
        description: Cutoff for switching to multipart copy.
        type: string
      decompress:
        default: false
        description: If set this will decompress gzip encoded objects.
        type: boolean
      disableChecksum:
        default: false
        description: Don't store MD5 checksum with object metadata.
        type: boolean
      disableHttp2:
        default: false
        description: Disable usage of http2 for S3 backends.
        type: boolean
      downloadUrl:
        description: Custom endpoint for downloads.
        type: string
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for OSS API.
        example: oss-accelerate.aliyuncs.com
        type: string
      envAuth:
        default: false
        description: Get AWS credentials from runtime (environment variables or EC2/ECS
          meta data if no env vars).
        example: false
        type: boolean
      forcePathStyle:
        default: true
        description: If true use path style access if false use virtual hosted style.
        type: boolean
      listChunk:
        default: 1000
        description: Size of listing chunk (response list for each ListObject S3 request).
        type: integer
      listUrlEncode:
        default: unset
        description: 'Whether to url encode listings: true/false/unset'
        type: string
      listVersion:
        default: 0
        description: 'Version of ListObjects to use: 1,2 or 0 for auto.'
        type: integer
      maxUploadParts:
        default: 10000
        description: Maximum number of parts in a multipart upload.
        type: integer
      memoryPoolFlushTime:
        default: 1m0s
        description: How often internal memory buffer pools will be flushed.
        type: string
      memoryPoolUseMmap:
        default: false
        description: Whether to use mmap buffers in internal memory pool.
        type: boolean
      mightGzip:
        default: unset
        description: Set this if the backend might gzip objects.
        type: string
      noCheckBucket:
        default: false
        description: If set, don't attempt to check the bucket exists or create it.
        type: boolean
      noHead:
        default: false
        description: If set, don't HEAD uploaded objects to check integrity.
        type: boolean
      noHeadObject:
        default: false
        description: If set, do not do HEAD before GET when getting objects.
        type: boolean
      noSystemMetadata:
        default: false
        description: Suppress setting and reading of system metadata
        type: boolean
      profile:
        description: Profile to use in the shared credentials file.
        type: string
      secretAccessKey:
        description: AWS Secret Access Key (password).
        type: string
      sessionToken:
        description: An AWS session token.
        type: string
      sharedCredentialsFile:
        description: Path to the shared credentials file.
        type: string
      storageClass:
        description: The storage class to use when storing new objects in OSS.
        example: ""
        type: string
      uploadConcurrency:
        default: 4
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
      useMultipartEtag:
        default: unset
        description: Whether to use ETag in multipart uploads for verification
        type: string
      usePresignedRequest:
        default: false
        description: Whether to use a presigned request or PutObject for single part
          uploads
        type: boolean
      v2Auth:
        default: false
        description: If true use v2 authentication.
        type: boolean
      versionAt:
        default: "off"
        description: Show file versions as they were at the specified time.
        type: string
      versions:
        default: false
        description: Include old versions in directory listings.
        type: boolean
    type: object
  storage.S3ArvanCloudConfig:
    properties:
      accessKeyId:
        description: AWS Access Key ID.
        type: string
      acl:
        description: Canned ACL used when creating buckets and storing or copying
          objects.
        type: string
      bucketAcl:
        description: Canned ACL used when creating buckets.
        example: private
        type: string
      chunkSize:
        default: 5Mi
        description: Chunk size to use for uploading.
        type: string
      copyCutoff:
        default: 4.656Gi
        description: Cutoff for switching to multipart copy.
        type: string
      decompress:
        default: false
        description: If set this will decompress gzip encoded objects.
        type: boolean
      disableChecksum:
        default: false
        description: Don't store MD5 checksum with object metadata.
        type: boolean
      disableHttp2:
        default: false
        description: Disable usage of http2 for S3 backends.
        type: boolean
      downloadUrl:
        description: Custom endpoint for downloads.
        type: string
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for Arvan Cloud Object Storage (AOS) API.
        example: s3.ir-thr-at1.arvanstorage.com
        type: string
      envAuth:
        default: false
        description: Get AWS credentials from runtime (environment variables or EC2/ECS
          meta data if no env vars).
        example: false
        type: boolean
      forcePathStyle:
        default: true
        description: If true use path style access if false use virtual hosted style.
        type: boolean
      listChunk:
        default: 1000
        description: Size of listing chunk (response list for each ListObject S3 request).
        type: integer
      listUrlEncode:
        default: unset
        description: 'Whether to url encode listings: true/false/unset'
        type: string
      listVersion:
        default: 0
        description: 'Version of ListObjects to use: 1,2 or 0 for auto.'
        type: integer
      locationConstraint:
        description: Location constraint - must match endpoint.
        example: ir-thr-at1
        type: string
      maxUploadParts:
        default: 10000
        description: Maximum number of parts in a multipart upload.
        type: integer
      memoryPoolFlushTime:
        default: 1m0s
        description: How often internal memory buffer pools will be flushed.
        type: string
      memoryPoolUseMmap:
        default: false
        description: Whether to use mmap buffers in internal memory pool.
        type: boolean
      mightGzip:
        default: unset
        description: Set this if the backend might gzip objects.
        type: string
      noCheckBucket:
        default: false
        description: If set, don't attempt to check the bucket exists or create it.
        type: boolean
      noHead:
        default: false
        description: If set, don't HEAD uploaded objects to check integrity.
        type: boolean
      noHeadObject:
        default: false
        description: If set, do not do HEAD before GET when getting objects.
        type: boolean
      noSystemMetadata:
        default: false
        description: Suppress setting and reading of system metadata
        type: boolean
      profile:
        description: Profile to use in the shared credentials file.
        type: string
      secretAccessKey:
        description: AWS Secret Access Key (password).
        type: string
      sessionToken:
        description: An AWS session token.
        type: string
      sharedCredentialsFile:
        description: Path to the shared credentials file.
        type: string
      storageClass:
        description: The storage class to use when storing new objects in ArvanCloud.
        example: STANDARD
        type: string
      uploadConcurrency:
        default: 4
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
      useMultipartEtag:
        default: unset
        description: Whether to use ETag in multipart uploads for verification
        type: string
      usePresignedRequest:
        default: false
        description: Whether to use a presigned request or PutObject for single part
          uploads
        type: boolean
      v2Auth:
        default: false
        description: If true use v2 authentication.
        type: boolean
      versionAt:
        default: "off"
        description: Show file versions as they were at the specified time.
        type: string
      versions:
        default: false
        description: Include old versions in directory listings.
        type: boolean
    type: object
  storage.S3CephConfig:
    properties:
      accessKeyId:
        description: AWS Access Key ID.
        type: string
      acl:
        description: Canned ACL used when creating buckets and storing or copying
          objects.
        type: string
      bucketAcl:
        description: Canned ACL used when creating buckets.
        example: private
        type: string
      chunkSize:
        default: 5Mi
        description: Chunk size to use for uploading.
        type: string
      copyCutoff:
        default: 4.656Gi
        description: Cutoff for switching to multipart copy.
        type: string
      decompress:
        default: false
        description: If set this will decompress gzip encoded objects.
        type: boolean
      disableChecksum:
        default: false
        description: Don't store MD5 checksum with object metadata.
        type: boolean
      disableHttp2:
        default: false
        description: Disable usage of http2 for S3 backends.
        type: boolean
      downloadUrl:
        description: Custom endpoint for downloads.
        type: string
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for S3 API.
        type: string
      envAuth:
        default: false
        description: Get AWS credentials from runtime (environment variables or EC2/ECS
          meta data if no env vars).
        example: false
        type: boolean
      forcePathStyle:
        default: true
        description: If true use path style access if false use virtual hosted style.
        type: boolean
      listChunk:
        default: 1000
        description: Size of listing chunk (response list for each ListObject S3 request).
        type: integer
      listUrlEncode:
        default: unset
        description: 'Whether to url encode listings: true/false/unset'
        type: string
      listVersion:
        default: 0
        description: 'Version of ListObjects to use: 1,2 or 0 for auto.'
        type: integer
      locationConstraint:
        description: Location constraint - must be set to match the Region.
        type: string
      maxUploadParts:
        default: 10000
        description: Maximum number of parts in a multipart upload.
        type: integer
      memoryPoolFlushTime:
        default: 1m0s
        description: How often internal memory buffer pools will be flushed.
        type: string
      memoryPoolUseMmap:
        default: false
        description: Whether to use mmap buffers in internal memory pool.
        type: boolean
      mightGzip:
        default: unset
        description: Set this if the backend might gzip objects.
        type: string
      noCheckBucket:
        default: false
        description: If set, don't attempt to check the bucket exists or create it.
        type: boolean
      noHead:
        default: false
        description: If set, don't HEAD uploaded objects to check integrity.
        type: boolean
      noHeadObject:
        default: false
        description: If set, do not do HEAD before GET when getting objects.
        type: boolean
      noSystemMetadata:
        default: false
        description: Suppress setting and reading of system metadata
        type: boolean
      profile:
        description: Profile to use in the shared credentials file.
        type: string
      region:
        description: Region to connect to.
        example: ""
        type: string
      secretAccessKey:
        description: AWS Secret Access Key (password).
        type: string
      serverSideEncryption:
        description: The server-side encryption algorithm used when storing this object
          in S3.
        example: ""
        type: string
      sessionToken:
        description: An AWS session token.
        type: string
      sharedCredentialsFile:
        description: Path to the shared credentials file.
        type: string
      sseCustomerAlgorithm:
        description: If using SSE-C, the server-side encryption algorithm used when
          storing this object in S3.
        example: ""
        type: string
      sseCustomerKey:
        description: To use SSE-C you may provide the secret encryption key used to
          encrypt/decrypt your data.
        example: ""
        type: string
      sseCustomerKeyBase64:
        description: If using SSE-C you must provide the secret encryption key encoded
          in base64 format to encrypt/decrypt your data.
        example: ""
        type: string
      sseCustomerKeyMd5:
        description: If using SSE-C you may provide the secret encryption key MD5
          checksum (optional).
        example: ""
        type: string
      sseKmsKeyId:
        description: If using KMS ID you must provide the ARN of Key.
        example: ""
        type: string
      uploadConcurrency:
        default: 4
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
      useMultipartEtag:
        default: unset
        description: Whether to use ETag in multipart uploads for verification
        type: string
      usePresignedRequest:
        default: false
        description: Whether to use a presigned request or PutObject for single part
          uploads
        type: boolean
      v2Auth:
        default: false
        description: If true use v2 authentication.
        type: boolean
      versionAt:
        default: "off"
        description: Show file versions as they were at the specified time.
        type: string
      versions:
        default: false
        description: Include old versions in directory listings.
        type: boolean
    type: object
  storage.S3ChinaMobileConfig:
    properties:
      accessKeyId:
        description: AWS Access Key ID.
        type: string
      acl:
        description: Canned ACL used when creating buckets and storing or copying
          objects.
        type: string
      bucketAcl:
        description: Canned ACL used when creating buckets.
        example: private
        type: string
      chunkSize:
        default: 5Mi
        description: Chunk size to use for uploading.
        type: string
      copyCutoff:
        default: 4.656Gi
        description: Cutoff for switching to multipart copy.
        type: string
      decompress:
        default: false
        description: If set this will decompress gzip encoded objects.
        type: boolean
      disableChecksum:
        default: false
        description: Don't store MD5 checksum with object metadata.
        type: boolean
      disableHttp2:
        default: false
        description: Disable usage of http2 for S3 backends.
        type: boolean
      downloadUrl:
        description: Custom endpoint for downloads.
        type: string
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for China Mobile Ecloud Elastic Object Storage (EOS)
          API.
        example: eos-wuxi-1.cmecloud.cn
        type: string
      envAuth:
        default: false
        description: Get AWS credentials from runtime (environment variables or EC2/ECS
          meta data if no env vars).
        example: false
        type: boolean
      forcePathStyle:
        default: true
        description: If true use path style access if false use virtual hosted style.
        type: boolean
      listChunk:
        default: 1000
        description: Size of listing chunk (response list for each ListObject S3 request).
        type: integer
      listUrlEncode:
        default: unset
        description: 'Whether to url encode listings: true/false/unset'
        type: string
      listVersion:
        default: 0
        description: 'Version of ListObjects to use: 1,2 or 0 for auto.'
        type: integer
      locationConstraint:
        description: Location constraint - must match endpoint.
        example: wuxi1
        type: string
      maxUploadParts:
        default: 10000
        description: Maximum number of parts in a multipart upload.
        type: integer
      memoryPoolFlushTime:
        default: 1m0s
        description: How often internal memory buffer pools will be flushed.
        type: string
      memoryPoolUseMmap:
        default: false
        description: Whether to use mmap buffers in internal memory pool.
        type: boolean
      mightGzip:
        default: unset
        description: Set this if the backend might gzip objects.
        type: string
      noCheckBucket:
        default: false
        description: If set, don't attempt to check the bucket exists or create it.
        type: boolean
      noHead:
        default: false
        description: If set, don't HEAD uploaded objects to check integrity.
        type: boolean
      noHeadObject:
        default: false
        description: If set, do not do HEAD before GET when getting objects.
        type: boolean
      noSystemMetadata:
        default: false
        description: Suppress setting and reading of system metadata
        type: boolean
      profile:
        description: Profile to use in the shared credentials file.
        type: string
      secretAccessKey:
        description: AWS Secret Access Key (password).
        type: string
      serverSideEncryption:
        description: The server-side encryption algorithm used when storing this object
          in S3.
        example: ""
        type: string
      sessionToken:
        description: An AWS session token.
        type: string
      sharedCredentialsFile:
        description: Path to the shared credentials file.
        type: string
      sseCustomerAlgorithm:
        description: If using SSE-C, the server-side encryption algorithm used when
          storing this object in S3.
        example: ""
        type: string
      sseCustomerKey:
        description: To use SSE-C you may provide the secret encryption key used to
          encrypt/decrypt your data.
        example: ""
        type: string
      sseCustomerKeyBase64:
        description: If using SSE-C you must provide the secret encryption key encoded
          in base64 format to encrypt/decrypt your data.
        example: ""
        type: string
      sseCustomerKeyMd5:
        description: If using SSE-C you may provide the secret encryption key MD5
          checksum (optional).
        example: ""
        type: string
      storageClass:
        description: The storage class to use when storing new objects in ChinaMobile.
        example: ""
        type: string
      uploadConcurrency:
        default: 4
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
      useMultipartEtag:
        default: unset
        description: Whether to use ETag in multipart uploads for verification
        type: string
      usePresignedRequest:
        default: false
        description: Whether to use a presigned request or PutObject for single part
          uploads
        type: boolean
      v2Auth:
        default: false
        description: If true use v2 authentication.
        type: boolean
      versionAt:
        default: "off"
        description: Show file versions as they were at the specified time.
        type: string
      versions:
        default: false
        description: Include old versions in directory listings.
        type: boolean
    type: object
  storage.S3CloudflareConfig:
    properties:
      accessKeyId:
        description: AWS Access Key ID.
        type: string
      bucketAcl:
        description: Canned ACL used when creating buckets.
        example: private
        type: string
      chunkSize:
        default: 5Mi
        description: Chunk size to use for uploading.
        type: string
      copyCutoff:
        default: 4.656Gi
        description: Cutoff for switching to multipart copy.
        type: string
      decompress:
        default: false
        description: If set this will decompress gzip encoded objects.
        type: boolean
      disableChecksum:
        default: false
        description: Don't store MD5 checksum with object metadata.
        type: boolean
      disableHttp2:
        default: false
        description: Disable usage of http2 for S3 backends.
        type: boolean
      downloadUrl:
        description: Custom endpoint for downloads.
        type: string
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for S3 API.
        type: string
      envAuth:
        default: false
        description: Get AWS credentials from runtime (environment variables or EC2/ECS
          meta data if no env vars).
        example: false
        type: boolean
      forcePathStyle:
        default: true
        description: If true use path style access if false use virtual hosted style.
        type: boolean
      listChunk:
        default: 1000
        description: Size of listing chunk (response list for each ListObject S3 request).
        type: integer
      listUrlEncode:
        default: unset
        description: 'Whether to url encode listings: true/false/unset'
        type: string
      listVersion:
        default: 0
        description: 'Version of ListObjects to use: 1,2 or 0 for auto.'
        type: integer
      maxUploadParts:
        default: 10000
        description: Maximum number of parts in a multipart upload.
        type: integer
      memoryPoolFlushTime:
        default: 1m0s
        description: How often internal memory buffer pools will be flushed.
        type: string
      memoryPoolUseMmap:
        default: false
        description: Whether to use mmap buffers in internal memory pool.
        type: boolean
      mightGzip:
        default: unset
        description: Set this if the backend might gzip objects.
        type: string
      noCheckBucket:
        default: false
        description: If set, don't attempt to check the bucket exists or create it.
        type: boolean
      noHead:
        default: false
        description: If set, don't HEAD uploaded objects to check integrity.
        type: boolean
      noHeadObject:
        default: false
        description: If set, do not do HEAD before GET when getting objects.
        type: boolean
      noSystemMetadata:
        default: false
        description: Suppress setting and reading of system metadata
        type: boolean
      profile:
        description: Profile to use in the shared credentials file.
        type: string
      region:
        description: Region to connect to.
        example: auto
        type: string
      secretAccessKey:
        description: AWS Secret Access Key (password).
        type: string
      sessionToken:
        description: An AWS session token.
        type: string
      sharedCredentialsFile:
        description: Path to the shared credentials file.
        type: string
      uploadConcurrency:
        default: 4
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
      useMultipartEtag:
        default: unset
        description: Whether to use ETag in multipart uploads for verification
        type: string
      usePresignedRequest:
        default: false
        description: Whether to use a presigned request or PutObject for single part
          uploads
        type: boolean
      v2Auth:
        default: false
        description: If true use v2 authentication.
        type: boolean
      versionAt:
        default: "off"
        description: Show file versions as they were at the specified time.
        type: string
      versions:
        default: false
        description: Include old versions in directory listings.
        type: boolean
    type: object
  storage.S3DigitalOceanConfig:
    properties:
      accessKeyId:
        description: AWS Access Key ID.
        type: string
      acl:
        description: Canned ACL used when creating buckets and storing or copying
          objects.
        type: string
      bucketAcl:
        description: Canned ACL used when creating buckets.
        example: private
        type: string
      chunkSize:
        default: 5Mi
        description: Chunk size to use for uploading.
        type: string
      copyCutoff:
        default: 4.656Gi
        description: Cutoff for switching to multipart copy.
        type: string
      decompress:
        default: false
        description: If set this will decompress gzip encoded objects.
        type: boolean
      disableChecksum:
        default: false
        description: Don't store MD5 checksum with object metadata.
        type: boolean
      disableHttp2:
        default: false
        description: Disable usage of http2 for S3 backends.
        type: boolean
      downloadUrl:
        description: Custom endpoint for downloads.
        type: string
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for S3 API.
        example: syd1.digitaloceanspaces.com
        type: string
      envAuth:
        default: false
        description: Get AWS credentials from runtime (environment variables or EC2/ECS
          meta data if no env vars).
        example: false
        type: boolean
      forcePathStyle:
        default: true
        description: If true use path style access if false use virtual hosted style.
        type: boolean
      listChunk:
        default: 1000
        description: Size of listing chunk (response list for each ListObject S3 request).
        type: integer
      listUrlEncode:
        default: unset
        description: 'Whether to url encode listings: true/false/unset'
        type: string
      listVersion:
        default: 0
        description: 'Version of ListObjects to use: 1,2 or 0 for auto.'
        type: integer
      locationConstraint:
        description: Location constraint - must be set to match the Region.
        type: string
      maxUploadParts:
        default: 10000
        description: Maximum number of parts in a multipart upload.
        type: integer
      memoryPoolFlushTime:
        default: 1m0s
        description: How often internal memory buffer pools will be flushed.
        type: string
      memoryPoolUseMmap:
        default: false
        description: Whether to use mmap buffers in internal memory pool.
        type: boolean
      mightGzip:
        default: unset
        description: Set this if the backend might gzip objects.
        type: string
      noCheckBucket:
        default: false
        description: If set, don't attempt to check the bucket exists or create it.
        type: boolean
      noHead:
        default: false
        description: If set, don't HEAD uploaded objects to check integrity.
        type: boolean
      noHeadObject:
        default: false
        description: If set, do not do HEAD before GET when getting objects.
        type: boolean
      noSystemMetadata:
        default: false
        description: Suppress setting and reading of system metadata
        type: boolean
      profile:
        description: Profile to use in the shared credentials file.
        type: string
      region:
        description: Region to connect to.
        example: ""
        type: string
      secretAccessKey:
        description: AWS Secret Access Key (password).
        type: string
      sessionToken:
        description: An AWS session token.
        type: string
      sharedCredentialsFile:
        description: Path to the shared credentials file.
        type: string
      uploadConcurrency:
        default: 4
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
      useMultipartEtag:
        default: unset
        description: Whether to use ETag in multipart uploads for verification
        type: string
      usePresignedRequest:
        default: false
        description: Whether to use a presigned request or PutObject for single part
          uploads
        type: boolean
      v2Auth:
        default: false
        description: If true use v2 authentication.
        type: boolean
      versionAt:
        default: "off"
        description: Show file versions as they were at the specified time.
        type: string
      versions:
        default: false
        description: Include old versions in directory listings.
        type: boolean
    type: object
  storage.S3DreamhostConfig:
    properties:
      accessKeyId:
        description: AWS Access Key ID.
        type: string
      acl:
        description: Canned ACL used when creating buckets and storing or copying
          objects.
        type: string
      bucketAcl:
        description: Canned ACL used when creating buckets.
        example: private
        type: string
      chunkSize:
        default: 5Mi
        description: Chunk size to use for uploading.
        type: string
      copyCutoff:
        default: 4.656Gi
        description: Cutoff for switching to multipart copy.
        type: string
      decompress:
        default: false
        description: If set this will decompress gzip encoded objects.
        type: boolean
      disableChecksum:
        default: false
        description: Don't store MD5 checksum with object metadata.
        type: boolean
      disableHttp2:
        default: false
        description: Disable usage of http2 for S3 backends.
        type: boolean
      downloadUrl:
        description: Custom endpoint for downloads.
        type: string
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for S3 API.
        example: objects-us-east-1.dream.io
        type: string
      envAuth:
        default: false
        description: Get AWS credentials from runtime (environment variables or EC2/ECS
          meta data if no env vars).
        example: false
        type: boolean
      forcePathStyle:
        default: true
        description: If true use path style access if false use virtual hosted style.
        type: boolean
      listChunk:
        default: 1000
        description: Size of listing chunk (response list for each ListObject S3 request).
        type: integer
      listUrlEncode:
        default: unset
        description: 'Whether to url encode listings: true/false/unset'
        type: string
      listVersion:
        default: 0
        description: 'Version of ListObjects to use: 1,2 or 0 for auto.'
        type: integer
      locationConstraint:
        description: Location constraint - must be set to match the Region.
        type: string
      maxUploadParts:
        default: 10000
        description: Maximum number of parts in a multipart upload.
        type: integer
      memoryPoolFlushTime:
        default: 1m0s
        description: How often internal memory buffer pools will be flushed.
        type: string
      memoryPoolUseMmap:
        default: false
        description: Whether to use mmap buffers in internal memory pool.
        type: boolean
      mightGzip:
        default: unset
        description: Set this if the backend might gzip objects.
        type: string
      noCheckBucket:
        default: false
        description: If set, don't attempt to check the bucket exists or create it.
        type: boolean
      noHead:
        default: false
        description: If set, don't HEAD uploaded objects to check integrity.
        type: boolean
      noHeadObject:
        default: false
        description: If set, do not do HEAD before GET when getting objects.
        type: boolean
      noSystemMetadata:
        default: false
        description: Suppress setting and reading of system metadata
        type: boolean
      profile:
        description: Profile to use in the shared credentials file.
        type: string
      region:
        description: Region to connect to.
        example: ""
        type: string
      secretAccessKey:
        description: AWS Secret Access Key (password).
        type: string
      sessionToken:
        description: An AWS session token.
        type: string
      sharedCredentialsFile:
        description: Path to the shared credentials file.
        type: string
      uploadConcurrency:
        default: 4
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
      useMultipartEtag:
        default: unset
        description: Whether to use ETag in multipart uploads for verification
        type: string
      usePresignedRequest:
        default: false
        description: Whether to use a presigned request or PutObject for single part
          uploads
        type: boolean
      v2Auth:
        default: false
        description: If true use v2 authentication.
        type: boolean
      versionAt:
        default: "off"
        description: Show file versions as they were at the specified time.
        type: string
      versions:
        default: false
        description: Include old versions in directory listings.
        type: boolean
    type: object
  storage.S3HuaweiOBSConfig:
    properties:
      accessKeyId:
        description: AWS Access Key ID.
        type: string
      acl:
        description: Canned ACL used when creating buckets and storing or copying
          objects.
        type: string
      bucketAcl:
        description: Canned ACL used when creating buckets.
        example: private
        type: string
      chunkSize:
        default: 5Mi
        description: Chunk size to use for uploading.
        type: string
      copyCutoff:
        default: 4.656Gi
        description: Cutoff for switching to multipart copy.
        type: string
      decompress:
        default: false
        description: If set this will decompress gzip encoded objects.
        type: boolean
      disableChecksum:
        default: false
        description: Don't store MD5 checksum with object metadata.
        type: boolean
      disableHttp2:
        default: false
        description: Disable usage of http2 for S3 backends.
        type: boolean
      downloadUrl:
        description: Custom endpoint for downloads.
        type: string
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for OBS API.
        example: obs.af-south-1.myhuaweicloud.com
        type: string
      envAuth:
        default: false
        description: Get AWS credentials from runtime (environment variables or EC2/ECS
          meta data if no env vars).
        example: false
        type: boolean
      forcePathStyle:
        default: true
        description: If true use path style access if false use virtual hosted style.
        type: boolean
      listChunk:
        default: 1000
        description: Size of listing chunk (response list for each ListObject S3 request).
        type: integer
      listUrlEncode:
        default: unset
        description: 'Whether to url encode listings: true/false/unset'
        type: string
      listVersion:
        default: 0
        description: 'Version of ListObjects to use: 1,2 or 0 for auto.'
        type: integer
      maxUploadParts:
        default: 10000
        description: Maximum number of parts in a multipart upload.
        type: integer
      memoryPoolFlushTime:
        default: 1m0s
        description: How often internal memory buffer pools will be flushed.
        type: string
      memoryPoolUseMmap:
        default: false
        description: Whether to use mmap buffers in internal memory pool.
        type: boolean
      mightGzip:
        default: unset
        description: Set this if the backend might gzip objects.
        type: string
      noCheckBucket:
        default: false
        description: If set, don't attempt to check the bucket exists or create it.
        type: boolean
      noHead:
        default: false
        description: If set, don't HEAD uploaded objects to check integrity.
        type: boolean
      noHeadObject:
        default: false
        description: If set, do not do HEAD before GET when getting objects.
        type: boolean
      noSystemMetadata:
        default: false
        description: Suppress setting and reading of system metadata
        type: boolean
      profile:
        description: Profile to use in the shared credentials file.
        type: string
      region:
        description: Region to connect to. - the location where your bucket will be
          created and your data stored. Need bo be same with your endpoint.
        example: af-south-1
        type: string
      secretAccessKey:
        description: AWS Secret Access Key (password).
        type: string
      sessionToken:
        description: An AWS session token.
        type: string
      sharedCredentialsFile:
        description: Path to the shared credentials file.
        type: string
      uploadConcurrency:
        default: 4
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
      useMultipartEtag:
        default: unset
        description: Whether to use ETag in multipart uploads for verification
        type: string
      usePresignedRequest:
        default: false
        description: Whether to use a presigned request or PutObject for single part
          uploads
        type: boolean
      v2Auth:
        default: false
        description: If true use v2 authentication.
        type: boolean
      versionAt:
        default: "off"
        description: Show file versions as they were at the specified time.
        type: string
      versions:
        default: false
        description: Include old versions in directory listings.
        type: boolean
    type: object
  storage.S3IBMCOSConfig:
    properties:
      accessKeyId:
        description: AWS Access Key ID.
        type: string
      acl:
        description: Canned ACL used when creating buckets and storing or copying
          objects.
        example: private
        type: string
      bucketAcl:
        description: Canned ACL used when creating buckets.
        example: private
        type: string
      chunkSize:
        default: 5Mi
        description: Chunk size to use for uploading.
        type: string
      copyCutoff:
        default: 4.656Gi
        description: Cutoff for switching to multipart copy.
        type: string
      decompress:
        default: false
        description: If set this will decompress gzip encoded objects.
        type: boolean
      disableChecksum:
        default: false
        description: Don't store MD5 checksum with object metadata.
        type: boolean
      disableHttp2:
        default: false
        description: Disable usage of http2 for S3 backends.
        type: boolean
      downloadUrl:
        description: Custom endpoint for downloads.
        type: string
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for IBM COS S3 API.
        example: s3.us.cloud-object-storage.appdomain.cloud
        type: string
      envAuth:
        default: false
        description: Get AWS credentials from runtime (environment variables or EC2/ECS
          meta data if no env vars).
        example: false
        type: boolean
      forcePathStyle:
        default: true
        description: If true use path style access if false use virtual hosted style.
        type: boolean
      listChunk:
        default: 1000
        description: Size of listing chunk (response list for each ListObject S3 request).
        type: integer
      listUrlEncode:
        default: unset
        description: 'Whether to url encode listings: true/false/unset'
        type: string
      listVersion:
        default: 0
        description: 'Version of ListObjects to use: 1,2 or 0 for auto.'
        type: integer
      locationConstraint:
        description: Location constraint - must match endpoint when using IBM Cloud
          Public.
        example: us-standard
        type: string
      maxUploadParts:
        default: 10000
        description: Maximum number of parts in a multipart upload.
        type: integer
      memoryPoolFlushTime:
        default: 1m0s
        description: How often internal memory buffer pools will be flushed.
        type: string
      memoryPoolUseMmap:
        default: false
        description: Whether to use mmap buffers in internal memory pool.
        type: boolean
      mightGzip:
        default: unset
        description: Set this if the backend might gzip objects.
        type: string
      noCheckBucket:
        default: false
        description: If set, don't attempt to check the bucket exists or create it.
        type: boolean
      noHead:
        default: false
        description: If set, don't HEAD uploaded objects to check integrity.
        type: boolean
      noHeadObject:
        default: false
        description: If set, do not do HEAD before GET when getting objects.
        type: boolean
      noSystemMetadata:
        default: false
        description: Suppress setting and reading of system metadata
        type: boolean
      profile:
        description: Profile to use in the shared credentials file.
        type: string
      region:
        description: Region to connect to.
        example: ""
        type: string
      secretAccessKey:
        description: AWS Secret Access Key (password).
        type: string
      sessionToken:
        description: An AWS session token.
        type: string
      sharedCredentialsFile:
        description: Path to the shared credentials file.
        type: string
      uploadConcurrency:
        default: 4
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
      useMultipartEtag:
        default: unset
        description: Whether to use ETag in multipart uploads for verification
        type: string
      usePresignedRequest:
        default: false
        description: Whether to use a presigned request or PutObject for single part
          uploads
        type: boolean
      v2Auth:
        default: false
        description: If true use v2 authentication.
        type: boolean
      versionAt:
        default: "off"
        description: Show file versions as they were at the specified time.
        type: string
      versions:
        default: false
        description: Include old versions in directory listings.
        type: boolean
    type: object
  storage.S3IDriveConfig:
    properties:
      accessKeyId:
        description: AWS Access Key ID.
        type: string
      acl:
        description: Canned ACL used when creating buckets and storing or copying
          objects.
        type: string
      bucketAcl:
        description: Canned ACL used when creating buckets.
        example: private
        type: string
      chunkSize:
        default: 5Mi
        description: Chunk size to use for uploading.
        type: string
      copyCutoff:
        default: 4.656Gi
        description: Cutoff for switching to multipart copy.
        type: string
      decompress:
        default: false
        description: If set this will decompress gzip encoded objects.
        type: boolean
      disableChecksum:
        default: false
        description: Don't store MD5 checksum with object metadata.
        type: boolean
      disableHttp2:
        default: false
        description: Disable usage of http2 for S3 backends.
        type: boolean
      downloadUrl:
        description: Custom endpoint for downloads.
        type: string
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      envAuth:
        default: false
        description: Get AWS credentials from runtime (environment variables or EC2/ECS
          meta data if no env vars).
        example: false
        type: boolean
      forcePathStyle:
        default: true
        description: If true use path style access if false use virtual hosted style.
        type: boolean
      listChunk:
        default: 1000
        description: Size of listing chunk (response list for each ListObject S3 request).
        type: integer
      listUrlEncode:
        default: unset
        description: 'Whether to url encode listings: true/false/unset'
        type: string
      listVersion:
        default: 0
        description: 'Version of ListObjects to use: 1,2 or 0 for auto.'
        type: integer
      maxUploadParts:
        default: 10000
        description: Maximum number of parts in a multipart upload.
        type: integer
      memoryPoolFlushTime:
        default: 1m0s
        description: How often internal memory buffer pools will be flushed.
        type: string
      memoryPoolUseMmap:
        default: false
        description: Whether to use mmap buffers in internal memory pool.
        type: boolean
      mightGzip:
        default: unset
        description: Set this if the backend might gzip objects.
        type: string
      noCheckBucket:
        default: false
        description: If set, don't attempt to check the bucket exists or create it.
        type: boolean
      noHead:
        default: false
        description: If set, don't HEAD uploaded objects to check integrity.
        type: boolean
      noHeadObject:
        default: false
        description: If set, do not do HEAD before GET when getting objects.
        type: boolean
      noSystemMetadata:
        default: false
        description: Suppress setting and reading of system metadata
        type: boolean
      profile:
        description: Profile to use in the shared credentials file.
        type: string
      secretAccessKey:
        description: AWS Secret Access Key (password).
        type: string
      sessionToken:
        description: An AWS session token.
        type: string
      sharedCredentialsFile:
        description: Path to the shared credentials file.
        type: string
      uploadConcurrency:
        default: 4
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
      useMultipartEtag:
        default: unset
        description: Whether to use ETag in multipart uploads for verification
        type: string
      usePresignedRequest:
        default: false
        description: Whether to use a presigned request or PutObject for single part
          uploads
        type: boolean
      v2Auth:
        default: false
        description: If true use v2 authentication.
        type: boolean
      versionAt:
        default: "off"
        description: Show file versions as they were at the specified time.
        type: string
      versions:
        default: false
        description: Include old versions in directory listings.
        type: boolean
    type: object
  storage.S3IONOSConfig:
    properties:
      accessKeyId:
        description: AWS Access Key ID.
        type: string
      acl:
        description: Canned ACL used when creating buckets and storing or copying
          objects.
        type: string
      bucketAcl:
        description: Canned ACL used when creating buckets.
        example: private
        type: string
      chunkSize:
        default: 5Mi
        description: Chunk size to use for uploading.
        type: string
      copyCutoff:
        default: 4.656Gi
        description: Cutoff for switching to multipart copy.
        type: string
      decompress:
        default: false
        description: If set this will decompress gzip encoded objects.
        type: boolean
      disableChecksum:
        default: false
        description: Don't store MD5 checksum with object metadata.
        type: boolean
      disableHttp2:
        default: false
        description: Disable usage of http2 for S3 backends.
        type: boolean
      downloadUrl:
        description: Custom endpoint for downloads.
        type: string
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for IONOS S3 Object Storage.
        example: s3-eu-central-1.ionoscloud.com
        type: string
      envAuth:
        default: false
        description: Get AWS credentials from runtime (environment variables or EC2/ECS
          meta data if no env vars).
        example: false
        type: boolean
      forcePathStyle:
        default: true
        description: If true use path style access if false use virtual hosted style.
        type: boolean
      listChunk:
        default: 1000
        description: Size of listing chunk (response list for each ListObject S3 request).
        type: integer
      listUrlEncode:
        default: unset
        description: 'Whether to url encode listings: true/false/unset'
        type: string
      listVersion:
        default: 0
        description: 'Version of ListObjects to use: 1,2 or 0 for auto.'
        type: integer
      maxUploadParts:
        default: 10000
        description: Maximum number of parts in a multipart upload.
        type: integer
      memoryPoolFlushTime:
        default: 1m0s
        description: How often internal memory buffer pools will be flushed.
        type: string
      memoryPoolUseMmap:
        default: false
        description: Whether to use mmap buffers in internal memory pool.
        type: boolean
      mightGzip:
        default: unset
        description: Set this if the backend might gzip objects.
        type: string
      noCheckBucket:
        default: false
        description: If set, don't attempt to check the bucket exists or create it.
        type: boolean
      noHead:
        default: false
        description: If set, don't HEAD uploaded objects to check integrity.
        type: boolean
      noHeadObject:
        default: false
        description: If set, do not do HEAD before GET when getting objects.
        type: boolean
      noSystemMetadata:
        default: false
        description: Suppress setting and reading of system metadata
        type: boolean
      profile:
        description: Profile to use in the shared credentials file.
        type: string
      region:
        description: Region where your bucket will be created and your data stored.
        example: de
        type: string
      secretAccessKey:
        description: AWS Secret Access Key (password).
        type: string
      sessionToken:
        description: An AWS session token.
        type: string
      sharedCredentialsFile:
        description: Path to the shared credentials file.
        type: string
      uploadConcurrency:
        default: 4
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
      useMultipartEtag:
        default: unset
        description: Whether to use ETag in multipart uploads for verification
        type: string
      usePresignedRequest:
        default: false
        description: Whether to use a presigned request or PutObject for single part
          uploads
        type: boolean
      v2Auth:
        default: false
        description: If true use v2 authentication.
        type: boolean
      versionAt:
        default: "off"
        description: Show file versions as they were at the specified time.
        type: string
      versions:
        default: false
        description: Include old versions in directory listings.
        type: boolean
    type: object
  storage.S3LiaraConfig:
    properties:
      accessKeyId:
        description: AWS Access Key ID.
        type: string
      acl:
        description: Canned ACL used when creating buckets and storing or copying
          objects.
        type: string
      bucketAcl:
        description: Canned ACL used when creating buckets.
        example: private
        type: string
      chunkSize:
        default: 5Mi
        description: Chunk size to use for uploading.
        type: string
      copyCutoff:
        default: 4.656Gi
        description: Cutoff for switching to multipart copy.
        type: string
      decompress:
        default: false
        description: If set this will decompress gzip encoded objects.
        type: boolean
      disableChecksum:
        default: false
        description: Don't store MD5 checksum with object metadata.
        type: boolean
      disableHttp2:
        default: false
        description: Disable usage of http2 for S3 backends.
        type: boolean
      downloadUrl:
        description: Custom endpoint for downloads.
        type: string
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for Liara Object Storage API.
        example: storage.iran.liara.space
        type: string
      envAuth:
        default: false
        description: Get AWS credentials from runtime (environment variables or EC2/ECS
          meta data if no env vars).
        example: false
        type: boolean
      forcePathStyle:
        default: true
        description: If true use path style access if false use virtual hosted style.
        type: boolean
      listChunk:
        default: 1000
        description: Size of listing chunk (response list for each ListObject S3 request).
        type: integer
      listUrlEncode:
        default: unset
        description: 'Whether to url encode listings: true/false/unset'
        type: string
      listVersion:
        default: 0
        description: 'Version of ListObjects to use: 1,2 or 0 for auto.'
        type: integer
      maxUploadParts:
        default: 10000
        description: Maximum number of parts in a multipart upload.
        type: integer
      memoryPoolFlushTime:
        default: 1m0s
        description: How often internal memory buffer pools will be flushed.
        type: string
      memoryPoolUseMmap:
        default: false
        description: Whether to use mmap buffers in internal memory pool.
        type: boolean
      mightGzip:
        default: unset
        description: Set this if the backend might gzip objects.
        type: string
      noCheckBucket:
        default: false
        description: If set, don't attempt to check the bucket exists or create it.
        type: boolean
      noHead:
        default: false
        description: If set, don't HEAD uploaded objects to check integrity.
        type: boolean
      noHeadObject:
        default: false
        description: If set, do not do HEAD before GET when getting objects.
        type: boolean
      noSystemMetadata:
        default: false
        description: Suppress setting and reading of system metadata
        type: boolean
      profile:
        description: Profile to use in the shared credentials file.
        type: string
      secretAccessKey:
        description: AWS Secret Access Key (password).
        type: string
      sessionToken:
        description: An AWS session token.
        type: string
      sharedCredentialsFile:
        description: Path to the shared credentials file.
        type: string
      storageClass:
        description: The storage class to use when storing new objects in Liara
        example: STANDARD
        type: string
      uploadConcurrency:
        default: 4
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
      useMultipartEtag:
        default: unset
        description: Whether to use ETag in multipart uploads for verification
        type: string
      usePresignedRequest:
        default: false
        description: Whether to use a presigned request or PutObject for single part
          uploads
        type: boolean
      v2Auth:
        default: false
        description: If true use v2 authentication.
        type: boolean
      versionAt:
        default: "off"
        description: Show file versions as they were at the specified time.
        type: string
      versions:
        default: false
        description: Include old versions in directory listings.
        type: boolean
    type: object
  storage.S3LyveCloudConfig:
    properties:
      accessKeyId:
        description: AWS Access Key ID.
        type: string
      acl:
        description: Canned ACL used when creating buckets and storing or copying
          objects.
        type: string
      bucketAcl:
        description: Canned ACL used when creating buckets.
        example: private
        type: string
      chunkSize:
        default: 5Mi
        description: Chunk size to use for uploading.
        type: string
      copyCutoff:
        default: 4.656Gi
        description: Cutoff for switching to multipart copy.
        type: string
      decompress:
        default: false
        description: If set this will decompress gzip encoded objects.
        type: boolean
      disableChecksum:
        default: false
        description: Don't store MD5 checksum with object metadata.
        type: boolean
      disableHttp2:
        default: false
        description: Disable usage of http2 for S3 backends.
        type: boolean
      downloadUrl:
        description: Custom endpoint for downloads.
        type: string
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for S3 API.
        example: s3.us-east-1.lyvecloud.seagate.com
        type: string
      envAuth:
        default: false
        description: Get AWS credentials from runtime (environment variables or EC2/ECS
          meta data if no env vars).
        example: false
        type: boolean
      forcePathStyle:
        default: true
        description: If true use path style access if false use virtual hosted style.
        type: boolean
      listChunk:
        default: 1000
        description: Size of listing chunk (response list for each ListObject S3 request).
        type: integer
      listUrlEncode:
        default: unset
        description: 'Whether to url encode listings: true/false/unset'
        type: string
      listVersion:
        default: 0
        description: 'Version of ListObjects to use: 1,2 or 0 for auto.'
        type: integer
      locationConstraint:
        description: Location constraint - must be set to match the Region.
        type: string
      maxUploadParts:
        default: 10000
        description: Maximum number of parts in a multipart upload.
        type: integer
      memoryPoolFlushTime:
        default: 1m0s
        description: How often internal memory buffer pools will be flushed.
        type: string
      memoryPoolUseMmap:
        default: false
        description: Whether to use mmap buffers in internal memory pool.
        type: boolean
      mightGzip:
        default: unset
        description: Set this if the backend might gzip objects.
        type: string
      noCheckBucket:
        default: false
        description: If set, don't attempt to check the bucket exists or create it.
        type: boolean
      noHead:
        default: false
        description: If set, don't HEAD uploaded objects to check integrity.
        type: boolean
      noHeadObject:
        default: false
        description: If set, do not do HEAD before GET when getting objects.
        type: boolean
      noSystemMetadata:
        default: false
        description: Suppress setting and reading of system metadata
        type: boolean
      profile:
        description: Profile to use in the shared credentials file.
        type: string
      region:
        description: Region to connect to.
        example: ""
        type: string
      secretAccessKey:
        description: AWS Secret Access Key (password).
        type: string
      sessionToken:
        description: An AWS session token.
        type: string
      sharedCredentialsFile:
        description: Path to the shared credentials file.
        type: string
      uploadConcurrency:
        default: 4
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
      useMultipartEtag:
        default: unset
        description: Whether to use ETag in multipart uploads for verification
        type: string
      usePresignedRequest:
        default: false
        description: Whether to use a presigned request or PutObject for single part
          uploads
        type: boolean
      v2Auth:
        default: false
        description: If true use v2 authentication.
        type: boolean
      versionAt:
        default: "off"
        description: Show file versions as they were at the specified time.
        type: string
      versions:
        default: false
        description: Include old versions in directory listings.
        type: boolean
    type: object
  storage.S3MinioConfig:
    properties:
      accessKeyId:
        description: AWS Access Key ID.
        type: string
      acl:
        description: Canned ACL used when creating buckets and storing or copying
          objects.
        type: string
      bucketAcl:
        description: Canned ACL used when creating buckets.
        example: private
        type: string
      chunkSize:
        default: 5Mi
        description: Chunk size to use for uploading.
        type: string
      copyCutoff:
        default: 4.656Gi
        description: Cutoff for switching to multipart copy.
        type: string
      decompress:
        default: false
        description: If set this will decompress gzip encoded objects.
        type: boolean
      disableChecksum:
        default: false
        description: Don't store MD5 checksum with object metadata.
        type: boolean
      disableHttp2:
        default: false
        description: Disable usage of http2 for S3 backends.
        type: boolean
      downloadUrl:
        description: Custom endpoint for downloads.
        type: string
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for S3 API.
        type: string
      envAuth:
        default: false
        description: Get AWS credentials from runtime (environment variables or EC2/ECS
          meta data if no env vars).
        example: false
        type: boolean
      forcePathStyle:
        default: true
        description: If true use path style access if false use virtual hosted style.
        type: boolean
      listChunk:
        default: 1000
        description: Size of listing chunk (response list for each ListObject S3 request).
        type: integer
      listUrlEncode:
        default: unset
        description: 'Whether to url encode listings: true/false/unset'
        type: string
      listVersion:
        default: 0
        description: 'Version of ListObjects to use: 1,2 or 0 for auto.'
        type: integer
      locationConstraint:
        description: Location constraint - must be set to match the Region.
        type: string
      maxUploadParts:
        default: 10000
        description: Maximum number of parts in a multipart upload.
        type: integer
      memoryPoolFlushTime:
        default: 1m0s
        description: How often internal memory buffer pools will be flushed.
        type: string
      memoryPoolUseMmap:
        default: false
        description: Whether to use mmap buffers in internal memory pool.
        type: boolean
      mightGzip:
        default: unset
        description: Set this if the backend might gzip objects.
        type: string
      noCheckBucket:
        default: false
        description: If set, don't attempt to check the bucket exists or create it.
        type: boolean
      noHead:
        default: false
        description: If set, don't HEAD uploaded objects to check integrity.
        type: boolean
      noHeadObject:
        default: false
        description: If set, do not do HEAD before GET when getting objects.
        type: boolean
      noSystemMetadata:
        default: false
        description: Suppress setting and reading of system metadata
        type: boolean
      profile:
        description: Profile to use in the shared credentials file.
        type: string
      region:
        description: Region to connect to.
        example: ""
        type: string
      secretAccessKey:
        description: AWS Secret Access Key (password).
        type: string
      serverSideEncryption:
        description: The server-side encryption algorithm used when storing this object
          in S3.
        example: ""
        type: string
      sessionToken:
        description: An AWS session token.
        type: string
      sharedCredentialsFile:
        description: Path to the shared credentials file.
        type: string
      sseCustomerAlgorithm:
        description: If using SSE-C, the server-side encryption algorithm used when
          storing this object in S3.
        example: ""
        type: string
      sseCustomerKey:
        description: To use SSE-C you may provide the secret encryption key used to
          encrypt/decrypt your data.
        example: ""
        type: string
      sseCustomerKeyBase64:
        description: If using SSE-C you must provide the secret encryption key encoded
          in base64 format to encrypt/decrypt your data.
        example: ""
        type: string
      sseCustomerKeyMd5:
        description: If using SSE-C you may provide the secret encryption key MD5
          checksum (optional).
        example: ""
        type: string
      sseKmsKeyId:
        description: If using KMS ID you must provide the ARN of Key.
        example: ""
        type: string
      uploadConcurrency:
        default: 4
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
      useMultipartEtag:
        default: unset
        description: Whether to use ETag in multipart uploads for verification
        type: string
      usePresignedRequest:
        default: false
        description: Whether to use a presigned request or PutObject for single part
          uploads
        type: boolean
      v2Auth:
        default: false
        description: If true use v2 authentication.
        type: boolean
      versionAt:
        default: "off"
        description: Show file versions as they were at the specified time.
        type: string
      versions:
        default: false
        description: Include old versions in directory listings.
        type: boolean
    type: object
  storage.S3NeteaseConfig:
    properties:
      accessKeyId:
        description: AWS Access Key ID.
        type: string
      acl:
        description: Canned ACL used when creating buckets and storing or copying
          objects.
        type: string
      bucketAcl:
        description: Canned ACL used when creating buckets.
        example: private
        type: string
      chunkSize:
        default: 5Mi
        description: Chunk size to use for uploading.
        type: string
      copyCutoff:
        default: 4.656Gi
        description: Cutoff for switching to multipart copy.
        type: string
      decompress:
        default: false
        description: If set this will decompress gzip encoded objects.
        type: boolean
      disableChecksum:
        default: false
        description: Don't store MD5 checksum with object metadata.
        type: boolean
      disableHttp2:
        default: false
        description: Disable usage of http2 for S3 backends.
        type: boolean
      downloadUrl:
        description: Custom endpoint for downloads.
        type: string
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for S3 API.
        type: string
      envAuth:
        default: false
        description: Get AWS credentials from runtime (environment variables or EC2/ECS
          meta data if no env vars).
        example: false
        type: boolean
      forcePathStyle:
        default: true
        description: If true use path style access if false use virtual hosted style.
        type: boolean
      listChunk:
        default: 1000
        description: Size of listing chunk (response list for each ListObject S3 request).
        type: integer
      listUrlEncode:
        default: unset
        description: 'Whether to url encode listings: true/false/unset'
        type: string
      listVersion:
        default: 0
        description: 'Version of ListObjects to use: 1,2 or 0 for auto.'
        type: integer
      locationConstraint:
        description: Location constraint - must be set to match the Region.
        type: string
      maxUploadParts:
        default: 10000
        description: Maximum number of parts in a multipart upload.
        type: integer
      memoryPoolFlushTime:
        default: 1m0s
        description: How often internal memory buffer pools will be flushed.
        type: string
      memoryPoolUseMmap:
        default: false
        description: Whether to use mmap buffers in internal memory pool.
        type: boolean
      mightGzip:
        default: unset
        description: Set this if the backend might gzip objects.
        type: string
      noCheckBucket:
        default: false
        description: If set, don't attempt to check the bucket exists or create it.
        type: boolean
      noHead:
        default: false
        description: If set, don't HEAD uploaded objects to check integrity.
        type: boolean
      noHeadObject:
        default: false
        description: If set, do not do HEAD before GET when getting objects.
        type: boolean
      noSystemMetadata:
        default: false
        description: Suppress setting and reading of system metadata
        type: boolean
      profile:
        description: Profile to use in the shared credentials file.
        type: string
      region:
        description: Region to connect to.
        example: ""
        type: string
      secretAccessKey:
        description: AWS Secret Access Key (password).
        type: string
      sessionToken:
        description: An AWS session token.
        type: string
      sharedCredentialsFile:
        description: Path to the shared credentials file.
        type: string
      uploadConcurrency:
        default: 4
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
      useMultipartEtag:
        default: unset
        description: Whether to use ETag in multipart uploads for verification
        type: string
      usePresignedRequest:
        default: false
        description: Whether to use a presigned request or PutObject for single part
          uploads
        type: boolean
      v2Auth:
        default: false
        description: If true use v2 authentication.
        type: boolean
      versionAt:
        default: "off"
        description: Show file versions as they were at the specified time.
        type: string
      versions:
        default: false
        description: Include old versions in directory listings.
        type: boolean
    type: object
  storage.S3OtherConfig:
    properties:
      accessKeyId:
        description: AWS Access Key ID.
        type: string
      acl:
        description: Canned ACL used when creating buckets and storing or copying
          objects.
        type: string
      bucketAcl:
        description: Canned ACL used when creating buckets.
        example: private
        type: string
      chunkSize:
        default: 5Mi
        description: Chunk size to use for uploading.
        type: string
      copyCutoff:
        default: 4.656Gi
        description: Cutoff for switching to multipart copy.
        type: string
      decompress:
        default: false
        description: If set this will decompress gzip encoded objects.
        type: boolean
      disableChecksum:
        default: false
        description: Don't store MD5 checksum with object metadata.
        type: boolean
      disableHttp2:
        default: false
        description: Disable usage of http2 for S3 backends.
        type: boolean
      downloadUrl:
        description: Custom endpoint for downloads.
        type: string
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for S3 API.
        type: string
      envAuth:
        default: false
        description: Get AWS credentials from runtime (environment variables or EC2/ECS
          meta data if no env vars).
        example: false
        type: boolean
      forcePathStyle:
        default: true
        description: If true use path style access if false use virtual hosted style.
        type: boolean
      listChunk:
        default: 1000
        description: Size of listing chunk (response list for each ListObject S3 request).
        type: integer
      listUrlEncode:
        default: unset
        description: 'Whether to url encode listings: true/false/unset'
        type: string
      listVersion:
        default: 0
        description: 'Version of ListObjects to use: 1,2 or 0 for auto.'
        type: integer
      locationConstraint:
        description: Location constraint - must be set to match the Region.
        type: string
      maxUploadParts:
        default: 10000
        description: Maximum number of parts in a multipart upload.
        type: integer
      memoryPoolFlushTime:
        default: 1m0s
        description: How often internal memory buffer pools will be flushed.
        type: string
      memoryPoolUseMmap:
        default: false
        description: Whether to use mmap buffers in internal memory pool.
        type: boolean
      mightGzip:
        default: unset
        description: Set this if the backend might gzip objects.
        type: string
      noCheckBucket:
        default: false
        description: If set, don't attempt to check the bucket exists or create it.
        type: boolean
      noHead:
        default: false
        description: If set, don't HEAD uploaded objects to check integrity.
        type: boolean
      noHeadObject:
        default: false
        description: If set, do not do HEAD before GET when getting objects.
        type: boolean
      noSystemMetadata:
        default: false
        description: Suppress setting and reading of system metadata
        type: boolean
      profile:
        description: Profile to use in the shared credentials file.
        type: string
      region:
        description: Region to connect to.
        example: ""
        type: string
      secretAccessKey:
        description: AWS Secret Access Key (password).
        type: string
      sessionToken:
        description: An AWS session token.
        type: string
      sharedCredentialsFile:
        description: Path to the shared credentials file.
        type: string
      uploadConcurrency:
        default: 4
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
      useMultipartEtag:
        default: unset
        description: Whether to use ETag in multipart uploads for verification
        type: string
      usePresignedRequest:
        default: false
        description: Whether to use a presigned request or PutObject for single part
          uploads
        type: boolean
      v2Auth:
        default: false
        description: If true use v2 authentication.
        type: boolean
      versionAt:
        default: "off"
        description: Show file versions as they were at the specified time.
        type: string
      versions:
        default: false
        description: Include old versions in directory listings.
        type: boolean
    type: object
  storage.S3QiniuConfig:
    properties:
      accessKeyId:
        description: AWS Access Key ID.
        type: string
      acl:
        description: Canned ACL used when creating buckets and storing or copying
          objects.
        type: string
      bucketAcl:
        description: Canned ACL used when creating buckets.
        example: private
        type: string
      chunkSize:
        default: 5Mi
        description: Chunk size to use for uploading.
        type: string
      copyCutoff:
        default: 4.656Gi
        description: Cutoff for switching to multipart copy.
        type: string
      decompress:
        default: false
        description: If set this will decompress gzip encoded objects.
        type: boolean
      disableChecksum:
        default: false
        description: Don't store MD5 checksum with object metadata.
        type: boolean
      disableHttp2:
        default: false
        description: Disable usage of http2 for S3 backends.
        type: boolean
      downloadUrl:
        description: Custom endpoint for downloads.
        type: string
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for Qiniu Object Storage.
        example: s3-cn-east-1.qiniucs.com
        type: string
      envAuth:
        default: false
        description: Get AWS credentials from runtime (environment variables or EC2/ECS
          meta data if no env vars).
        example: false
        type: boolean
      forcePathStyle:
        default: true
        description: If true use path style access if false use virtual hosted style.
        type: boolean
      listChunk:
        default: 1000
        description: Size of listing chunk (response list for each ListObject S3 request).
        type: integer
      listUrlEncode:
        default: unset
        description: 'Whether to url encode listings: true/false/unset'
        type: string
      listVersion:
        default: 0
        description: 'Version of ListObjects to use: 1,2 or 0 for auto.'
        type: integer
      locationConstraint:
        description: Location constraint - must be set to match the Region.
        example: cn-east-1
        type: string
      maxUploadParts:
        default: 10000
        description: Maximum number of parts in a multipart upload.
        type: integer
      memoryPoolFlushTime:
        default: 1m0s
        description: How often internal memory buffer pools will be flushed.
        type: string
      memoryPoolUseMmap:
        default: false
        description: Whether to use mmap buffers in internal memory pool.
        type: boolean
      mightGzip:
        default: unset
        description: Set this if the backend might gzip objects.
        type: string
      noCheckBucket:
        default: false
        description: If set, don't attempt to check the bucket exists or create it.
        type: boolean
      noHead:
        default: false
        description: If set, don't HEAD uploaded objects to check integrity.
        type: boolean
      noHeadObject:
        default: false
        description: If set, do not do HEAD before GET when getting objects.
        type: boolean
      noSystemMetadata:
        default: false
        description: Suppress setting and reading of system metadata
        type: boolean
      profile:
        description: Profile to use in the shared credentials file.
        type: string
      region:
        description: Region to connect to.
        example: cn-east-1
        type: string
      secretAccessKey:
        description: AWS Secret Access Key (password).
        type: string
      sessionToken:
        description: An AWS session token.
        type: string
      sharedCredentialsFile:
        description: Path to the shared credentials file.
        type: string
      storageClass:
        description: The storage class to use when storing new objects in Qiniu.
        example: STANDARD
        type: string
      uploadConcurrency:
        default: 4
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
      useMultipartEtag:
        default: unset
        description: Whether to use ETag in multipart uploads for verification
        type: string
      usePresignedRequest:
        default: false
        description: Whether to use a presigned request or PutObject for single part
          uploads
        type: boolean
      v2Auth:
        default: false
        description: If true use v2 authentication.
        type: boolean
      versionAt:
        default: "off"
        description: Show file versions as they were at the specified time.
        type: string
      versions:
        default: false
        description: Include old versions in directory listings.
        type: boolean
    type: object
  storage.S3RackCorpConfig:
    properties:
      accessKeyId:
        description: AWS Access Key ID.
        type: string
      acl:
        description: Canned ACL used when creating buckets and storing or copying
          objects.
        type: string
      bucketAcl:
        description: Canned ACL used when creating buckets.
        example: private
        type: string
      chunkSize:
        default: 5Mi
        description: Chunk size to use for uploading.
        type: string
      copyCutoff:
        default: 4.656Gi
        description: Cutoff for switching to multipart copy.
        type: string
      decompress:
        default: false
        description: If set this will decompress gzip encoded objects.
        type: boolean
      disableChecksum:
        default: false
        description: Don't store MD5 checksum with object metadata.
        type: boolean
      disableHttp2:
        default: false
        description: Disable usage of http2 for S3 backends.
        type: boolean
      downloadUrl:
        description: Custom endpoint for downloads.
        type: string
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for RackCorp Object Storage.
        example: s3.rackcorp.com
        type: string
      envAuth:
        default: false
        description: Get AWS credentials from runtime (environment variables or EC2/ECS
          meta data if no env vars).
        example: false
        type: boolean
      forcePathStyle:
        default: true
        description: If true use path style access if false use virtual hosted style.
        type: boolean
      listChunk:
        default: 1000
        description: Size of listing chunk (response list for each ListObject S3 request).
        type: integer
      listUrlEncode:
        default: unset
        description: 'Whether to url encode listings: true/false/unset'
        type: string
      listVersion:
        default: 0
        description: 'Version of ListObjects to use: 1,2 or 0 for auto.'
        type: integer
      locationConstraint:
        description: Location constraint - the location where your bucket will be
          located and your data stored.
        example: global
        type: string
      maxUploadParts:
        default: 10000
        description: Maximum number of parts in a multipart upload.
        type: integer
      memoryPoolFlushTime:
        default: 1m0s
        description: How often internal memory buffer pools will be flushed.
        type: string
      memoryPoolUseMmap:
        default: false
        description: Whether to use mmap buffers in internal memory pool.
        type: boolean
      mightGzip:
        default: unset
        description: Set this if the backend might gzip objects.
        type: string
      noCheckBucket:
        default: false
        description: If set, don't attempt to check the bucket exists or create it.
        type: boolean
      noHead:
        default: false
        description: If set, don't HEAD uploaded objects to check integrity.
        type: boolean
      noHeadObject:
        default: false
        description: If set, do not do HEAD before GET when getting objects.
        type: boolean
      noSystemMetadata:
        default: false
        description: Suppress setting and reading of system metadata
        type: boolean
      profile:
        description: Profile to use in the shared credentials file.
        type: string
      region:
        description: region - the location where your bucket will be created and your
          data stored.
        example: global
        type: string
      secretAccessKey:
        description: AWS Secret Access Key (password).
        type: string
      sessionToken:
        description: An AWS session token.
        type: string
      sharedCredentialsFile:
        description: Path to the shared credentials file.
        type: string
      uploadConcurrency:
        default: 4
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
      useMultipartEtag:
        default: unset
        description: Whether to use ETag in multipart uploads for verification
        type: string
      usePresignedRequest:
        default: false
        description: Whether to use a presigned request or PutObject for single part
          uploads
        type: boolean
      v2Auth:
        default: false
        description: If true use v2 authentication.
        type: boolean
      versionAt:
        default: "off"
        description: Show file versions as they were at the specified time.
        type: string
      versions:
        default: false
        description: Include old versions in directory listings.
        type: boolean
    type: object
  storage.S3ScalewayConfig:
    properties:
      accessKeyId:
        description: AWS Access Key ID.
        type: string
      acl:
        description: Canned ACL used when creating buckets and storing or copying
          objects.
        type: string
      bucketAcl:
        description: Canned ACL used when creating buckets.
        example: private
        type: string
      chunkSize:
        default: 5Mi
        description: Chunk size to use for uploading.
        type: string
      copyCutoff:
        default: 4.656Gi
        description: Cutoff for switching to multipart copy.
        type: string
      decompress:
        default: false
        description: If set this will decompress gzip encoded objects.
        type: boolean
      disableChecksum:
        default: false
        description: Don't store MD5 checksum with object metadata.
        type: boolean
      disableHttp2:
        default: false
        description: Disable usage of http2 for S3 backends.
        type: boolean
      downloadUrl:
        description: Custom endpoint for downloads.
        type: string
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for Scaleway Object Storage.
        example: s3.nl-ams.scw.cloud
        type: string
      envAuth:
        default: false
        description: Get AWS credentials from runtime (environment variables or EC2/ECS
          meta data if no env vars).
        example: false
        type: boolean
      forcePathStyle:
        default: true
        description: If true use path style access if false use virtual hosted style.
        type: boolean
      listChunk:
        default: 1000
        description: Size of listing chunk (response list for each ListObject S3 request).
        type: integer
      listUrlEncode:
        default: unset
        description: 'Whether to url encode listings: true/false/unset'
        type: string
      listVersion:
        default: 0
        description: 'Version of ListObjects to use: 1,2 or 0 for auto.'
        type: integer
      maxUploadParts:
        default: 10000
        description: Maximum number of parts in a multipart upload.
        type: integer
      memoryPoolFlushTime:
        default: 1m0s
        description: How often internal memory buffer pools will be flushed.
        type: string
      memoryPoolUseMmap:
        default: false
        description: Whether to use mmap buffers in internal memory pool.
        type: boolean
      mightGzip:
        default: unset
        description: Set this if the backend might gzip objects.
        type: string
      noCheckBucket:
        default: false
        description: If set, don't attempt to check the bucket exists or create it.
        type: boolean
      noHead:
        default: false
        description: If set, don't HEAD uploaded objects to check integrity.
        type: boolean
      noHeadObject:
        default: false
        description: If set, do not do HEAD before GET when getting objects.
        type: boolean
      noSystemMetadata:
        default: false
        description: Suppress setting and reading of system metadata
        type: boolean
      profile:
        description: Profile to use in the shared credentials file.
        type: string
      region:
        description: Region to connect to.
        example: nl-ams
        type: string
      secretAccessKey:
        description: AWS Secret Access Key (password).
        type: string
      sessionToken:
        description: An AWS session token.
        type: string
      sharedCredentialsFile:
        description: Path to the shared credentials file.
        type: string
      storageClass:
        description: The storage class to use when storing new objects in S3.
        example: ""
        type: string
      uploadConcurrency:
        default: 4
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
      useMultipartEtag:
        default: unset
        description: Whether to use ETag in multipart uploads for verification
        type: string
      usePresignedRequest:
        default: false
        description: Whether to use a presigned request or PutObject for single part
          uploads
        type: boolean
      v2Auth:
        default: false
        description: If true use v2 authentication.
        type: boolean
      versionAt:
        default: "off"
        description: Show file versions as they were at the specified time.
        type: string
      versions:
        default: false
        description: Include old versions in directory listings.
        type: boolean
    type: object
  storage.S3SeaweedFSConfig:
    properties:
      accessKeyId:
        description: AWS Access Key ID.
        type: string
      acl:
        description: Canned ACL used when creating buckets and storing or copying
          objects.
        type: string
      bucketAcl:
        description: Canned ACL used when creating buckets.
        example: private
        type: string
      chunkSize:
        default: 5Mi
        description: Chunk size to use for uploading.
        type: string
      copyCutoff:
        default: 4.656Gi
        description: Cutoff for switching to multipart copy.
        type: string
      decompress:
        default: false
        description: If set this will decompress gzip encoded objects.
        type: boolean
      disableChecksum:
        default: false
        description: Don't store MD5 checksum with object metadata.
        type: boolean
      disableHttp2:
        default: false
        description: Disable usage of http2 for S3 backends.
        type: boolean
      downloadUrl:
        description: Custom endpoint for downloads.
        type: string
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for S3 API.
        example: localhost:8333
        type: string
      envAuth:
        default: false
        description: Get AWS credentials from runtime (environment variables or EC2/ECS
          meta data if no env vars).
        example: false
        type: boolean
      forcePathStyle:
        default: true
        description: If true use path style access if false use virtual hosted style.
        type: boolean
      listChunk:
        default: 1000
        description: Size of listing chunk (response list for each ListObject S3 request).
        type: integer
      listUrlEncode:
        default: unset
        description: 'Whether to url encode listings: true/false/unset'
        type: string
      listVersion:
        default: 0
        description: 'Version of ListObjects to use: 1,2 or 0 for auto.'
        type: integer
      locationConstraint:
        description: Location constraint - must be set to match the Region.
        type: string
      maxUploadParts:
        default: 10000
        description: Maximum number of parts in a multipart upload.
        type: integer
      memoryPoolFlushTime:
        default: 1m0s
        description: How often internal memory buffer pools will be flushed.
        type: string
      memoryPoolUseMmap:
        default: false
        description: Whether to use mmap buffers in internal memory pool.
        type: boolean
      mightGzip:
        default: unset
        description: Set this if the backend might gzip objects.
        type: string
      noCheckBucket:
        default: false
        description: If set, don't attempt to check the bucket exists or create it.
        type: boolean
      noHead:
        default: false
        description: If set, don't HEAD uploaded objects to check integrity.
        type: boolean
      noHeadObject:
        default: false
        description: If set, do not do HEAD before GET when getting objects.
        type: boolean
      noSystemMetadata:
        default: false
        description: Suppress setting and reading of system metadata
        type: boolean
      profile:
        description: Profile to use in the shared credentials file.
        type: string
      region:
        description: Region to connect to.
        example: ""
        type: string
      secretAccessKey:
        description: AWS Secret Access Key (password).
        type: string
      sessionToken:
        description: An AWS session token.
        type: string
      sharedCredentialsFile:
        description: Path to the shared credentials file.
        type: string
      uploadConcurrency:
        default: 4
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
      useMultipartEtag:
        default: unset
        description: Whether to use ETag in multipart uploads for verification
        type: string
      usePresignedRequest:
        default: false
        description: Whether to use a presigned request or PutObject for single part
          uploads
        type: boolean
      v2Auth:
        default: false
        description: If true use v2 authentication.
        type: boolean
      versionAt:
        default: "off"
        description: Show file versions as they were at the specified time.
        type: string
      versions:
        default: false
        description: Include old versions in directory listings.
        type: boolean
    type: object
  storage.S3StackPathConfig:
    properties:
      accessKeyId:
        description: AWS Access Key ID.
        type: string
      acl:
        description: Canned ACL used when creating buckets and storing or copying
          objects.
        type: string
      bucketAcl:
        description: Canned ACL used when creating buckets.
        example: private
        type: string
      chunkSize:
        default: 5Mi
        description: Chunk size to use for uploading.
        type: string
      copyCutoff:
        default: 4.656Gi
        description: Cutoff for switching to multipart copy.
        type: string
      decompress:
        default: false
        description: If set this will decompress gzip encoded objects.
        type: boolean
      disableChecksum:
        default: false
        description: Don't store MD5 checksum with object metadata.
        type: boolean
      disableHttp2:
        default: false
        description: Disable usage of http2 for S3 backends.
        type: boolean
      downloadUrl:
        description: Custom endpoint for downloads.
        type: string
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for StackPath Object Storage.
        example: s3.us-east-2.stackpathstorage.com
        type: string
      envAuth:
        default: false
        description: Get AWS credentials from runtime (environment variables or EC2/ECS
          meta data if no env vars).
        example: false
        type: boolean
      forcePathStyle:
        default: true
        description: If true use path style access if false use virtual hosted style.
        type: boolean
      listChunk:
        default: 1000
        description: Size of listing chunk (response list for each ListObject S3 request).
        type: integer
      listUrlEncode:
        default: unset
        description: 'Whether to url encode listings: true/false/unset'
        type: string
      listVersion:
        default: 0
        description: 'Version of ListObjects to use: 1,2 or 0 for auto.'
        type: integer
      maxUploadParts:
        default: 10000
        description: Maximum number of parts in a multipart upload.
        type: integer
      memoryPoolFlushTime:
        default: 1m0s
        description: How often internal memory buffer pools will be flushed.
        type: string
      memoryPoolUseMmap:
        default: false
        description: Whether to use mmap buffers in internal memory pool.
        type: boolean
      mightGzip:
        default: unset
        description: Set this if the backend might gzip objects.
        type: string
      noCheckBucket:
        default: false
        description: If set, don't attempt to check the bucket exists or create it.
        type: boolean
      noHead:
        default: false
        description: If set, don't HEAD uploaded objects to check integrity.
        type: boolean
      noHeadObject:
        default: false
        description: If set, do not do HEAD before GET when getting objects.
        type: boolean
      noSystemMetadata:
        default: false
        description: Suppress setting and reading of system metadata
        type: boolean
      profile:
        description: Profile to use in the shared credentials file.
        type: string
      region:
        description: Region to connect to.
        example: ""
        type: string
      secretAccessKey:
        description: AWS Secret Access Key (password).
        type: string
      sessionToken:
        description: An AWS session token.
        type: string
      sharedCredentialsFile:
        description: Path to the shared credentials file.
        type: string
      uploadConcurrency:
        default: 4
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
      useMultipartEtag:
        default: unset
        description: Whether to use ETag in multipart uploads for verification
        type: string
      usePresignedRequest:
        default: false
        description: Whether to use a presigned request or PutObject for single part
          uploads
        type: boolean
      v2Auth:
        default: false
        description: If true use v2 authentication.
        type: boolean
      versionAt:
        default: "off"
        description: Show file versions as they were at the specified time.
        type: string
      versions:
        default: false
        description: Include old versions in directory listings.
        type: boolean
    type: object
  storage.S3StorjConfig:
    properties:
      accessKeyId:
        description: AWS Access Key ID.
        type: string
      bucketAcl:
        description: Canned ACL used when creating buckets.
        example: private
        type: string
      chunkSize:
        default: 5Mi
        description: Chunk size to use for uploading.
        type: string
      copyCutoff:
        default: 4.656Gi
        description: Cutoff for switching to multipart copy.
        type: string
      decompress:
        default: false
        description: If set this will decompress gzip encoded objects.
        type: boolean
      disableChecksum:
        default: false
        description: Don't store MD5 checksum with object metadata.
        type: boolean
      disableHttp2:
        default: false
        description: Disable usage of http2 for S3 backends.
        type: boolean
      downloadUrl:
        description: Custom endpoint for downloads.
        type: string
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for Storj Gateway.
        example: gateway.storjshare.io
        type: string
      envAuth:
        default: false
        description: Get AWS credentials from runtime (environment variables or EC2/ECS
          meta data if no env vars).
        example: false
        type: boolean
      forcePathStyle:
        default: true
        description: If true use path style access if false use virtual hosted style.
        type: boolean
      listChunk:
        default: 1000
        description: Size of listing chunk (response list for each ListObject S3 request).
        type: integer
      listUrlEncode:
        default: unset
        description: 'Whether to url encode listings: true/false/unset'
        type: string
      listVersion:
        default: 0
        description: 'Version of ListObjects to use: 1,2 or 0 for auto.'
        type: integer
      maxUploadParts:
        default: 10000
        description: Maximum number of parts in a multipart upload.
        type: integer
      memoryPoolFlushTime:
        default: 1m0s
        description: How often internal memory buffer pools will be flushed.
        type: string
      memoryPoolUseMmap:
        default: false
        description: Whether to use mmap buffers in internal memory pool.
        type: boolean
      mightGzip:
        default: unset
        description: Set this if the backend might gzip objects.
        type: string
      noCheckBucket:
        default: false
        description: If set, don't attempt to check the bucket exists or create it.
        type: boolean
      noHead:
        default: false
        description: If set, don't HEAD uploaded objects to check integrity.
        type: boolean
      noHeadObject:
        default: false
        description: If set, do not do HEAD before GET when getting objects.
        type: boolean
      noSystemMetadata:
        default: false
        description: Suppress setting and reading of system metadata
        type: boolean
      profile:
        description: Profile to use in the shared credentials file.
        type: string
      secretAccessKey:
        description: AWS Secret Access Key (password).
        type: string
      sessionToken:
        description: An AWS session token.
        type: string
      sharedCredentialsFile:
        description: Path to the shared credentials file.
        type: string
      uploadConcurrency:
        default: 4
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
      useMultipartEtag:
        default: unset
        description: Whether to use ETag in multipart uploads for verification
        type: string
      usePresignedRequest:
        default: false
        description: Whether to use a presigned request or PutObject for single part
          uploads
        type: boolean
      v2Auth:
        default: false
        description: If true use v2 authentication.
        type: boolean
      versionAt:
        default: "off"
        description: Show file versions as they were at the specified time.
        type: string
      versions:
        default: false
        description: Include old versions in directory listings.
        type: boolean
    type: object
  storage.S3TencentCOSConfig:
    properties:
      accessKeyId:
        description: AWS Access Key ID.
        type: string
      acl:
        description: Canned ACL used when creating buckets and storing or copying
          objects.
        example: default
        type: string
      bucketAcl:
        description: Canned ACL used when creating buckets.
        example: private
        type: string
      chunkSize:
        default: 5Mi
        description: Chunk size to use for uploading.
        type: string
      copyCutoff:
        default: 4.656Gi
        description: Cutoff for switching to multipart copy.
        type: string
      decompress:
        default: false
        description: If set this will decompress gzip encoded objects.
        type: boolean
      disableChecksum:
        default: false
        description: Don't store MD5 checksum with object metadata.
        type: boolean
      disableHttp2:
        default: false
        description: Disable usage of http2 for S3 backends.
        type: boolean
      downloadUrl:
        description: Custom endpoint for downloads.
        type: string
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for Tencent COS API.
        example: cos.ap-beijing.myqcloud.com
        type: string
      envAuth:
        default: false
        description: Get AWS credentials from runtime (environment variables or EC2/ECS
          meta data if no env vars).
        example: false
        type: boolean
      forcePathStyle:
        default: true
        description: If true use path style access if false use virtual hosted style.
        type: boolean
      listChunk:
        default: 1000
        description: Size of listing chunk (response list for each ListObject S3 request).
        type: integer
      listUrlEncode:
        default: unset
        description: 'Whether to url encode listings: true/false/unset'
        type: string
      listVersion:
        default: 0
        description: 'Version of ListObjects to use: 1,2 or 0 for auto.'
        type: integer
      maxUploadParts:
        default: 10000
        description: Maximum number of parts in a multipart upload.
        type: integer
      memoryPoolFlushTime:
        default: 1m0s
        description: How often internal memory buffer pools will be flushed.
        type: string
      memoryPoolUseMmap:
        default: false
        description: Whether to use mmap buffers in internal memory pool.
        type: boolean
      mightGzip:
        default: unset
        description: Set this if the backend might gzip objects.
        type: string
      noCheckBucket:
        default: false
        description: If set, don't attempt to check the bucket exists or create it.
        type: boolean
      noHead:
        default: false
        description: If set, don't HEAD uploaded objects to check integrity.
        type: boolean
      noHeadObject:
        default: false
        description: If set, do not do HEAD before GET when getting objects.
        type: boolean
      noSystemMetadata:
        default: false
        description: Suppress setting and reading of system metadata
        type: boolean
      profile:
        description: Profile to use in the shared credentials file.
        type: string
      secretAccessKey:
        description: AWS Secret Access Key (password).
        type: string
      sessionToken:
        description: An AWS session token.
        type: string
      sharedCredentialsFile:
        description: Path to the shared credentials file.
        type: string
      storageClass:
        description: The storage class to use when storing new objects in Tencent
          COS.
        example: ""
        type: string
      uploadConcurrency:
        default: 4
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
      useMultipartEtag:
        default: unset
        description: Whether to use ETag in multipart uploads for verification
        type: string
      usePresignedRequest:
        default: false
        description: Whether to use a presigned request or PutObject for single part
          uploads
        type: boolean
      v2Auth:
        default: false
        description: If true use v2 authentication.
        type: boolean
      versionAt:
        default: "off"
        description: Show file versions as they were at the specified time.
        type: string
      versions:
        default: false
        description: Include old versions in directory listings.
        type: boolean
    type: object
  storage.S3WasabiConfig:
    properties:
      accessKeyId:
        description: AWS Access Key ID.
        type: string
      acl:
        description: Canned ACL used when creating buckets and storing or copying
          objects.
        type: string
      bucketAcl:
        description: Canned ACL used when creating buckets.
        example: private
        type: string
      chunkSize:
        default: 5Mi
        description: Chunk size to use for uploading.
        type: string
      copyCutoff:
        default: 4.656Gi
        description: Cutoff for switching to multipart copy.
        type: string
      decompress:
        default: false
        description: If set this will decompress gzip encoded objects.
        type: boolean
      disableChecksum:
        default: false
        description: Don't store MD5 checksum with object metadata.
        type: boolean
      disableHttp2:
        default: false
        description: Disable usage of http2 for S3 backends.
        type: boolean
      downloadUrl:
        description: Custom endpoint for downloads.
        type: string
      encoding:
        default: Slash,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for S3 API.
        example: s3.wasabisys.com
        type: string
      envAuth:
        default: false
        description: Get AWS credentials from runtime (environment variables or EC2/ECS
          meta data if no env vars).
        example: false
        type: boolean
      forcePathStyle:
        default: true
        description: If true use path style access if false use virtual hosted style.
        type: boolean
      listChunk:
        default: 1000
        description: Size of listing chunk (response list for each ListObject S3 request).
        type: integer
      listUrlEncode:
        default: unset
        description: 'Whether to url encode listings: true/false/unset'
        type: string
      listVersion:
        default: 0
        description: 'Version of ListObjects to use: 1,2 or 0 for auto.'
        type: integer
      locationConstraint:
        description: Location constraint - must be set to match the Region.
        type: string
      maxUploadParts:
        default: 10000
        description: Maximum number of parts in a multipart upload.
        type: integer
      memoryPoolFlushTime:
        default: 1m0s
        description: How often internal memory buffer pools will be flushed.
        type: string
      memoryPoolUseMmap:
        default: false
        description: Whether to use mmap buffers in internal memory pool.
        type: boolean
      mightGzip:
        default: unset
        description: Set this if the backend might gzip objects.
        type: string
      noCheckBucket:
        default: false
        description: If set, don't attempt to check the bucket exists or create it.
        type: boolean
      noHead:
        default: false
        description: If set, don't HEAD uploaded objects to check integrity.
        type: boolean
      noHeadObject:
        default: false
        description: If set, do not do HEAD before GET when getting objects.
        type: boolean
      noSystemMetadata:
        default: false
        description: Suppress setting and reading of system metadata
        type: boolean
      profile:
        description: Profile to use in the shared credentials file.
        type: string
      region:
        description: Region to connect to.
        example: ""
        type: string
      secretAccessKey:
        description: AWS Secret Access Key (password).
        type: string
      sessionToken:
        description: An AWS session token.
        type: string
      sharedCredentialsFile:
        description: Path to the shared credentials file.
        type: string
      uploadConcurrency:
        default: 4
        description: Concurrency for multipart uploads.
        type: integer
      uploadCutoff:
        default: 200Mi
        description: Cutoff for switching to chunked upload.
        type: string
      useMultipartEtag:
        default: unset
        description: Whether to use ETag in multipart uploads for verification
        type: string
      usePresignedRequest:
        default: false
        description: Whether to use a presigned request or PutObject for single part
          uploads
        type: boolean
      v2Auth:
        default: false
        description: If true use v2 authentication.
        type: boolean
      versionAt:
        default: "off"
        description: Show file versions as they were at the specified time.
        type: string
      versions:
        default: false
        description: Include old versions in directory listings.
        type: boolean
    type: object
  storage.SeafileConfig:
    properties:
      2fa:
        default: false
        description: Two-factor authentication ('true' if the account has 2FA enabled).
        type: boolean
      authToken:
        description: Authentication token.
        type: string
      createLibrary:
        default: false
        description: Should rclone create a library if it doesn't exist.
        type: boolean
      encoding:
        default: Slash,DoubleQuote,BackSlash,Ctl,InvalidUtf8
        description: The encoding for the backend.
        type: string
      library:
        description: Name of the library.
        type: string
      libraryKey:
        description: Library password (for encrypted libraries only).
        type: string
      pass:
        description: Password.
        type: string
      url:
        description: URL of seafile host to connect to.
        example: https://cloud.seafile.com/
        type: string
      user:
        description: User name (usually email address).
        type: string
    type: object
  storage.SftpConfig:
    properties:
      askPassword:
        default: false
        description: Allow asking for SFTP password when needed.
        type: boolean
      chunkSize:
        default: 32Ki
        description: Upload and download chunk size.
        type: string
      ciphers:
        description: Space separated list of ciphers to be used for session encryption,
          ordered by preference.
        type: string
      concurrency:
        default: 64
        description: The maximum number of outstanding requests for one file
        type: integer
      disableConcurrentReads:
        default: false
        description: If set don't use concurrent reads.
        type: boolean
      disableConcurrentWrites:
        default: false
        description: If set don't use concurrent writes.
        type: boolean
      disableHashcheck:
        default: false
        description: Disable the execution of SSH commands to determine if remote
          file hashing is available.
        type: boolean
      host:
        description: SSH host to connect to.
        type: string
      idleTimeout:
        default: 1m0s
        description: Max time before closing idle connections.
        type: string
      keyExchange:
        description: Space separated list of key exchange algorithms, ordered by preference.
        type: string
      keyFile:
        description: Path to PEM-encoded private key file.
        type: string
      keyFilePass:
        description: The passphrase to decrypt the PEM-encoded private key file.
        type: string
      keyPem:
        description: Raw PEM-encoded private key.
        type: string
      keyUseAgent:
        default: false
        description: When set forces the usage of the ssh-agent.
        type: boolean
      knownHostsFile:
        description: Optional path to known_hosts file.
        example: ~/.ssh/known_hosts
        type: string
      macs:
        description: Space separated list of MACs (message authentication code) algorithms,
          ordered by preference.
        type: string
      md5sumCommand:
        description: The command used to read md5 hashes.
        type: string
      pass:
        description: SSH password, leave blank to use ssh-agent.
        type: string
      pathOverride:
        description: Override path used by SSH shell commands.
        type: string
      port:
        default: 22
        description: SSH port number.
        type: integer
      pubkeyFile:
        description: Optional path to public key file.
        type: string
      serverCommand:
        description: Specifies the path or command to run a sftp server on the remote
          host.
        type: string
      setEnv:
        description: Environment variables to pass to sftp and commands
        type: string
      setModtime:
        default: true
        description: Set the modified time on the remote if set.
        type: boolean
      sha1sumCommand:
        description: The command used to read sha1 hashes.
        type: string
      shellType:
        description: The type of SSH shell on remote server, if any.
        example: none
        type: string
      skipLinks:
        default: false
        description: Set to skip any symlinks and any other non regular files.
        type: boolean
      subsystem:
        default: sftp
        description: Specifies the SSH2 subsystem on the remote host.
        type: string
      useFstat:
        default: false
        description: If set use fstat instead of stat.
        type: boolean
      useInsecureCipher:
        default: false
        description: Enable the use of insecure ciphers and key exchange methods.
        example: false
        type: boolean
      user:
        default: $USER
        description: SSH username.
        type: string
    type: object
  storage.SharefileConfig:
    properties:
      chunkSize:
        default: 64Mi
        description: Upload chunk size.
        type: string
      encoding:
        default: Slash,LtGt,DoubleQuote,Colon,Question,Asterisk,Pipe,BackSlash,Ctl,LeftSpace,LeftPeriod,RightSpace,RightPeriod,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      endpoint:
        description: Endpoint for API calls.
        type: string
      rootFolderId:
        description: ID of the root folder.
        example: ""
        type: string
      uploadCutoff:
        default: 128Mi
        description: Cutoff for switching to multipart upload.
        type: string
    type: object
  storage.SiaConfig:
    properties:
      apiPassword:
        description: Sia Daemon API Password.
        type: string
      apiUrl:
        default: http://127.0.0.1:9980
        description: Sia daemon API URL, like http://sia.daemon.host:9980.
        type: string
      encoding:
        default: Slash,Question,Hash,Percent,Del,Ctl,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      userAgent:
        default: Sia-Agent
        description: Siad User Agent
        type: string
    type: object
  storage.SmbConfig:
    properties:
      caseInsensitive:
        default: true
        description: Whether the server is configured to be case-insensitive.
        type: boolean
      domain:
        default: WORKGROUP
        description: Domain name for NTLM authentication.
        type: string
      encoding:
        default: Slash,LtGt,DoubleQuote,Colon,Question,Asterisk,Pipe,BackSlash,Ctl,RightSpace,RightPeriod,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      hideSpecialShare:
        default: true
        description: Hide special shares (e.g. print$) which users aren't supposed
          to access.
        type: boolean
      host:
        description: SMB server hostname to connect to.
        type: string
      idleTimeout:
        default: 1m0s
        description: Max time before closing idle connections.
        type: string
      pass:
        description: SMB password.
        type: string
      port:
        default: 445
        description: SMB port number.
        type: integer
      spn:
        description: Service principal name.
        type: string
      user:
        default: $USER
        description: SMB username.
        type: string
    type: object
  storage.StorjExistingConfig:
    properties:
      accessGrant:
        description: Access grant.
        type: string
    type: object
  storage.StorjNewConfig:
    properties:
      apiKey:
        description: API key.
        type: string
      passphrase:
        description: Encryption passphrase.
        type: string
      satelliteAddress:
        default: us1.storj.io
        description: Satellite address.
        example: us1.storj.io
        type: string
    type: object
  storage.SugarsyncConfig:
    properties:
      accessKeyId:
        description: Sugarsync Access Key ID.
        type: string
      appId:
        description: Sugarsync App ID.
        type: string
      authorization:
        description: Sugarsync authorization.
        type: string
      authorizationExpiry:
        description: Sugarsync authorization expiry.
        type: string
      deletedId:
        description: Sugarsync deleted folder id.
        type: string
      encoding:
        default: Slash,Ctl,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      hardDelete:
        default: false
        description: Permanently delete files if true
        type: boolean
      privateAccessKey:
        description: Sugarsync Private Access Key.
        type: string
      refreshToken:
        description: Sugarsync refresh token.
        type: string
      rootId:
        description: Sugarsync root id.
        type: string
      user:
        description: Sugarsync user.
        type: string
    type: object
  storage.SwiftConfig:
    properties:
      applicationCredentialId:
        description: Application Credential ID (OS_APPLICATION_CREDENTIAL_ID).
        type: string
      applicationCredentialName:
        description: Application Credential Name (OS_APPLICATION_CREDENTIAL_NAME).
        type: string
      applicationCredentialSecret:
        description: Application Credential Secret (OS_APPLICATION_CREDENTIAL_SECRET).
        type: string
      auth:
        description: Authentication URL for server (OS_AUTH_URL).
        example: https://auth.api.rackspacecloud.com/v1.0
        type: string
      authToken:
        description: Auth Token from alternate authentication - optional (OS_AUTH_TOKEN).
        type: string
      authVersion:
        default: 0
        description: AuthVersion - optional - set to (1,2,3) if your auth URL has
          no version (ST_AUTH_VERSION).
        type: integer
      chunkSize:
        default: 5Gi
        description: Above this size files will be chunked into a _segments container.
        type: string
      domain:
        description: User domain - optional (v3 auth) (OS_USER_DOMAIN_NAME)
        type: string
      encoding:
        default: Slash,InvalidUtf8
        description: The encoding for the backend.
        type: string
      endpointType:
        default: public
        description: Endpoint type to choose from the service catalogue (OS_ENDPOINT_TYPE).
        example: public
        type: string
      envAuth:
        default: false
        description: Get swift credentials from environment variables in standard
          OpenStack form.
        example: false
        type: boolean
      key:
        description: API key or password (OS_PASSWORD).
        type: string
      leavePartsOnError:
        default: false
        description: If true avoid calling abort upload on a failure.
        type: boolean
      noChunk:
        default: false
        description: Don't chunk files during streaming upload.
        type: boolean
      noLargeObjects:
        default: false
        description: Disable support for static and dynamic large objects
        type: boolean
      region:
        description: Region name - optional (OS_REGION_NAME).
        type: string
      storagePolicy:
        description: The storage policy to use when creating a new container.
        example: ""
        type: string
      storageUrl:
        description: Storage URL - optional (OS_STORAGE_URL).
        type: string
      tenant:
        description: Tenant name - optional for v1 auth, this or tenant_id required
          otherwise (OS_TENANT_NAME or OS_PROJECT_NAME).
        type: string
      tenantDomain:
        description: Tenant domain - optional (v3 auth) (OS_PROJECT_DOMAIN_NAME).
        type: string
      tenantId:
        description: Tenant ID - optional for v1 auth, this or tenant required otherwise
          (OS_TENANT_ID).
        type: string
      user:
        description: User name to log in (OS_USERNAME).
        type: string
      userId:
        description: User ID to log in - optional - most swift systems use user and
          leave this blank (v3 auth) (OS_USER_ID).
        type: string
    type: object
  storage.UptoboxConfig:
    properties:
      accessToken:
        description: Your access token.
        type: string
      encoding:
        default: Slash,LtGt,DoubleQuote,BackQuote,Del,Ctl,LeftSpace,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
    type: object
  storage.WebdavConfig:
    properties:
      bearerToken:
        description: Bearer token instead of user/pass (e.g. a Macaroon).
        type: string
      bearerTokenCommand:
        description: Command to run to get a bearer token.
        type: string
      encoding:
        description: The encoding for the backend.
        type: string
      headers:
        description: Set HTTP headers for all transactions.
        type: string
      pass:
        description: Password.
        type: string
      url:
        description: URL of http host to connect to.
        type: string
      user:
        description: User name.
        type: string
      vendor:
        description: Name of the WebDAV site/service/software you are using.
        example: nextcloud
        type: string
    type: object
  storage.YandexConfig:
    properties:
      authUrl:
        description: Auth server URL.
        type: string
      clientId:
        description: OAuth Client Id.
        type: string
      clientSecret:
        description: OAuth Client Secret.
        type: string
      encoding:
        default: Slash,Del,Ctl,InvalidUtf8,Dot
        description: The encoding for the backend.
        type: string
      hardDelete:
        default: false
        description: Delete files permanently rather than putting them into the trash.
        type: boolean
      token:
        description: OAuth Access Token as a JSON blob.
        type: string
      tokenUrl:
        description: Token server url.
        type: string
    type: object
  storage.ZohoConfig:
    properties:
      authUrl:
        description: Auth server URL.
        type: string
      clientId:
        description: OAuth Client Id.
        type: string
      clientSecret:
        description: OAuth Client Secret.
        type: string
      encoding:
        default: Del,Ctl,InvalidUtf8
        description: The encoding for the backend.
        type: string
      region:
        description: Zoho region to connect to.
        example: com
        type: string
      token:
        description: OAuth Access Token as a JSON blob.
        type: string
      tokenUrl:
        description: Token server url.
        type: string
    type: object
  store.PieceReader:
    type: object
  wallet.ImportRequest:
    properties:
      privateKey:
        description: This is the exported private key from lotus wallet export
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:9090
info:
  contact:
    name: Xinan Xu
    url: https://github.com/data-preservation-programs/singularity/issues
  description: This is the API for Singularity, a tool for large-scale clients with
    PB-scale data onboarding to Filecoin network.
  license:
    name: MIT + Apache 2.0
    url: https://github.com/data-preservation-programs/singularity/blob/main/LICENSE
  title: Singularity API
  version: beta
paths:
  /deal:
    post:
      consumes:
      - application/json
      description: List all deals
      parameters:
      - description: ListDealRequest
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/deal.ListDealRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Deal'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: List all deals
      tags:
      - Deal
  /file/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.File'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get details about a file
      tags:
      - File
  /file/{id}/deals:
    get:
      consumes:
      - application/json
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Deal'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get all deals that have been made for a file
      tags:
      - File
  /file/{id}/prepare_to_pack:
    post:
      consumes:
      - application/json
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: prepare job for a given item
      tags:
      - File
  /job/{id}/pack:
    post:
      consumes:
      - application/json
      parameters:
      - description: Pack job ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Car'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Pack a pack job into car files
      tags:
      - Job
  /piece/{id}/metadata:
    get:
      description: Get metadata for a piece for how it may be reassembled from the
        data source
      parameters:
      - description: Piece CID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.PieceReader'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get metadata for a piece
      tags:
      - Piece
  /preparation:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Preparation'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: List all preparations
      tags:
      - Preparation
    post:
      consumes:
      - application/json
      parameters:
      - description: Create Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dataprep.CreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Preparation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create a new preparation
      tags:
      - Preparation
  /preparation/{id}:
    get:
      parameters:
      - description: Preparation ID or name
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/job.SourceStatus'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get the status of a preparation
      tags:
      - Preparation
  /preparation/{id}/output/{name}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID or name
        in: path
        name: id
        required: true
        type: string
      - description: Output storage ID or name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Preparation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Detach an output storage from a preparation
      tags:
      - Preparation
    post:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID or name
        in: path
        name: id
        required: true
        type: string
      - description: Output storage ID or name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Preparation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Attach an output storage with a preparation
      tags:
      - Preparation
  /preparation/{id}/piece:
    get:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID or name
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dataprep.PieceList'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: List all prepared pieces for a preparation
      tags:
      - Piece
    post:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID or name
        in: path
        name: id
        required: true
        type: string
      - description: Piece information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dataprep.AddPieceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Car'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Add a piece to a preparation
      tags:
      - Piece
  /preparation/{id}/schedules:
    get:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID or name
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Schedule'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: List all schedules for a preparation
      tags:
      - Deal Schedule
  /preparation/{id}/source/{name}:
    post:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID or name
        in: path
        name: id
        required: true
        type: string
      - description: Source storage ID or name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Preparation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Attach a source storage with a preparation
      tags:
      - Preparation
  /preparation/{id}/source/{name}/explore/{path}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID or name
        in: path
        name: id
        required: true
        type: string
      - description: Source storage ID or name
        in: path
        name: name
        required: true
        type: string
      - description: Directory path
        in: path
        name: path
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dataprep.ExploreResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Explore a directory in a prepared source storage
      tags:
      - Preparation
  /preparation/{id}/source/{name}/file:
    post:
      consumes:
      - application/json
      description: Tells Singularity that something is ready to be grabbed for data
        preparation
      parameters:
      - description: Preparation ID or name
        in: path
        name: id
        required: true
        type: string
      - description: Source storage ID or name
        in: path
        name: name
        required: true
        type: string
      - description: File Info
        in: body
        name: file
        required: true
        schema:
          $ref: '#/definitions/file.Info'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.File'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Push a file to be queued
      tags:
      - File
  /preparation/{id}/source/{name}/finalize:
    post:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID or name
        in: path
        name: id
        required: true
        type: string
      - description: Storage ID or name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: prepare to pack a data source
      tags:
      - Job
  /preparation/{id}/source/{name}/pause-daggen:
    post:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID or name
        in: path
        name: id
        required: true
        type: string
      - description: Storage ID or name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Job'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Pause an ongoing DAG generation job
      tags:
      - Job
  /preparation/{id}/source/{name}/pause-pack:
    post:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID or name
        in: path
        name: id
        required: true
        type: string
      - description: Storage ID or name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Job'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Pause all packing job
      tags:
      - Job
  /preparation/{id}/source/{name}/pause-pack/{job_id}:
    post:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID or name
        in: path
        name: id
        required: true
        type: string
      - description: Storage ID or name
        in: path
        name: name
        required: true
        type: string
      - description: Pack Job ID
        in: path
        name: job_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Job'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Pause a specific packing job
      tags:
      - Job
  /preparation/{id}/source/{name}/pause-scan:
    post:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID or name
        in: path
        name: id
        required: true
        type: string
      - description: Storage ID or name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Job'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Pause an ongoing scanning job
      tags:
      - Job
  /preparation/{id}/source/{name}/start-daggen:
    post:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID or name
        in: path
        name: id
        required: true
        type: string
      - description: Storage ID or name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Job'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Start a new DAG generation job
      tags:
      - Job
  /preparation/{id}/source/{name}/start-pack:
    post:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID or name
        in: path
        name: id
        required: true
        type: string
      - description: Storage ID or name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Job'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Start or restart all packing job
      tags:
      - Job
  /preparation/{id}/source/{name}/start-pack/{job_id}:
    post:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID or name
        in: path
        name: id
        required: true
        type: string
      - description: Storage ID or name
        in: path
        name: name
        required: true
        type: string
      - description: Pack Job ID
        in: path
        name: job_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Job'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Start or restart a specific packing job
      tags:
      - Job
  /preparation/{id}/source/{name}/start-scan:
    post:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID or name
        in: path
        name: id
        required: true
        type: string
      - description: Storage ID or name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Job'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Start a new scanning job
      tags:
      - Job
  /preparation/{id}/wallet:
    post:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID or name
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Wallet'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: List all wallets of a preparation.
      tags:
      - Wallet Association
  /preparation/{id}/wallet/{wallet}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID or name
        in: path
        name: id
        required: true
        type: string
      - description: Wallet Address
        in: path
        name: wallet
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Preparation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Detach a new wallet from a preparation
      tags:
      - Wallet Association
    post:
      consumes:
      - application/json
      parameters:
      - description: Preparation ID or name
        in: path
        name: id
        required: true
        type: string
      - description: Wallet Address
        in: path
        name: wallet
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Preparation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Attach a new wallet with a preparation
      tags:
      - Wallet Association
  /schedule:
    post:
      consumes:
      - application/json
      description: Create a new schedule
      parameters:
      - description: CreateRequest
        in: body
        name: schedule
        required: true
        schema:
          $ref: '#/definitions/schedule.CreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Schedule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create a new schedule
      tags:
      - Deal Schedule
  /schedule/{id}/pause:
    post:
      parameters:
      - description: Schedule ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Schedule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Pause a specific schedule
      tags:
      - Deal Schedule
  /schedule/{id}/resume:
    post:
      parameters:
      - description: Schedule ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Schedule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Resume a specific schedule
      tags:
      - Deal Schedule
  /schedules:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Schedule'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: List all deal making schedules
      tags:
      - Deal Schedule
  /send_deal:
    post:
      consumes:
      - application/json
      description: Send a manual deal proposal
      parameters:
      - description: Proposal
        in: body
        name: proposal
        required: true
        schema:
          $ref: '#/definitions/deal.Proposal'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Deal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Send a manual deal proposal
      tags:
      - Deal
  /storage:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Storage'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: List all storages
      tags:
      - Storage
  /storage/{name}:
    delete:
      parameters:
      - description: Storage ID or name
        in: path
        name: name
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Remove a storage
      tags:
      - Storage
    patch:
      consumes:
      - application/json
      parameters:
      - description: Storage ID or name
        in: path
        name: name
        required: true
        type: string
      - description: Configuration
        in: body
        name: config
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Update a storage connection
      tags:
      - Storage
  /storage/{name}/explore/{path}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Storage ID or name
        in: path
        name: name
        required: true
        type: string
      - description: Path in the storage system to explore
        in: path
        name: path
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/storage.DirEntry'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Explore directory entries in a storage system
      tags:
      - Storage
  /storage/{storageType}:
    post:
      consumes:
      - application/json
      parameters:
      - description: Storage type
        in: path
        name: storageType
        required: true
        type: string
      - description: Storage configuration
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/storage.CreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create a new storage
      tags:
      - Storage
  /storage/acd:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateAcdStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Acd storage
      tags:
      - Storage
  /storage/azureblob:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateAzureblobStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Azureblob storage
      tags:
      - Storage
  /storage/b2:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateB2StorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create B2 storage
      tags:
      - Storage
  /storage/box:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateBoxStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Box storage
      tags:
      - Storage
  /storage/drive:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateDriveStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Drive storage
      tags:
      - Storage
  /storage/dropbox:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateDropboxStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Dropbox storage
      tags:
      - Storage
  /storage/fichier:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateFichierStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Fichier storage
      tags:
      - Storage
  /storage/filefabric:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateFilefabricStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Filefabric storage
      tags:
      - Storage
  /storage/ftp:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateFtpStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Ftp storage
      tags:
      - Storage
  /storage/gcs:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateGcsStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Gcs storage
      tags:
      - Storage
  /storage/gphotos:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateGphotosStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Gphotos storage
      tags:
      - Storage
  /storage/hdfs:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateHdfsStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Hdfs storage
      tags:
      - Storage
  /storage/hidrive:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateHidriveStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Hidrive storage
      tags:
      - Storage
  /storage/http:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateHttpStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Http storage
      tags:
      - Storage
  /storage/internetarchive:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateInternetarchiveStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Internetarchive storage
      tags:
      - Storage
  /storage/jottacloud:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateJottacloudStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Jottacloud storage
      tags:
      - Storage
  /storage/koofr/digistorage:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateKoofrDigistorageStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Koofr storage with digistorage - Digi Storage, https://storage.rcs-rds.ro/
      tags:
      - Storage
  /storage/koofr/koofr:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateKoofrKoofrStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Koofr storage with koofr - Koofr, https://app.koofr.net/
      tags:
      - Storage
  /storage/koofr/other:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateKoofrOtherStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Koofr storage with other - Any other Koofr API compatible storage
        service
      tags:
      - Storage
  /storage/local:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateLocalStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Local storage
      tags:
      - Storage
  /storage/mailru:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateMailruStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Mailru storage
      tags:
      - Storage
  /storage/mega:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateMegaStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Mega storage
      tags:
      - Storage
  /storage/netstorage:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateNetstorageStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Netstorage storage
      tags:
      - Storage
  /storage/onedrive:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateOnedriveStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Onedrive storage
      tags:
      - Storage
  /storage/oos/env_auth:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateOosEnv_authStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Oos storage with env_auth - automatically pickup the credentials
        from runtime(env), first one to provide auth wins
      tags:
      - Storage
  /storage/oos/instance_principal_auth:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateOosInstance_principal_authStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Oos storage with instance_principal_auth - use instance principals
        to authorize an instance to make API calls.
      tags:
      - Storage
  /storage/oos/no_auth:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateOosNo_authStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Oos storage with no_auth - no credentials needed, this is typically
        for reading public buckets
      tags:
      - Storage
  /storage/oos/resource_principal_auth:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateOosResource_principal_authStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Oos storage with resource_principal_auth - use resource principals
        to make API calls
      tags:
      - Storage
  /storage/oos/user_principal_auth:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateOosUser_principal_authStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Oos storage with user_principal_auth - use an OCI user and an
        API key for authentication.
      tags:
      - Storage
  /storage/opendrive:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateOpendriveStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Opendrive storage
      tags:
      - Storage
  /storage/pcloud:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreatePcloudStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Pcloud storage
      tags:
      - Storage
  /storage/premiumizeme:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreatePremiumizemeStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Premiumizeme storage
      tags:
      - Storage
  /storage/putio:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreatePutioStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Putio storage
      tags:
      - Storage
  /storage/qingstor:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateQingstorStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Qingstor storage
      tags:
      - Storage
  /storage/s3/alibaba:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3AlibabaStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with Alibaba - Alibaba Cloud Object Storage System
        (OSS) formerly Aliyun
      tags:
      - Storage
  /storage/s3/arvancloud:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3ArvanCloudStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with ArvanCloud - Arvan Cloud Object Storage (AOS)
      tags:
      - Storage
  /storage/s3/aws:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3AWSStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with AWS - Amazon Web Services (AWS) S3
      tags:
      - Storage
  /storage/s3/ceph:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3CephStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with Ceph - Ceph Object Storage
      tags:
      - Storage
  /storage/s3/chinamobile:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3ChinaMobileStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with ChinaMobile - China Mobile Ecloud Elastic Object
        Storage (EOS)
      tags:
      - Storage
  /storage/s3/cloudflare:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3CloudflareStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with Cloudflare - Cloudflare R2 Storage
      tags:
      - Storage
  /storage/s3/digitalocean:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3DigitalOceanStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with DigitalOcean - DigitalOcean Spaces
      tags:
      - Storage
  /storage/s3/dreamhost:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3DreamhostStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with Dreamhost - Dreamhost DreamObjects
      tags:
      - Storage
  /storage/s3/huaweiobs:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3HuaweiOBSStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with HuaweiOBS - Huawei Object Storage Service
      tags:
      - Storage
  /storage/s3/ibmcos:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3IBMCOSStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with IBMCOS - IBM COS S3
      tags:
      - Storage
  /storage/s3/idrive:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3IDriveStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with IDrive - IDrive e2
      tags:
      - Storage
  /storage/s3/ionos:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3IONOSStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with IONOS - IONOS Cloud
      tags:
      - Storage
  /storage/s3/liara:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3LiaraStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with Liara - Liara Object Storage
      tags:
      - Storage
  /storage/s3/lyvecloud:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3LyveCloudStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with LyveCloud - Seagate Lyve Cloud
      tags:
      - Storage
  /storage/s3/minio:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3MinioStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with Minio - Minio Object Storage
      tags:
      - Storage
  /storage/s3/netease:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3NeteaseStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with Netease - Netease Object Storage (NOS)
      tags:
      - Storage
  /storage/s3/other:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3OtherStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with Other - Any other S3 compatible provider
      tags:
      - Storage
  /storage/s3/qiniu:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3QiniuStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with Qiniu - Qiniu Object Storage (Kodo)
      tags:
      - Storage
  /storage/s3/rackcorp:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3RackCorpStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with RackCorp - RackCorp Object Storage
      tags:
      - Storage
  /storage/s3/scaleway:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3ScalewayStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with Scaleway - Scaleway Object Storage
      tags:
      - Storage
  /storage/s3/seaweedfs:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3SeaweedFSStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with SeaweedFS - SeaweedFS S3
      tags:
      - Storage
  /storage/s3/stackpath:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3StackPathStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with StackPath - StackPath Object Storage
      tags:
      - Storage
  /storage/s3/storj:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3StorjStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with Storj - Storj (S3 Compatible Gateway)
      tags:
      - Storage
  /storage/s3/tencentcos:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3TencentCOSStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with TencentCOS - Tencent Cloud Object Storage (COS)
      tags:
      - Storage
  /storage/s3/wasabi:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateS3WasabiStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create S3 storage with Wasabi - Wasabi Object Storage
      tags:
      - Storage
  /storage/seafile:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateSeafileStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Seafile storage
      tags:
      - Storage
  /storage/sftp:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateSftpStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Sftp storage
      tags:
      - Storage
  /storage/sharefile:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateSharefileStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Sharefile storage
      tags:
      - Storage
  /storage/sia:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateSiaStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Sia storage
      tags:
      - Storage
  /storage/smb:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateSmbStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Smb storage
      tags:
      - Storage
  /storage/storj/existing:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateStorjExistingStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Storj storage with existing - Use an existing access grant.
      tags:
      - Storage
  /storage/storj/new:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateStorjNewStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Storj storage with new - Create a new access grant from satellite
        address, API key, and passphrase.
      tags:
      - Storage
  /storage/sugarsync:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateSugarsyncStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Sugarsync storage
      tags:
      - Storage
  /storage/swift:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateSwiftStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Swift storage
      tags:
      - Storage
  /storage/uptobox:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateUptoboxStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Uptobox storage
      tags:
      - Storage
  /storage/webdav:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateWebdavStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Webdav storage
      tags:
      - Storage
  /storage/yandex:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateYandexStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Yandex storage
      tags:
      - Storage
  /storage/zoho:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateZohoStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Storage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Create Zoho storage
      tags:
      - Storage
  /wallet:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Wallet'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: List all imported wallets
      tags:
      - Wallet
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/wallet.ImportRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Wallet'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Import a private key
      tags:
      - Wallet
  /wallet/{address}:
    delete:
      parameters:
      - description: Address
        in: path
        name: address
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Remove a wallet
      tags:
      - Wallet
swagger: "2.0"
