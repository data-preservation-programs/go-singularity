// Code generated by go-swagger; DO NOT EDIT.

package dataset

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new dataset API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for dataset API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteDatasetDatasetName(params *DeleteDatasetDatasetNameParams, opts ...ClientOption) (*DeleteDatasetDatasetNameNoContent, error)

	GetDataset(params *GetDatasetParams, opts ...ClientOption) (*GetDatasetOK, error)

	GetDatasetDatasetNamePiece(params *GetDatasetDatasetNamePieceParams, opts ...ClientOption) (*GetDatasetDatasetNamePieceOK, error)

	PatchDatasetDatasetName(params *PatchDatasetDatasetNameParams, opts ...ClientOption) (*PatchDatasetDatasetNameOK, error)

	PostDataset(params *PostDatasetParams, opts ...ClientOption) (*PostDatasetOK, error)

	PostDatasetDatasetNamePiece(params *PostDatasetDatasetNamePieceParams, opts ...ClientOption) (*PostDatasetDatasetNamePieceOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteDatasetDatasetName removes a specific dataset this will not remove the c a r files

Important! If the dataset is large, this command will take some time to remove all relevant data.
*/
func (a *Client) DeleteDatasetDatasetName(params *DeleteDatasetDatasetNameParams, opts ...ClientOption) (*DeleteDatasetDatasetNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDatasetDatasetName",
		Method:             "DELETE",
		PathPattern:        "/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDatasetDatasetNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDataset lists all datasets
*/
func (a *Client) GetDataset(params *GetDatasetParams, opts ...ClientOption) (*GetDatasetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatasetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDataset",
		Method:             "GET",
		PathPattern:        "/dataset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDatasetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatasetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDataset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDatasetDatasetNamePiece lists all pieces for the dataset that are available for deal making
*/
func (a *Client) GetDatasetDatasetNamePiece(params *GetDatasetDatasetNamePieceParams, opts ...ClientOption) (*GetDatasetDatasetNamePieceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatasetDatasetNamePieceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDatasetDatasetNamePiece",
		Method:             "GET",
		PathPattern:        "/dataset/{datasetName}/piece",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDatasetDatasetNamePieceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatasetDatasetNamePieceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDatasetDatasetNamePiece: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchDatasetDatasetName updates a dataset
*/
func (a *Client) PatchDatasetDatasetName(params *PatchDatasetDatasetNameParams, opts ...ClientOption) (*PatchDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchDatasetDatasetName",
		Method:             "PATCH",
		PathPattern:        "/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostDataset creates a new dataset

The dataset is a top level object to distinguish different dataset.
*/
func (a *Client) PostDataset(params *PostDatasetParams, opts ...ClientOption) (*PostDatasetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDatasetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostDataset",
		Method:             "POST",
		PathPattern:        "/dataset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDatasetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDatasetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDataset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostDatasetDatasetNamePiece manuallies register a piece c a r file with the dataset for deal making purpose
*/
func (a *Client) PostDatasetDatasetNamePiece(params *PostDatasetDatasetNamePieceParams, opts ...ClientOption) (*PostDatasetDatasetNamePieceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDatasetDatasetNamePieceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostDatasetDatasetNamePiece",
		Method:             "POST",
		PathPattern:        "/dataset/{datasetName}/piece",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDatasetDatasetNamePieceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDatasetDatasetNamePieceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDatasetDatasetNamePiece: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
