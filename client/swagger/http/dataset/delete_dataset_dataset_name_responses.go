// Code generated by go-swagger; DO NOT EDIT.

package dataset

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/data-preservation-programs/singularity/client/swagger/models"
)

// DeleteDatasetDatasetNameReader is a Reader for the DeleteDatasetDatasetName structure.
type DeleteDatasetDatasetNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteDatasetDatasetNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteDatasetDatasetNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteDatasetDatasetNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteDatasetDatasetNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /dataset/{datasetName}] DeleteDatasetDatasetName", response, response.Code())
	}
}

// NewDeleteDatasetDatasetNameNoContent creates a DeleteDatasetDatasetNameNoContent with default headers values
func NewDeleteDatasetDatasetNameNoContent() *DeleteDatasetDatasetNameNoContent {
	return &DeleteDatasetDatasetNameNoContent{}
}

/*
DeleteDatasetDatasetNameNoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteDatasetDatasetNameNoContent struct {
}

// IsSuccess returns true when this delete dataset dataset name no content response has a 2xx status code
func (o *DeleteDatasetDatasetNameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete dataset dataset name no content response has a 3xx status code
func (o *DeleteDatasetDatasetNameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete dataset dataset name no content response has a 4xx status code
func (o *DeleteDatasetDatasetNameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete dataset dataset name no content response has a 5xx status code
func (o *DeleteDatasetDatasetNameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete dataset dataset name no content response a status code equal to that given
func (o *DeleteDatasetDatasetNameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete dataset dataset name no content response
func (o *DeleteDatasetDatasetNameNoContent) Code() int {
	return 204
}

func (o *DeleteDatasetDatasetNameNoContent) Error() string {
	return fmt.Sprintf("[DELETE /dataset/{datasetName}][%d] deleteDatasetDatasetNameNoContent ", 204)
}

func (o *DeleteDatasetDatasetNameNoContent) String() string {
	return fmt.Sprintf("[DELETE /dataset/{datasetName}][%d] deleteDatasetDatasetNameNoContent ", 204)
}

func (o *DeleteDatasetDatasetNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteDatasetDatasetNameBadRequest creates a DeleteDatasetDatasetNameBadRequest with default headers values
func NewDeleteDatasetDatasetNameBadRequest() *DeleteDatasetDatasetNameBadRequest {
	return &DeleteDatasetDatasetNameBadRequest{}
}

/*
DeleteDatasetDatasetNameBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteDatasetDatasetNameBadRequest struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this delete dataset dataset name bad request response has a 2xx status code
func (o *DeleteDatasetDatasetNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete dataset dataset name bad request response has a 3xx status code
func (o *DeleteDatasetDatasetNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete dataset dataset name bad request response has a 4xx status code
func (o *DeleteDatasetDatasetNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete dataset dataset name bad request response has a 5xx status code
func (o *DeleteDatasetDatasetNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete dataset dataset name bad request response a status code equal to that given
func (o *DeleteDatasetDatasetNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete dataset dataset name bad request response
func (o *DeleteDatasetDatasetNameBadRequest) Code() int {
	return 400
}

func (o *DeleteDatasetDatasetNameBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /dataset/{datasetName}][%d] deleteDatasetDatasetNameBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteDatasetDatasetNameBadRequest) String() string {
	return fmt.Sprintf("[DELETE /dataset/{datasetName}][%d] deleteDatasetDatasetNameBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteDatasetDatasetNameBadRequest) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *DeleteDatasetDatasetNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDatasetDatasetNameInternalServerError creates a DeleteDatasetDatasetNameInternalServerError with default headers values
func NewDeleteDatasetDatasetNameInternalServerError() *DeleteDatasetDatasetNameInternalServerError {
	return &DeleteDatasetDatasetNameInternalServerError{}
}

/*
DeleteDatasetDatasetNameInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteDatasetDatasetNameInternalServerError struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this delete dataset dataset name internal server error response has a 2xx status code
func (o *DeleteDatasetDatasetNameInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete dataset dataset name internal server error response has a 3xx status code
func (o *DeleteDatasetDatasetNameInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete dataset dataset name internal server error response has a 4xx status code
func (o *DeleteDatasetDatasetNameInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete dataset dataset name internal server error response has a 5xx status code
func (o *DeleteDatasetDatasetNameInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete dataset dataset name internal server error response a status code equal to that given
func (o *DeleteDatasetDatasetNameInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete dataset dataset name internal server error response
func (o *DeleteDatasetDatasetNameInternalServerError) Code() int {
	return 500
}

func (o *DeleteDatasetDatasetNameInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /dataset/{datasetName}][%d] deleteDatasetDatasetNameInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteDatasetDatasetNameInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /dataset/{datasetName}][%d] deleteDatasetDatasetNameInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteDatasetDatasetNameInternalServerError) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *DeleteDatasetDatasetNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
