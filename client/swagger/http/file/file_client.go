// Code generated by go-swagger; DO NOT EDIT.

package file

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new file API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for file API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetFile(params *GetFileParams, opts ...ClientOption) (*GetFileOK, error)

	GetFileDeals(params *GetFileDealsParams, opts ...ClientOption) (*GetFileDealsOK, error)

	PrepareToPackFile(params *PrepareToPackFileParams, opts ...ClientOption) (*PrepareToPackFileOK, error)

	PushFile(params *PushFileParams, opts ...ClientOption) (*PushFileOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetFile gets details about a file
*/
func (a *Client) GetFile(params *GetFileParams, opts ...ClientOption) (*GetFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetFile",
		Method:             "GET",
		PathPattern:        "/file/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFileDeals gets all deals that have been made for a file
*/
func (a *Client) GetFileDeals(params *GetFileDealsParams, opts ...ClientOption) (*GetFileDealsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFileDealsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetFileDeals",
		Method:             "GET",
		PathPattern:        "/file/{id}/deals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFileDealsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFileDealsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetFileDeals: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PrepareToPackFile prepares job for a given item
*/
func (a *Client) PrepareToPackFile(params *PrepareToPackFileParams, opts ...ClientOption) (*PrepareToPackFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPrepareToPackFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PrepareToPackFile",
		Method:             "POST",
		PathPattern:        "/file/{id}/prepare_to_pack",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PrepareToPackFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PrepareToPackFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PrepareToPackFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PushFile pushes a file to be queued

Tells Singularity that something is ready to be grabbed for data preparation
*/
func (a *Client) PushFile(params *PushFileParams, opts ...ClientOption) (*PushFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPushFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PushFile",
		Method:             "POST",
		PathPattern:        "/preparation/{id}/source/{name}/file",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PushFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PushFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PushFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
