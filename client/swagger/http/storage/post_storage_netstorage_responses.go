// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/data-preservation-programs/singularity/client/swagger/models"
)

// PostStorageNetstorageReader is a Reader for the PostStorageNetstorage structure.
type PostStorageNetstorageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostStorageNetstorageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostStorageNetstorageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostStorageNetstorageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostStorageNetstorageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /storage/netstorage] PostStorageNetstorage", response, response.Code())
	}
}

// NewPostStorageNetstorageOK creates a PostStorageNetstorageOK with default headers values
func NewPostStorageNetstorageOK() *PostStorageNetstorageOK {
	return &PostStorageNetstorageOK{}
}

/*
PostStorageNetstorageOK describes a response with status code 200, with default header values.

OK
*/
type PostStorageNetstorageOK struct {
	Payload *models.ModelStorage
}

// IsSuccess returns true when this post storage netstorage o k response has a 2xx status code
func (o *PostStorageNetstorageOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post storage netstorage o k response has a 3xx status code
func (o *PostStorageNetstorageOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post storage netstorage o k response has a 4xx status code
func (o *PostStorageNetstorageOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post storage netstorage o k response has a 5xx status code
func (o *PostStorageNetstorageOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post storage netstorage o k response a status code equal to that given
func (o *PostStorageNetstorageOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post storage netstorage o k response
func (o *PostStorageNetstorageOK) Code() int {
	return 200
}

func (o *PostStorageNetstorageOK) Error() string {
	return fmt.Sprintf("[POST /storage/netstorage][%d] postStorageNetstorageOK  %+v", 200, o.Payload)
}

func (o *PostStorageNetstorageOK) String() string {
	return fmt.Sprintf("[POST /storage/netstorage][%d] postStorageNetstorageOK  %+v", 200, o.Payload)
}

func (o *PostStorageNetstorageOK) GetPayload() *models.ModelStorage {
	return o.Payload
}

func (o *PostStorageNetstorageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelStorage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostStorageNetstorageBadRequest creates a PostStorageNetstorageBadRequest with default headers values
func NewPostStorageNetstorageBadRequest() *PostStorageNetstorageBadRequest {
	return &PostStorageNetstorageBadRequest{}
}

/*
PostStorageNetstorageBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostStorageNetstorageBadRequest struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this post storage netstorage bad request response has a 2xx status code
func (o *PostStorageNetstorageBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post storage netstorage bad request response has a 3xx status code
func (o *PostStorageNetstorageBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post storage netstorage bad request response has a 4xx status code
func (o *PostStorageNetstorageBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post storage netstorage bad request response has a 5xx status code
func (o *PostStorageNetstorageBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post storage netstorage bad request response a status code equal to that given
func (o *PostStorageNetstorageBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post storage netstorage bad request response
func (o *PostStorageNetstorageBadRequest) Code() int {
	return 400
}

func (o *PostStorageNetstorageBadRequest) Error() string {
	return fmt.Sprintf("[POST /storage/netstorage][%d] postStorageNetstorageBadRequest  %+v", 400, o.Payload)
}

func (o *PostStorageNetstorageBadRequest) String() string {
	return fmt.Sprintf("[POST /storage/netstorage][%d] postStorageNetstorageBadRequest  %+v", 400, o.Payload)
}

func (o *PostStorageNetstorageBadRequest) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PostStorageNetstorageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostStorageNetstorageInternalServerError creates a PostStorageNetstorageInternalServerError with default headers values
func NewPostStorageNetstorageInternalServerError() *PostStorageNetstorageInternalServerError {
	return &PostStorageNetstorageInternalServerError{}
}

/*
PostStorageNetstorageInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostStorageNetstorageInternalServerError struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this post storage netstorage internal server error response has a 2xx status code
func (o *PostStorageNetstorageInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post storage netstorage internal server error response has a 3xx status code
func (o *PostStorageNetstorageInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post storage netstorage internal server error response has a 4xx status code
func (o *PostStorageNetstorageInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post storage netstorage internal server error response has a 5xx status code
func (o *PostStorageNetstorageInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post storage netstorage internal server error response a status code equal to that given
func (o *PostStorageNetstorageInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post storage netstorage internal server error response
func (o *PostStorageNetstorageInternalServerError) Code() int {
	return 500
}

func (o *PostStorageNetstorageInternalServerError) Error() string {
	return fmt.Sprintf("[POST /storage/netstorage][%d] postStorageNetstorageInternalServerError  %+v", 500, o.Payload)
}

func (o *PostStorageNetstorageInternalServerError) String() string {
	return fmt.Sprintf("[POST /storage/netstorage][%d] postStorageNetstorageInternalServerError  %+v", 500, o.Payload)
}

func (o *PostStorageNetstorageInternalServerError) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PostStorageNetstorageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
