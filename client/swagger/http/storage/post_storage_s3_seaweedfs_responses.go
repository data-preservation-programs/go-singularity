// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/data-preservation-programs/singularity/client/swagger/models"
)

// PostStorageS3SeaweedfsReader is a Reader for the PostStorageS3Seaweedfs structure.
type PostStorageS3SeaweedfsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostStorageS3SeaweedfsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostStorageS3SeaweedfsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostStorageS3SeaweedfsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostStorageS3SeaweedfsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /storage/s3/seaweedfs] PostStorageS3Seaweedfs", response, response.Code())
	}
}

// NewPostStorageS3SeaweedfsOK creates a PostStorageS3SeaweedfsOK with default headers values
func NewPostStorageS3SeaweedfsOK() *PostStorageS3SeaweedfsOK {
	return &PostStorageS3SeaweedfsOK{}
}

/*
PostStorageS3SeaweedfsOK describes a response with status code 200, with default header values.

OK
*/
type PostStorageS3SeaweedfsOK struct {
	Payload *models.ModelStorage
}

// IsSuccess returns true when this post storage s3 seaweedfs o k response has a 2xx status code
func (o *PostStorageS3SeaweedfsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post storage s3 seaweedfs o k response has a 3xx status code
func (o *PostStorageS3SeaweedfsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post storage s3 seaweedfs o k response has a 4xx status code
func (o *PostStorageS3SeaweedfsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post storage s3 seaweedfs o k response has a 5xx status code
func (o *PostStorageS3SeaweedfsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post storage s3 seaweedfs o k response a status code equal to that given
func (o *PostStorageS3SeaweedfsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post storage s3 seaweedfs o k response
func (o *PostStorageS3SeaweedfsOK) Code() int {
	return 200
}

func (o *PostStorageS3SeaweedfsOK) Error() string {
	return fmt.Sprintf("[POST /storage/s3/seaweedfs][%d] postStorageS3SeaweedfsOK  %+v", 200, o.Payload)
}

func (o *PostStorageS3SeaweedfsOK) String() string {
	return fmt.Sprintf("[POST /storage/s3/seaweedfs][%d] postStorageS3SeaweedfsOK  %+v", 200, o.Payload)
}

func (o *PostStorageS3SeaweedfsOK) GetPayload() *models.ModelStorage {
	return o.Payload
}

func (o *PostStorageS3SeaweedfsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelStorage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostStorageS3SeaweedfsBadRequest creates a PostStorageS3SeaweedfsBadRequest with default headers values
func NewPostStorageS3SeaweedfsBadRequest() *PostStorageS3SeaweedfsBadRequest {
	return &PostStorageS3SeaweedfsBadRequest{}
}

/*
PostStorageS3SeaweedfsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostStorageS3SeaweedfsBadRequest struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this post storage s3 seaweedfs bad request response has a 2xx status code
func (o *PostStorageS3SeaweedfsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post storage s3 seaweedfs bad request response has a 3xx status code
func (o *PostStorageS3SeaweedfsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post storage s3 seaweedfs bad request response has a 4xx status code
func (o *PostStorageS3SeaweedfsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post storage s3 seaweedfs bad request response has a 5xx status code
func (o *PostStorageS3SeaweedfsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post storage s3 seaweedfs bad request response a status code equal to that given
func (o *PostStorageS3SeaweedfsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post storage s3 seaweedfs bad request response
func (o *PostStorageS3SeaweedfsBadRequest) Code() int {
	return 400
}

func (o *PostStorageS3SeaweedfsBadRequest) Error() string {
	return fmt.Sprintf("[POST /storage/s3/seaweedfs][%d] postStorageS3SeaweedfsBadRequest  %+v", 400, o.Payload)
}

func (o *PostStorageS3SeaweedfsBadRequest) String() string {
	return fmt.Sprintf("[POST /storage/s3/seaweedfs][%d] postStorageS3SeaweedfsBadRequest  %+v", 400, o.Payload)
}

func (o *PostStorageS3SeaweedfsBadRequest) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PostStorageS3SeaweedfsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostStorageS3SeaweedfsInternalServerError creates a PostStorageS3SeaweedfsInternalServerError with default headers values
func NewPostStorageS3SeaweedfsInternalServerError() *PostStorageS3SeaweedfsInternalServerError {
	return &PostStorageS3SeaweedfsInternalServerError{}
}

/*
PostStorageS3SeaweedfsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostStorageS3SeaweedfsInternalServerError struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this post storage s3 seaweedfs internal server error response has a 2xx status code
func (o *PostStorageS3SeaweedfsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post storage s3 seaweedfs internal server error response has a 3xx status code
func (o *PostStorageS3SeaweedfsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post storage s3 seaweedfs internal server error response has a 4xx status code
func (o *PostStorageS3SeaweedfsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post storage s3 seaweedfs internal server error response has a 5xx status code
func (o *PostStorageS3SeaweedfsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post storage s3 seaweedfs internal server error response a status code equal to that given
func (o *PostStorageS3SeaweedfsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post storage s3 seaweedfs internal server error response
func (o *PostStorageS3SeaweedfsInternalServerError) Code() int {
	return 500
}

func (o *PostStorageS3SeaweedfsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /storage/s3/seaweedfs][%d] postStorageS3SeaweedfsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostStorageS3SeaweedfsInternalServerError) String() string {
	return fmt.Sprintf("[POST /storage/s3/seaweedfs][%d] postStorageS3SeaweedfsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostStorageS3SeaweedfsInternalServerError) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PostStorageS3SeaweedfsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
