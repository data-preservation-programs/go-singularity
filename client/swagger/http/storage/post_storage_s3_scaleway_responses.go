// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/data-preservation-programs/singularity/client/swagger/models"
)

// PostStorageS3ScalewayReader is a Reader for the PostStorageS3Scaleway structure.
type PostStorageS3ScalewayReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostStorageS3ScalewayReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostStorageS3ScalewayOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostStorageS3ScalewayBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostStorageS3ScalewayInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /storage/s3/scaleway] PostStorageS3Scaleway", response, response.Code())
	}
}

// NewPostStorageS3ScalewayOK creates a PostStorageS3ScalewayOK with default headers values
func NewPostStorageS3ScalewayOK() *PostStorageS3ScalewayOK {
	return &PostStorageS3ScalewayOK{}
}

/*
PostStorageS3ScalewayOK describes a response with status code 200, with default header values.

OK
*/
type PostStorageS3ScalewayOK struct {
	Payload *models.ModelStorage
}

// IsSuccess returns true when this post storage s3 scaleway o k response has a 2xx status code
func (o *PostStorageS3ScalewayOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post storage s3 scaleway o k response has a 3xx status code
func (o *PostStorageS3ScalewayOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post storage s3 scaleway o k response has a 4xx status code
func (o *PostStorageS3ScalewayOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post storage s3 scaleway o k response has a 5xx status code
func (o *PostStorageS3ScalewayOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post storage s3 scaleway o k response a status code equal to that given
func (o *PostStorageS3ScalewayOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post storage s3 scaleway o k response
func (o *PostStorageS3ScalewayOK) Code() int {
	return 200
}

func (o *PostStorageS3ScalewayOK) Error() string {
	return fmt.Sprintf("[POST /storage/s3/scaleway][%d] postStorageS3ScalewayOK  %+v", 200, o.Payload)
}

func (o *PostStorageS3ScalewayOK) String() string {
	return fmt.Sprintf("[POST /storage/s3/scaleway][%d] postStorageS3ScalewayOK  %+v", 200, o.Payload)
}

func (o *PostStorageS3ScalewayOK) GetPayload() *models.ModelStorage {
	return o.Payload
}

func (o *PostStorageS3ScalewayOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelStorage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostStorageS3ScalewayBadRequest creates a PostStorageS3ScalewayBadRequest with default headers values
func NewPostStorageS3ScalewayBadRequest() *PostStorageS3ScalewayBadRequest {
	return &PostStorageS3ScalewayBadRequest{}
}

/*
PostStorageS3ScalewayBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostStorageS3ScalewayBadRequest struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this post storage s3 scaleway bad request response has a 2xx status code
func (o *PostStorageS3ScalewayBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post storage s3 scaleway bad request response has a 3xx status code
func (o *PostStorageS3ScalewayBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post storage s3 scaleway bad request response has a 4xx status code
func (o *PostStorageS3ScalewayBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post storage s3 scaleway bad request response has a 5xx status code
func (o *PostStorageS3ScalewayBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post storage s3 scaleway bad request response a status code equal to that given
func (o *PostStorageS3ScalewayBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post storage s3 scaleway bad request response
func (o *PostStorageS3ScalewayBadRequest) Code() int {
	return 400
}

func (o *PostStorageS3ScalewayBadRequest) Error() string {
	return fmt.Sprintf("[POST /storage/s3/scaleway][%d] postStorageS3ScalewayBadRequest  %+v", 400, o.Payload)
}

func (o *PostStorageS3ScalewayBadRequest) String() string {
	return fmt.Sprintf("[POST /storage/s3/scaleway][%d] postStorageS3ScalewayBadRequest  %+v", 400, o.Payload)
}

func (o *PostStorageS3ScalewayBadRequest) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PostStorageS3ScalewayBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostStorageS3ScalewayInternalServerError creates a PostStorageS3ScalewayInternalServerError with default headers values
func NewPostStorageS3ScalewayInternalServerError() *PostStorageS3ScalewayInternalServerError {
	return &PostStorageS3ScalewayInternalServerError{}
}

/*
PostStorageS3ScalewayInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostStorageS3ScalewayInternalServerError struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this post storage s3 scaleway internal server error response has a 2xx status code
func (o *PostStorageS3ScalewayInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post storage s3 scaleway internal server error response has a 3xx status code
func (o *PostStorageS3ScalewayInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post storage s3 scaleway internal server error response has a 4xx status code
func (o *PostStorageS3ScalewayInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post storage s3 scaleway internal server error response has a 5xx status code
func (o *PostStorageS3ScalewayInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post storage s3 scaleway internal server error response a status code equal to that given
func (o *PostStorageS3ScalewayInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post storage s3 scaleway internal server error response
func (o *PostStorageS3ScalewayInternalServerError) Code() int {
	return 500
}

func (o *PostStorageS3ScalewayInternalServerError) Error() string {
	return fmt.Sprintf("[POST /storage/s3/scaleway][%d] postStorageS3ScalewayInternalServerError  %+v", 500, o.Payload)
}

func (o *PostStorageS3ScalewayInternalServerError) String() string {
	return fmt.Sprintf("[POST /storage/s3/scaleway][%d] postStorageS3ScalewayInternalServerError  %+v", 500, o.Payload)
}

func (o *PostStorageS3ScalewayInternalServerError) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PostStorageS3ScalewayInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
