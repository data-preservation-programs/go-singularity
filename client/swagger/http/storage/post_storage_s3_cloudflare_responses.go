// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/data-preservation-programs/singularity/client/swagger/models"
)

// PostStorageS3CloudflareReader is a Reader for the PostStorageS3Cloudflare structure.
type PostStorageS3CloudflareReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostStorageS3CloudflareReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostStorageS3CloudflareOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostStorageS3CloudflareBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostStorageS3CloudflareInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /storage/s3/cloudflare] PostStorageS3Cloudflare", response, response.Code())
	}
}

// NewPostStorageS3CloudflareOK creates a PostStorageS3CloudflareOK with default headers values
func NewPostStorageS3CloudflareOK() *PostStorageS3CloudflareOK {
	return &PostStorageS3CloudflareOK{}
}

/*
PostStorageS3CloudflareOK describes a response with status code 200, with default header values.

OK
*/
type PostStorageS3CloudflareOK struct {
	Payload *models.ModelStorage
}

// IsSuccess returns true when this post storage s3 cloudflare o k response has a 2xx status code
func (o *PostStorageS3CloudflareOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post storage s3 cloudflare o k response has a 3xx status code
func (o *PostStorageS3CloudflareOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post storage s3 cloudflare o k response has a 4xx status code
func (o *PostStorageS3CloudflareOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post storage s3 cloudflare o k response has a 5xx status code
func (o *PostStorageS3CloudflareOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post storage s3 cloudflare o k response a status code equal to that given
func (o *PostStorageS3CloudflareOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post storage s3 cloudflare o k response
func (o *PostStorageS3CloudflareOK) Code() int {
	return 200
}

func (o *PostStorageS3CloudflareOK) Error() string {
	return fmt.Sprintf("[POST /storage/s3/cloudflare][%d] postStorageS3CloudflareOK  %+v", 200, o.Payload)
}

func (o *PostStorageS3CloudflareOK) String() string {
	return fmt.Sprintf("[POST /storage/s3/cloudflare][%d] postStorageS3CloudflareOK  %+v", 200, o.Payload)
}

func (o *PostStorageS3CloudflareOK) GetPayload() *models.ModelStorage {
	return o.Payload
}

func (o *PostStorageS3CloudflareOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelStorage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostStorageS3CloudflareBadRequest creates a PostStorageS3CloudflareBadRequest with default headers values
func NewPostStorageS3CloudflareBadRequest() *PostStorageS3CloudflareBadRequest {
	return &PostStorageS3CloudflareBadRequest{}
}

/*
PostStorageS3CloudflareBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostStorageS3CloudflareBadRequest struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this post storage s3 cloudflare bad request response has a 2xx status code
func (o *PostStorageS3CloudflareBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post storage s3 cloudflare bad request response has a 3xx status code
func (o *PostStorageS3CloudflareBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post storage s3 cloudflare bad request response has a 4xx status code
func (o *PostStorageS3CloudflareBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post storage s3 cloudflare bad request response has a 5xx status code
func (o *PostStorageS3CloudflareBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post storage s3 cloudflare bad request response a status code equal to that given
func (o *PostStorageS3CloudflareBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post storage s3 cloudflare bad request response
func (o *PostStorageS3CloudflareBadRequest) Code() int {
	return 400
}

func (o *PostStorageS3CloudflareBadRequest) Error() string {
	return fmt.Sprintf("[POST /storage/s3/cloudflare][%d] postStorageS3CloudflareBadRequest  %+v", 400, o.Payload)
}

func (o *PostStorageS3CloudflareBadRequest) String() string {
	return fmt.Sprintf("[POST /storage/s3/cloudflare][%d] postStorageS3CloudflareBadRequest  %+v", 400, o.Payload)
}

func (o *PostStorageS3CloudflareBadRequest) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PostStorageS3CloudflareBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostStorageS3CloudflareInternalServerError creates a PostStorageS3CloudflareInternalServerError with default headers values
func NewPostStorageS3CloudflareInternalServerError() *PostStorageS3CloudflareInternalServerError {
	return &PostStorageS3CloudflareInternalServerError{}
}

/*
PostStorageS3CloudflareInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostStorageS3CloudflareInternalServerError struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this post storage s3 cloudflare internal server error response has a 2xx status code
func (o *PostStorageS3CloudflareInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post storage s3 cloudflare internal server error response has a 3xx status code
func (o *PostStorageS3CloudflareInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post storage s3 cloudflare internal server error response has a 4xx status code
func (o *PostStorageS3CloudflareInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post storage s3 cloudflare internal server error response has a 5xx status code
func (o *PostStorageS3CloudflareInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post storage s3 cloudflare internal server error response a status code equal to that given
func (o *PostStorageS3CloudflareInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post storage s3 cloudflare internal server error response
func (o *PostStorageS3CloudflareInternalServerError) Code() int {
	return 500
}

func (o *PostStorageS3CloudflareInternalServerError) Error() string {
	return fmt.Sprintf("[POST /storage/s3/cloudflare][%d] postStorageS3CloudflareInternalServerError  %+v", 500, o.Payload)
}

func (o *PostStorageS3CloudflareInternalServerError) String() string {
	return fmt.Sprintf("[POST /storage/s3/cloudflare][%d] postStorageS3CloudflareInternalServerError  %+v", 500, o.Payload)
}

func (o *PostStorageS3CloudflareInternalServerError) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PostStorageS3CloudflareInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
