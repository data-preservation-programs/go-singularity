// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/data-preservation-programs/singularity/client/swagger/models"
)

// PostStorageOosEnvAuthReader is a Reader for the PostStorageOosEnvAuth structure.
type PostStorageOosEnvAuthReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostStorageOosEnvAuthReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostStorageOosEnvAuthOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostStorageOosEnvAuthBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostStorageOosEnvAuthInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /storage/oos/env_auth] PostStorageOosEnvAuth", response, response.Code())
	}
}

// NewPostStorageOosEnvAuthOK creates a PostStorageOosEnvAuthOK with default headers values
func NewPostStorageOosEnvAuthOK() *PostStorageOosEnvAuthOK {
	return &PostStorageOosEnvAuthOK{}
}

/*
PostStorageOosEnvAuthOK describes a response with status code 200, with default header values.

OK
*/
type PostStorageOosEnvAuthOK struct {
	Payload *models.ModelStorage
}

// IsSuccess returns true when this post storage oos env auth o k response has a 2xx status code
func (o *PostStorageOosEnvAuthOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post storage oos env auth o k response has a 3xx status code
func (o *PostStorageOosEnvAuthOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post storage oos env auth o k response has a 4xx status code
func (o *PostStorageOosEnvAuthOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post storage oos env auth o k response has a 5xx status code
func (o *PostStorageOosEnvAuthOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post storage oos env auth o k response a status code equal to that given
func (o *PostStorageOosEnvAuthOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post storage oos env auth o k response
func (o *PostStorageOosEnvAuthOK) Code() int {
	return 200
}

func (o *PostStorageOosEnvAuthOK) Error() string {
	return fmt.Sprintf("[POST /storage/oos/env_auth][%d] postStorageOosEnvAuthOK  %+v", 200, o.Payload)
}

func (o *PostStorageOosEnvAuthOK) String() string {
	return fmt.Sprintf("[POST /storage/oos/env_auth][%d] postStorageOosEnvAuthOK  %+v", 200, o.Payload)
}

func (o *PostStorageOosEnvAuthOK) GetPayload() *models.ModelStorage {
	return o.Payload
}

func (o *PostStorageOosEnvAuthOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelStorage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostStorageOosEnvAuthBadRequest creates a PostStorageOosEnvAuthBadRequest with default headers values
func NewPostStorageOosEnvAuthBadRequest() *PostStorageOosEnvAuthBadRequest {
	return &PostStorageOosEnvAuthBadRequest{}
}

/*
PostStorageOosEnvAuthBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostStorageOosEnvAuthBadRequest struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this post storage oos env auth bad request response has a 2xx status code
func (o *PostStorageOosEnvAuthBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post storage oos env auth bad request response has a 3xx status code
func (o *PostStorageOosEnvAuthBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post storage oos env auth bad request response has a 4xx status code
func (o *PostStorageOosEnvAuthBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post storage oos env auth bad request response has a 5xx status code
func (o *PostStorageOosEnvAuthBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post storage oos env auth bad request response a status code equal to that given
func (o *PostStorageOosEnvAuthBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post storage oos env auth bad request response
func (o *PostStorageOosEnvAuthBadRequest) Code() int {
	return 400
}

func (o *PostStorageOosEnvAuthBadRequest) Error() string {
	return fmt.Sprintf("[POST /storage/oos/env_auth][%d] postStorageOosEnvAuthBadRequest  %+v", 400, o.Payload)
}

func (o *PostStorageOosEnvAuthBadRequest) String() string {
	return fmt.Sprintf("[POST /storage/oos/env_auth][%d] postStorageOosEnvAuthBadRequest  %+v", 400, o.Payload)
}

func (o *PostStorageOosEnvAuthBadRequest) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PostStorageOosEnvAuthBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostStorageOosEnvAuthInternalServerError creates a PostStorageOosEnvAuthInternalServerError with default headers values
func NewPostStorageOosEnvAuthInternalServerError() *PostStorageOosEnvAuthInternalServerError {
	return &PostStorageOosEnvAuthInternalServerError{}
}

/*
PostStorageOosEnvAuthInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostStorageOosEnvAuthInternalServerError struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this post storage oos env auth internal server error response has a 2xx status code
func (o *PostStorageOosEnvAuthInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post storage oos env auth internal server error response has a 3xx status code
func (o *PostStorageOosEnvAuthInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post storage oos env auth internal server error response has a 4xx status code
func (o *PostStorageOosEnvAuthInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post storage oos env auth internal server error response has a 5xx status code
func (o *PostStorageOosEnvAuthInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post storage oos env auth internal server error response a status code equal to that given
func (o *PostStorageOosEnvAuthInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post storage oos env auth internal server error response
func (o *PostStorageOosEnvAuthInternalServerError) Code() int {
	return 500
}

func (o *PostStorageOosEnvAuthInternalServerError) Error() string {
	return fmt.Sprintf("[POST /storage/oos/env_auth][%d] postStorageOosEnvAuthInternalServerError  %+v", 500, o.Payload)
}

func (o *PostStorageOosEnvAuthInternalServerError) String() string {
	return fmt.Sprintf("[POST /storage/oos/env_auth][%d] postStorageOosEnvAuthInternalServerError  %+v", 500, o.Payload)
}

func (o *PostStorageOosEnvAuthInternalServerError) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PostStorageOosEnvAuthInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
