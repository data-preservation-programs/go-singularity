// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/data-preservation-programs/singularity/client/swagger/models"
)

// PostStorageStorageTypeReader is a Reader for the PostStorageStorageType structure.
type PostStorageStorageTypeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostStorageStorageTypeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostStorageStorageTypeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostStorageStorageTypeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostStorageStorageTypeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /storage/{storageType}] PostStorageStorageType", response, response.Code())
	}
}

// NewPostStorageStorageTypeOK creates a PostStorageStorageTypeOK with default headers values
func NewPostStorageStorageTypeOK() *PostStorageStorageTypeOK {
	return &PostStorageStorageTypeOK{}
}

/*
PostStorageStorageTypeOK describes a response with status code 200, with default header values.

OK
*/
type PostStorageStorageTypeOK struct {
	Payload *models.ModelStorage
}

// IsSuccess returns true when this post storage storage type o k response has a 2xx status code
func (o *PostStorageStorageTypeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post storage storage type o k response has a 3xx status code
func (o *PostStorageStorageTypeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post storage storage type o k response has a 4xx status code
func (o *PostStorageStorageTypeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post storage storage type o k response has a 5xx status code
func (o *PostStorageStorageTypeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post storage storage type o k response a status code equal to that given
func (o *PostStorageStorageTypeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post storage storage type o k response
func (o *PostStorageStorageTypeOK) Code() int {
	return 200
}

func (o *PostStorageStorageTypeOK) Error() string {
	return fmt.Sprintf("[POST /storage/{storageType}][%d] postStorageStorageTypeOK  %+v", 200, o.Payload)
}

func (o *PostStorageStorageTypeOK) String() string {
	return fmt.Sprintf("[POST /storage/{storageType}][%d] postStorageStorageTypeOK  %+v", 200, o.Payload)
}

func (o *PostStorageStorageTypeOK) GetPayload() *models.ModelStorage {
	return o.Payload
}

func (o *PostStorageStorageTypeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelStorage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostStorageStorageTypeBadRequest creates a PostStorageStorageTypeBadRequest with default headers values
func NewPostStorageStorageTypeBadRequest() *PostStorageStorageTypeBadRequest {
	return &PostStorageStorageTypeBadRequest{}
}

/*
PostStorageStorageTypeBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostStorageStorageTypeBadRequest struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this post storage storage type bad request response has a 2xx status code
func (o *PostStorageStorageTypeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post storage storage type bad request response has a 3xx status code
func (o *PostStorageStorageTypeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post storage storage type bad request response has a 4xx status code
func (o *PostStorageStorageTypeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post storage storage type bad request response has a 5xx status code
func (o *PostStorageStorageTypeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post storage storage type bad request response a status code equal to that given
func (o *PostStorageStorageTypeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post storage storage type bad request response
func (o *PostStorageStorageTypeBadRequest) Code() int {
	return 400
}

func (o *PostStorageStorageTypeBadRequest) Error() string {
	return fmt.Sprintf("[POST /storage/{storageType}][%d] postStorageStorageTypeBadRequest  %+v", 400, o.Payload)
}

func (o *PostStorageStorageTypeBadRequest) String() string {
	return fmt.Sprintf("[POST /storage/{storageType}][%d] postStorageStorageTypeBadRequest  %+v", 400, o.Payload)
}

func (o *PostStorageStorageTypeBadRequest) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PostStorageStorageTypeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostStorageStorageTypeInternalServerError creates a PostStorageStorageTypeInternalServerError with default headers values
func NewPostStorageStorageTypeInternalServerError() *PostStorageStorageTypeInternalServerError {
	return &PostStorageStorageTypeInternalServerError{}
}

/*
PostStorageStorageTypeInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostStorageStorageTypeInternalServerError struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this post storage storage type internal server error response has a 2xx status code
func (o *PostStorageStorageTypeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post storage storage type internal server error response has a 3xx status code
func (o *PostStorageStorageTypeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post storage storage type internal server error response has a 4xx status code
func (o *PostStorageStorageTypeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post storage storage type internal server error response has a 5xx status code
func (o *PostStorageStorageTypeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post storage storage type internal server error response a status code equal to that given
func (o *PostStorageStorageTypeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post storage storage type internal server error response
func (o *PostStorageStorageTypeInternalServerError) Code() int {
	return 500
}

func (o *PostStorageStorageTypeInternalServerError) Error() string {
	return fmt.Sprintf("[POST /storage/{storageType}][%d] postStorageStorageTypeInternalServerError  %+v", 500, o.Payload)
}

func (o *PostStorageStorageTypeInternalServerError) String() string {
	return fmt.Sprintf("[POST /storage/{storageType}][%d] postStorageStorageTypeInternalServerError  %+v", 500, o.Payload)
}

func (o *PostStorageStorageTypeInternalServerError) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PostStorageStorageTypeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
