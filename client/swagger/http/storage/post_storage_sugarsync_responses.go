// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/data-preservation-programs/singularity/client/swagger/models"
)

// PostStorageSugarsyncReader is a Reader for the PostStorageSugarsync structure.
type PostStorageSugarsyncReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostStorageSugarsyncReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostStorageSugarsyncOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostStorageSugarsyncBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostStorageSugarsyncInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /storage/sugarsync] PostStorageSugarsync", response, response.Code())
	}
}

// NewPostStorageSugarsyncOK creates a PostStorageSugarsyncOK with default headers values
func NewPostStorageSugarsyncOK() *PostStorageSugarsyncOK {
	return &PostStorageSugarsyncOK{}
}

/*
PostStorageSugarsyncOK describes a response with status code 200, with default header values.

OK
*/
type PostStorageSugarsyncOK struct {
	Payload *models.ModelStorage
}

// IsSuccess returns true when this post storage sugarsync o k response has a 2xx status code
func (o *PostStorageSugarsyncOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post storage sugarsync o k response has a 3xx status code
func (o *PostStorageSugarsyncOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post storage sugarsync o k response has a 4xx status code
func (o *PostStorageSugarsyncOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post storage sugarsync o k response has a 5xx status code
func (o *PostStorageSugarsyncOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post storage sugarsync o k response a status code equal to that given
func (o *PostStorageSugarsyncOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post storage sugarsync o k response
func (o *PostStorageSugarsyncOK) Code() int {
	return 200
}

func (o *PostStorageSugarsyncOK) Error() string {
	return fmt.Sprintf("[POST /storage/sugarsync][%d] postStorageSugarsyncOK  %+v", 200, o.Payload)
}

func (o *PostStorageSugarsyncOK) String() string {
	return fmt.Sprintf("[POST /storage/sugarsync][%d] postStorageSugarsyncOK  %+v", 200, o.Payload)
}

func (o *PostStorageSugarsyncOK) GetPayload() *models.ModelStorage {
	return o.Payload
}

func (o *PostStorageSugarsyncOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelStorage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostStorageSugarsyncBadRequest creates a PostStorageSugarsyncBadRequest with default headers values
func NewPostStorageSugarsyncBadRequest() *PostStorageSugarsyncBadRequest {
	return &PostStorageSugarsyncBadRequest{}
}

/*
PostStorageSugarsyncBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostStorageSugarsyncBadRequest struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this post storage sugarsync bad request response has a 2xx status code
func (o *PostStorageSugarsyncBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post storage sugarsync bad request response has a 3xx status code
func (o *PostStorageSugarsyncBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post storage sugarsync bad request response has a 4xx status code
func (o *PostStorageSugarsyncBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post storage sugarsync bad request response has a 5xx status code
func (o *PostStorageSugarsyncBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post storage sugarsync bad request response a status code equal to that given
func (o *PostStorageSugarsyncBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post storage sugarsync bad request response
func (o *PostStorageSugarsyncBadRequest) Code() int {
	return 400
}

func (o *PostStorageSugarsyncBadRequest) Error() string {
	return fmt.Sprintf("[POST /storage/sugarsync][%d] postStorageSugarsyncBadRequest  %+v", 400, o.Payload)
}

func (o *PostStorageSugarsyncBadRequest) String() string {
	return fmt.Sprintf("[POST /storage/sugarsync][%d] postStorageSugarsyncBadRequest  %+v", 400, o.Payload)
}

func (o *PostStorageSugarsyncBadRequest) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PostStorageSugarsyncBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostStorageSugarsyncInternalServerError creates a PostStorageSugarsyncInternalServerError with default headers values
func NewPostStorageSugarsyncInternalServerError() *PostStorageSugarsyncInternalServerError {
	return &PostStorageSugarsyncInternalServerError{}
}

/*
PostStorageSugarsyncInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostStorageSugarsyncInternalServerError struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this post storage sugarsync internal server error response has a 2xx status code
func (o *PostStorageSugarsyncInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post storage sugarsync internal server error response has a 3xx status code
func (o *PostStorageSugarsyncInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post storage sugarsync internal server error response has a 4xx status code
func (o *PostStorageSugarsyncInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post storage sugarsync internal server error response has a 5xx status code
func (o *PostStorageSugarsyncInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post storage sugarsync internal server error response a status code equal to that given
func (o *PostStorageSugarsyncInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post storage sugarsync internal server error response
func (o *PostStorageSugarsyncInternalServerError) Code() int {
	return 500
}

func (o *PostStorageSugarsyncInternalServerError) Error() string {
	return fmt.Sprintf("[POST /storage/sugarsync][%d] postStorageSugarsyncInternalServerError  %+v", 500, o.Payload)
}

func (o *PostStorageSugarsyncInternalServerError) String() string {
	return fmt.Sprintf("[POST /storage/sugarsync][%d] postStorageSugarsyncInternalServerError  %+v", 500, o.Payload)
}

func (o *PostStorageSugarsyncInternalServerError) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PostStorageSugarsyncInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
