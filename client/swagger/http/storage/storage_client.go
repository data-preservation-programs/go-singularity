// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new storage API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for storage API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteStorageName(params *DeleteStorageNameParams, opts ...ClientOption) (*DeleteStorageNameNoContent, error)

	GetStorage(params *GetStorageParams, opts ...ClientOption) (*GetStorageOK, error)

	GetStorageNameExplorePath(params *GetStorageNameExplorePathParams, opts ...ClientOption) (*GetStorageNameExplorePathOK, error)

	PatchStorageName(params *PatchStorageNameParams, opts ...ClientOption) (*PatchStorageNameOK, error)

	PostStorageAcd(params *PostStorageAcdParams, opts ...ClientOption) (*PostStorageAcdOK, error)

	PostStorageAzureblob(params *PostStorageAzureblobParams, opts ...ClientOption) (*PostStorageAzureblobOK, error)

	PostStorageB2(params *PostStorageB2Params, opts ...ClientOption) (*PostStorageB2OK, error)

	PostStorageBox(params *PostStorageBoxParams, opts ...ClientOption) (*PostStorageBoxOK, error)

	PostStorageDrive(params *PostStorageDriveParams, opts ...ClientOption) (*PostStorageDriveOK, error)

	PostStorageDropbox(params *PostStorageDropboxParams, opts ...ClientOption) (*PostStorageDropboxOK, error)

	PostStorageFichier(params *PostStorageFichierParams, opts ...ClientOption) (*PostStorageFichierOK, error)

	PostStorageFilefabric(params *PostStorageFilefabricParams, opts ...ClientOption) (*PostStorageFilefabricOK, error)

	PostStorageFtp(params *PostStorageFtpParams, opts ...ClientOption) (*PostStorageFtpOK, error)

	PostStorageGcs(params *PostStorageGcsParams, opts ...ClientOption) (*PostStorageGcsOK, error)

	PostStorageGphotos(params *PostStorageGphotosParams, opts ...ClientOption) (*PostStorageGphotosOK, error)

	PostStorageHTTP(params *PostStorageHTTPParams, opts ...ClientOption) (*PostStorageHTTPOK, error)

	PostStorageHdfs(params *PostStorageHdfsParams, opts ...ClientOption) (*PostStorageHdfsOK, error)

	PostStorageHidrive(params *PostStorageHidriveParams, opts ...ClientOption) (*PostStorageHidriveOK, error)

	PostStorageInternetarchive(params *PostStorageInternetarchiveParams, opts ...ClientOption) (*PostStorageInternetarchiveOK, error)

	PostStorageJottacloud(params *PostStorageJottacloudParams, opts ...ClientOption) (*PostStorageJottacloudOK, error)

	PostStorageKoofrDigistorage(params *PostStorageKoofrDigistorageParams, opts ...ClientOption) (*PostStorageKoofrDigistorageOK, error)

	PostStorageKoofrKoofr(params *PostStorageKoofrKoofrParams, opts ...ClientOption) (*PostStorageKoofrKoofrOK, error)

	PostStorageKoofrOther(params *PostStorageKoofrOtherParams, opts ...ClientOption) (*PostStorageKoofrOtherOK, error)

	PostStorageLocal(params *PostStorageLocalParams, opts ...ClientOption) (*PostStorageLocalOK, error)

	PostStorageMailru(params *PostStorageMailruParams, opts ...ClientOption) (*PostStorageMailruOK, error)

	PostStorageMega(params *PostStorageMegaParams, opts ...ClientOption) (*PostStorageMegaOK, error)

	PostStorageNetstorage(params *PostStorageNetstorageParams, opts ...ClientOption) (*PostStorageNetstorageOK, error)

	PostStorageOnedrive(params *PostStorageOnedriveParams, opts ...ClientOption) (*PostStorageOnedriveOK, error)

	PostStorageOosEnvAuth(params *PostStorageOosEnvAuthParams, opts ...ClientOption) (*PostStorageOosEnvAuthOK, error)

	PostStorageOosInstancePrincipalAuth(params *PostStorageOosInstancePrincipalAuthParams, opts ...ClientOption) (*PostStorageOosInstancePrincipalAuthOK, error)

	PostStorageOosNoAuth(params *PostStorageOosNoAuthParams, opts ...ClientOption) (*PostStorageOosNoAuthOK, error)

	PostStorageOosResourcePrincipalAuth(params *PostStorageOosResourcePrincipalAuthParams, opts ...ClientOption) (*PostStorageOosResourcePrincipalAuthOK, error)

	PostStorageOosUserPrincipalAuth(params *PostStorageOosUserPrincipalAuthParams, opts ...ClientOption) (*PostStorageOosUserPrincipalAuthOK, error)

	PostStorageOpendrive(params *PostStorageOpendriveParams, opts ...ClientOption) (*PostStorageOpendriveOK, error)

	PostStoragePcloud(params *PostStoragePcloudParams, opts ...ClientOption) (*PostStoragePcloudOK, error)

	PostStoragePremiumizeme(params *PostStoragePremiumizemeParams, opts ...ClientOption) (*PostStoragePremiumizemeOK, error)

	PostStoragePutio(params *PostStoragePutioParams, opts ...ClientOption) (*PostStoragePutioOK, error)

	PostStorageQingstor(params *PostStorageQingstorParams, opts ...ClientOption) (*PostStorageQingstorOK, error)

	PostStorageS3Alibaba(params *PostStorageS3AlibabaParams, opts ...ClientOption) (*PostStorageS3AlibabaOK, error)

	PostStorageS3Arvancloud(params *PostStorageS3ArvancloudParams, opts ...ClientOption) (*PostStorageS3ArvancloudOK, error)

	PostStorageS3Aws(params *PostStorageS3AwsParams, opts ...ClientOption) (*PostStorageS3AwsOK, error)

	PostStorageS3Ceph(params *PostStorageS3CephParams, opts ...ClientOption) (*PostStorageS3CephOK, error)

	PostStorageS3Chinamobile(params *PostStorageS3ChinamobileParams, opts ...ClientOption) (*PostStorageS3ChinamobileOK, error)

	PostStorageS3Cloudflare(params *PostStorageS3CloudflareParams, opts ...ClientOption) (*PostStorageS3CloudflareOK, error)

	PostStorageS3Digitalocean(params *PostStorageS3DigitaloceanParams, opts ...ClientOption) (*PostStorageS3DigitaloceanOK, error)

	PostStorageS3Dreamhost(params *PostStorageS3DreamhostParams, opts ...ClientOption) (*PostStorageS3DreamhostOK, error)

	PostStorageS3Huaweiobs(params *PostStorageS3HuaweiobsParams, opts ...ClientOption) (*PostStorageS3HuaweiobsOK, error)

	PostStorageS3Ibmcos(params *PostStorageS3IbmcosParams, opts ...ClientOption) (*PostStorageS3IbmcosOK, error)

	PostStorageS3Idrive(params *PostStorageS3IdriveParams, opts ...ClientOption) (*PostStorageS3IdriveOK, error)

	PostStorageS3Ionos(params *PostStorageS3IonosParams, opts ...ClientOption) (*PostStorageS3IonosOK, error)

	PostStorageS3Liara(params *PostStorageS3LiaraParams, opts ...ClientOption) (*PostStorageS3LiaraOK, error)

	PostStorageS3Lyvecloud(params *PostStorageS3LyvecloudParams, opts ...ClientOption) (*PostStorageS3LyvecloudOK, error)

	PostStorageS3Minio(params *PostStorageS3MinioParams, opts ...ClientOption) (*PostStorageS3MinioOK, error)

	PostStorageS3Netease(params *PostStorageS3NeteaseParams, opts ...ClientOption) (*PostStorageS3NeteaseOK, error)

	PostStorageS3Other(params *PostStorageS3OtherParams, opts ...ClientOption) (*PostStorageS3OtherOK, error)

	PostStorageS3Qiniu(params *PostStorageS3QiniuParams, opts ...ClientOption) (*PostStorageS3QiniuOK, error)

	PostStorageS3Rackcorp(params *PostStorageS3RackcorpParams, opts ...ClientOption) (*PostStorageS3RackcorpOK, error)

	PostStorageS3Scaleway(params *PostStorageS3ScalewayParams, opts ...ClientOption) (*PostStorageS3ScalewayOK, error)

	PostStorageS3Seaweedfs(params *PostStorageS3SeaweedfsParams, opts ...ClientOption) (*PostStorageS3SeaweedfsOK, error)

	PostStorageS3Stackpath(params *PostStorageS3StackpathParams, opts ...ClientOption) (*PostStorageS3StackpathOK, error)

	PostStorageS3Storj(params *PostStorageS3StorjParams, opts ...ClientOption) (*PostStorageS3StorjOK, error)

	PostStorageS3Tencentcos(params *PostStorageS3TencentcosParams, opts ...ClientOption) (*PostStorageS3TencentcosOK, error)

	PostStorageS3Wasabi(params *PostStorageS3WasabiParams, opts ...ClientOption) (*PostStorageS3WasabiOK, error)

	PostStorageSeafile(params *PostStorageSeafileParams, opts ...ClientOption) (*PostStorageSeafileOK, error)

	PostStorageSftp(params *PostStorageSftpParams, opts ...ClientOption) (*PostStorageSftpOK, error)

	PostStorageSharefile(params *PostStorageSharefileParams, opts ...ClientOption) (*PostStorageSharefileOK, error)

	PostStorageSia(params *PostStorageSiaParams, opts ...ClientOption) (*PostStorageSiaOK, error)

	PostStorageSmb(params *PostStorageSmbParams, opts ...ClientOption) (*PostStorageSmbOK, error)

	PostStorageStorageType(params *PostStorageStorageTypeParams, opts ...ClientOption) (*PostStorageStorageTypeOK, error)

	PostStorageStorjExisting(params *PostStorageStorjExistingParams, opts ...ClientOption) (*PostStorageStorjExistingOK, error)

	PostStorageStorjNew(params *PostStorageStorjNewParams, opts ...ClientOption) (*PostStorageStorjNewOK, error)

	PostStorageSugarsync(params *PostStorageSugarsyncParams, opts ...ClientOption) (*PostStorageSugarsyncOK, error)

	PostStorageSwift(params *PostStorageSwiftParams, opts ...ClientOption) (*PostStorageSwiftOK, error)

	PostStorageUptobox(params *PostStorageUptoboxParams, opts ...ClientOption) (*PostStorageUptoboxOK, error)

	PostStorageWebdav(params *PostStorageWebdavParams, opts ...ClientOption) (*PostStorageWebdavOK, error)

	PostStorageYandex(params *PostStorageYandexParams, opts ...ClientOption) (*PostStorageYandexOK, error)

	PostStorageZoho(params *PostStorageZohoParams, opts ...ClientOption) (*PostStorageZohoOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteStorageName removes a storage
*/
func (a *Client) DeleteStorageName(params *DeleteStorageNameParams, opts ...ClientOption) (*DeleteStorageNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStorageNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteStorageName",
		Method:             "DELETE",
		PathPattern:        "/storage/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteStorageNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteStorageNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteStorageName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStorage lists all storages
*/
func (a *Client) GetStorage(params *GetStorageParams, opts ...ClientOption) (*GetStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetStorage",
		Method:             "GET",
		PathPattern:        "/storage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStorageNameExplorePath explores directory entries in a storage system
*/
func (a *Client) GetStorageNameExplorePath(params *GetStorageNameExplorePathParams, opts ...ClientOption) (*GetStorageNameExplorePathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageNameExplorePathParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetStorageNameExplorePath",
		Method:             "GET",
		PathPattern:        "/storage/{name}/explore/{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStorageNameExplorePathReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStorageNameExplorePathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStorageNameExplorePath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchStorageName updates a storage connection
*/
func (a *Client) PatchStorageName(params *PatchStorageNameParams, opts ...ClientOption) (*PatchStorageNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchStorageNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchStorageName",
		Method:             "PATCH",
		PathPattern:        "/storage/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchStorageNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchStorageNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchStorageName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageAcd creates acd storage
*/
func (a *Client) PostStorageAcd(params *PostStorageAcdParams, opts ...ClientOption) (*PostStorageAcdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageAcdParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageAcd",
		Method:             "POST",
		PathPattern:        "/storage/acd",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageAcdReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageAcdOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageAcd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageAzureblob creates azureblob storage
*/
func (a *Client) PostStorageAzureblob(params *PostStorageAzureblobParams, opts ...ClientOption) (*PostStorageAzureblobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageAzureblobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageAzureblob",
		Method:             "POST",
		PathPattern:        "/storage/azureblob",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageAzureblobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageAzureblobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageAzureblob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageB2 creates b2 storage
*/
func (a *Client) PostStorageB2(params *PostStorageB2Params, opts ...ClientOption) (*PostStorageB2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageB2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageB2",
		Method:             "POST",
		PathPattern:        "/storage/b2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageB2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageB2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageB2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageBox creates box storage
*/
func (a *Client) PostStorageBox(params *PostStorageBoxParams, opts ...ClientOption) (*PostStorageBoxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageBoxParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageBox",
		Method:             "POST",
		PathPattern:        "/storage/box",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageBoxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageBoxOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageBox: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageDrive creates drive storage
*/
func (a *Client) PostStorageDrive(params *PostStorageDriveParams, opts ...ClientOption) (*PostStorageDriveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageDriveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageDrive",
		Method:             "POST",
		PathPattern:        "/storage/drive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageDriveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageDriveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageDrive: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageDropbox creates dropbox storage
*/
func (a *Client) PostStorageDropbox(params *PostStorageDropboxParams, opts ...ClientOption) (*PostStorageDropboxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageDropboxParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageDropbox",
		Method:             "POST",
		PathPattern:        "/storage/dropbox",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageDropboxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageDropboxOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageDropbox: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageFichier creates fichier storage
*/
func (a *Client) PostStorageFichier(params *PostStorageFichierParams, opts ...ClientOption) (*PostStorageFichierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageFichierParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageFichier",
		Method:             "POST",
		PathPattern:        "/storage/fichier",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageFichierReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageFichierOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageFichier: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageFilefabric creates filefabric storage
*/
func (a *Client) PostStorageFilefabric(params *PostStorageFilefabricParams, opts ...ClientOption) (*PostStorageFilefabricOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageFilefabricParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageFilefabric",
		Method:             "POST",
		PathPattern:        "/storage/filefabric",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageFilefabricReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageFilefabricOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageFilefabric: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageFtp creates ftp storage
*/
func (a *Client) PostStorageFtp(params *PostStorageFtpParams, opts ...ClientOption) (*PostStorageFtpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageFtpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageFtp",
		Method:             "POST",
		PathPattern:        "/storage/ftp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageFtpReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageFtpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageFtp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageGcs creates gcs storage
*/
func (a *Client) PostStorageGcs(params *PostStorageGcsParams, opts ...ClientOption) (*PostStorageGcsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageGcsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageGcs",
		Method:             "POST",
		PathPattern:        "/storage/gcs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageGcsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageGcsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageGcs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageGphotos creates gphotos storage
*/
func (a *Client) PostStorageGphotos(params *PostStorageGphotosParams, opts ...ClientOption) (*PostStorageGphotosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageGphotosParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageGphotos",
		Method:             "POST",
		PathPattern:        "/storage/gphotos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageGphotosReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageGphotosOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageGphotos: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageHTTP creates Http storage
*/
func (a *Client) PostStorageHTTP(params *PostStorageHTTPParams, opts ...ClientOption) (*PostStorageHTTPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageHTTPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageHTTP",
		Method:             "POST",
		PathPattern:        "/storage/http",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageHTTPReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageHTTPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageHTTP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageHdfs creates hdfs storage
*/
func (a *Client) PostStorageHdfs(params *PostStorageHdfsParams, opts ...ClientOption) (*PostStorageHdfsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageHdfsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageHdfs",
		Method:             "POST",
		PathPattern:        "/storage/hdfs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageHdfsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageHdfsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageHdfs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageHidrive creates hidrive storage
*/
func (a *Client) PostStorageHidrive(params *PostStorageHidriveParams, opts ...ClientOption) (*PostStorageHidriveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageHidriveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageHidrive",
		Method:             "POST",
		PathPattern:        "/storage/hidrive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageHidriveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageHidriveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageHidrive: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageInternetarchive creates internetarchive storage
*/
func (a *Client) PostStorageInternetarchive(params *PostStorageInternetarchiveParams, opts ...ClientOption) (*PostStorageInternetarchiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageInternetarchiveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageInternetarchive",
		Method:             "POST",
		PathPattern:        "/storage/internetarchive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageInternetarchiveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageInternetarchiveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageInternetarchive: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageJottacloud creates jottacloud storage
*/
func (a *Client) PostStorageJottacloud(params *PostStorageJottacloudParams, opts ...ClientOption) (*PostStorageJottacloudOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageJottacloudParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageJottacloud",
		Method:             "POST",
		PathPattern:        "/storage/jottacloud",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageJottacloudReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageJottacloudOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageJottacloud: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageKoofrDigistorage creates koofr storage with digistorage digi storage https storage rcs rds ro
*/
func (a *Client) PostStorageKoofrDigistorage(params *PostStorageKoofrDigistorageParams, opts ...ClientOption) (*PostStorageKoofrDigistorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageKoofrDigistorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageKoofrDigistorage",
		Method:             "POST",
		PathPattern:        "/storage/koofr/digistorage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageKoofrDigistorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageKoofrDigistorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageKoofrDigistorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageKoofrKoofr creates koofr storage with koofr koofr https app koofr net
*/
func (a *Client) PostStorageKoofrKoofr(params *PostStorageKoofrKoofrParams, opts ...ClientOption) (*PostStorageKoofrKoofrOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageKoofrKoofrParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageKoofrKoofr",
		Method:             "POST",
		PathPattern:        "/storage/koofr/koofr",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageKoofrKoofrReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageKoofrKoofrOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageKoofrKoofr: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageKoofrOther creates koofr storage with other any other koofr API compatible storage service
*/
func (a *Client) PostStorageKoofrOther(params *PostStorageKoofrOtherParams, opts ...ClientOption) (*PostStorageKoofrOtherOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageKoofrOtherParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageKoofrOther",
		Method:             "POST",
		PathPattern:        "/storage/koofr/other",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageKoofrOtherReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageKoofrOtherOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageKoofrOther: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageLocal creates local storage
*/
func (a *Client) PostStorageLocal(params *PostStorageLocalParams, opts ...ClientOption) (*PostStorageLocalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageLocalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageLocal",
		Method:             "POST",
		PathPattern:        "/storage/local",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageLocalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageLocalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageLocal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageMailru creates mailru storage
*/
func (a *Client) PostStorageMailru(params *PostStorageMailruParams, opts ...ClientOption) (*PostStorageMailruOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageMailruParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageMailru",
		Method:             "POST",
		PathPattern:        "/storage/mailru",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageMailruReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageMailruOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageMailru: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageMega creates mega storage
*/
func (a *Client) PostStorageMega(params *PostStorageMegaParams, opts ...ClientOption) (*PostStorageMegaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageMegaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageMega",
		Method:             "POST",
		PathPattern:        "/storage/mega",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageMegaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageMegaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageMega: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageNetstorage creates netstorage storage
*/
func (a *Client) PostStorageNetstorage(params *PostStorageNetstorageParams, opts ...ClientOption) (*PostStorageNetstorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageNetstorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageNetstorage",
		Method:             "POST",
		PathPattern:        "/storage/netstorage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageNetstorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageNetstorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageNetstorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageOnedrive creates onedrive storage
*/
func (a *Client) PostStorageOnedrive(params *PostStorageOnedriveParams, opts ...ClientOption) (*PostStorageOnedriveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageOnedriveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageOnedrive",
		Method:             "POST",
		PathPattern:        "/storage/onedrive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageOnedriveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageOnedriveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageOnedrive: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageOosEnvAuth creates oos storage with env auth automatically pickup the credentials from runtime env first one to provide auth wins
*/
func (a *Client) PostStorageOosEnvAuth(params *PostStorageOosEnvAuthParams, opts ...ClientOption) (*PostStorageOosEnvAuthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageOosEnvAuthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageOosEnvAuth",
		Method:             "POST",
		PathPattern:        "/storage/oos/env_auth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageOosEnvAuthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageOosEnvAuthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageOosEnvAuth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageOosInstancePrincipalAuth creates oos storage with instance principal auth use instance principals to authorize an instance to make API calls
*/
func (a *Client) PostStorageOosInstancePrincipalAuth(params *PostStorageOosInstancePrincipalAuthParams, opts ...ClientOption) (*PostStorageOosInstancePrincipalAuthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageOosInstancePrincipalAuthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageOosInstancePrincipalAuth",
		Method:             "POST",
		PathPattern:        "/storage/oos/instance_principal_auth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageOosInstancePrincipalAuthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageOosInstancePrincipalAuthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageOosInstancePrincipalAuth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageOosNoAuth creates oos storage with no auth no credentials needed this is typically for reading public buckets
*/
func (a *Client) PostStorageOosNoAuth(params *PostStorageOosNoAuthParams, opts ...ClientOption) (*PostStorageOosNoAuthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageOosNoAuthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageOosNoAuth",
		Method:             "POST",
		PathPattern:        "/storage/oos/no_auth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageOosNoAuthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageOosNoAuthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageOosNoAuth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageOosResourcePrincipalAuth creates oos storage with resource principal auth use resource principals to make API calls
*/
func (a *Client) PostStorageOosResourcePrincipalAuth(params *PostStorageOosResourcePrincipalAuthParams, opts ...ClientOption) (*PostStorageOosResourcePrincipalAuthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageOosResourcePrincipalAuthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageOosResourcePrincipalAuth",
		Method:             "POST",
		PathPattern:        "/storage/oos/resource_principal_auth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageOosResourcePrincipalAuthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageOosResourcePrincipalAuthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageOosResourcePrincipalAuth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageOosUserPrincipalAuth creates oos storage with user principal auth use an o c i user and an API key for authentication
*/
func (a *Client) PostStorageOosUserPrincipalAuth(params *PostStorageOosUserPrincipalAuthParams, opts ...ClientOption) (*PostStorageOosUserPrincipalAuthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageOosUserPrincipalAuthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageOosUserPrincipalAuth",
		Method:             "POST",
		PathPattern:        "/storage/oos/user_principal_auth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageOosUserPrincipalAuthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageOosUserPrincipalAuthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageOosUserPrincipalAuth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageOpendrive creates opendrive storage
*/
func (a *Client) PostStorageOpendrive(params *PostStorageOpendriveParams, opts ...ClientOption) (*PostStorageOpendriveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageOpendriveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageOpendrive",
		Method:             "POST",
		PathPattern:        "/storage/opendrive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageOpendriveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageOpendriveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageOpendrive: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStoragePcloud creates pcloud storage
*/
func (a *Client) PostStoragePcloud(params *PostStoragePcloudParams, opts ...ClientOption) (*PostStoragePcloudOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStoragePcloudParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStoragePcloud",
		Method:             "POST",
		PathPattern:        "/storage/pcloud",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStoragePcloudReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStoragePcloudOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStoragePcloud: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStoragePremiumizeme creates premiumizeme storage
*/
func (a *Client) PostStoragePremiumizeme(params *PostStoragePremiumizemeParams, opts ...ClientOption) (*PostStoragePremiumizemeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStoragePremiumizemeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStoragePremiumizeme",
		Method:             "POST",
		PathPattern:        "/storage/premiumizeme",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStoragePremiumizemeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStoragePremiumizemeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStoragePremiumizeme: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStoragePutio creates putio storage
*/
func (a *Client) PostStoragePutio(params *PostStoragePutioParams, opts ...ClientOption) (*PostStoragePutioOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStoragePutioParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStoragePutio",
		Method:             "POST",
		PathPattern:        "/storage/putio",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStoragePutioReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStoragePutioOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStoragePutio: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageQingstor creates qingstor storage
*/
func (a *Client) PostStorageQingstor(params *PostStorageQingstorParams, opts ...ClientOption) (*PostStorageQingstorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageQingstorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageQingstor",
		Method:             "POST",
		PathPattern:        "/storage/qingstor",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageQingstorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageQingstorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageQingstor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageS3Alibaba creates s3 storage with alibaba alibaba cloud object storage system o s s formerly aliyun
*/
func (a *Client) PostStorageS3Alibaba(params *PostStorageS3AlibabaParams, opts ...ClientOption) (*PostStorageS3AlibabaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageS3AlibabaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageS3Alibaba",
		Method:             "POST",
		PathPattern:        "/storage/s3/alibaba",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageS3AlibabaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageS3AlibabaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageS3Alibaba: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageS3Arvancloud creates s3 storage with arvan cloud arvan cloud object storage a o s
*/
func (a *Client) PostStorageS3Arvancloud(params *PostStorageS3ArvancloudParams, opts ...ClientOption) (*PostStorageS3ArvancloudOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageS3ArvancloudParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageS3Arvancloud",
		Method:             "POST",
		PathPattern:        "/storage/s3/arvancloud",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageS3ArvancloudReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageS3ArvancloudOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageS3Arvancloud: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageS3Aws creates s3 storage with a w s amazon web services a w s s3
*/
func (a *Client) PostStorageS3Aws(params *PostStorageS3AwsParams, opts ...ClientOption) (*PostStorageS3AwsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageS3AwsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageS3Aws",
		Method:             "POST",
		PathPattern:        "/storage/s3/aws",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageS3AwsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageS3AwsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageS3Aws: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageS3Ceph creates s3 storage with ceph ceph object storage
*/
func (a *Client) PostStorageS3Ceph(params *PostStorageS3CephParams, opts ...ClientOption) (*PostStorageS3CephOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageS3CephParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageS3Ceph",
		Method:             "POST",
		PathPattern:        "/storage/s3/ceph",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageS3CephReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageS3CephOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageS3Ceph: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageS3Chinamobile creates s3 storage with china mobile china mobile ecloud elastic object storage e o s
*/
func (a *Client) PostStorageS3Chinamobile(params *PostStorageS3ChinamobileParams, opts ...ClientOption) (*PostStorageS3ChinamobileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageS3ChinamobileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageS3Chinamobile",
		Method:             "POST",
		PathPattern:        "/storage/s3/chinamobile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageS3ChinamobileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageS3ChinamobileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageS3Chinamobile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageS3Cloudflare creates s3 storage with cloudflare cloudflare r2 storage
*/
func (a *Client) PostStorageS3Cloudflare(params *PostStorageS3CloudflareParams, opts ...ClientOption) (*PostStorageS3CloudflareOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageS3CloudflareParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageS3Cloudflare",
		Method:             "POST",
		PathPattern:        "/storage/s3/cloudflare",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageS3CloudflareReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageS3CloudflareOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageS3Cloudflare: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageS3Digitalocean creates s3 storage with digital ocean digital ocean spaces
*/
func (a *Client) PostStorageS3Digitalocean(params *PostStorageS3DigitaloceanParams, opts ...ClientOption) (*PostStorageS3DigitaloceanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageS3DigitaloceanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageS3Digitalocean",
		Method:             "POST",
		PathPattern:        "/storage/s3/digitalocean",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageS3DigitaloceanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageS3DigitaloceanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageS3Digitalocean: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageS3Dreamhost creates s3 storage with dreamhost dreamhost dream objects
*/
func (a *Client) PostStorageS3Dreamhost(params *PostStorageS3DreamhostParams, opts ...ClientOption) (*PostStorageS3DreamhostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageS3DreamhostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageS3Dreamhost",
		Method:             "POST",
		PathPattern:        "/storage/s3/dreamhost",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageS3DreamhostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageS3DreamhostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageS3Dreamhost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageS3Huaweiobs creates s3 storage with huawei o b s huawei object storage service
*/
func (a *Client) PostStorageS3Huaweiobs(params *PostStorageS3HuaweiobsParams, opts ...ClientOption) (*PostStorageS3HuaweiobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageS3HuaweiobsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageS3Huaweiobs",
		Method:             "POST",
		PathPattern:        "/storage/s3/huaweiobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageS3HuaweiobsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageS3HuaweiobsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageS3Huaweiobs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageS3Ibmcos creates s3 storage with i b m c o s i b m c o s s3
*/
func (a *Client) PostStorageS3Ibmcos(params *PostStorageS3IbmcosParams, opts ...ClientOption) (*PostStorageS3IbmcosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageS3IbmcosParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageS3Ibmcos",
		Method:             "POST",
		PathPattern:        "/storage/s3/ibmcos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageS3IbmcosReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageS3IbmcosOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageS3Ibmcos: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageS3Idrive creates s3 storage with i drive i drive e2
*/
func (a *Client) PostStorageS3Idrive(params *PostStorageS3IdriveParams, opts ...ClientOption) (*PostStorageS3IdriveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageS3IdriveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageS3Idrive",
		Method:             "POST",
		PathPattern:        "/storage/s3/idrive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageS3IdriveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageS3IdriveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageS3Idrive: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageS3Ionos creates s3 storage with i o n o s i o n o s cloud
*/
func (a *Client) PostStorageS3Ionos(params *PostStorageS3IonosParams, opts ...ClientOption) (*PostStorageS3IonosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageS3IonosParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageS3Ionos",
		Method:             "POST",
		PathPattern:        "/storage/s3/ionos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageS3IonosReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageS3IonosOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageS3Ionos: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageS3Liara creates s3 storage with liara liara object storage
*/
func (a *Client) PostStorageS3Liara(params *PostStorageS3LiaraParams, opts ...ClientOption) (*PostStorageS3LiaraOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageS3LiaraParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageS3Liara",
		Method:             "POST",
		PathPattern:        "/storage/s3/liara",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageS3LiaraReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageS3LiaraOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageS3Liara: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageS3Lyvecloud creates s3 storage with lyve cloud seagate lyve cloud
*/
func (a *Client) PostStorageS3Lyvecloud(params *PostStorageS3LyvecloudParams, opts ...ClientOption) (*PostStorageS3LyvecloudOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageS3LyvecloudParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageS3Lyvecloud",
		Method:             "POST",
		PathPattern:        "/storage/s3/lyvecloud",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageS3LyvecloudReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageS3LyvecloudOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageS3Lyvecloud: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageS3Minio creates s3 storage with minio minio object storage
*/
func (a *Client) PostStorageS3Minio(params *PostStorageS3MinioParams, opts ...ClientOption) (*PostStorageS3MinioOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageS3MinioParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageS3Minio",
		Method:             "POST",
		PathPattern:        "/storage/s3/minio",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageS3MinioReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageS3MinioOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageS3Minio: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageS3Netease creates s3 storage with netease netease object storage n o s
*/
func (a *Client) PostStorageS3Netease(params *PostStorageS3NeteaseParams, opts ...ClientOption) (*PostStorageS3NeteaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageS3NeteaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageS3Netease",
		Method:             "POST",
		PathPattern:        "/storage/s3/netease",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageS3NeteaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageS3NeteaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageS3Netease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageS3Other creates s3 storage with other any other s3 compatible provider
*/
func (a *Client) PostStorageS3Other(params *PostStorageS3OtherParams, opts ...ClientOption) (*PostStorageS3OtherOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageS3OtherParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageS3Other",
		Method:             "POST",
		PathPattern:        "/storage/s3/other",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageS3OtherReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageS3OtherOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageS3Other: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageS3Qiniu creates s3 storage with qiniu qiniu object storage kodo
*/
func (a *Client) PostStorageS3Qiniu(params *PostStorageS3QiniuParams, opts ...ClientOption) (*PostStorageS3QiniuOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageS3QiniuParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageS3Qiniu",
		Method:             "POST",
		PathPattern:        "/storage/s3/qiniu",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageS3QiniuReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageS3QiniuOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageS3Qiniu: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageS3Rackcorp creates s3 storage with rack corp rack corp object storage
*/
func (a *Client) PostStorageS3Rackcorp(params *PostStorageS3RackcorpParams, opts ...ClientOption) (*PostStorageS3RackcorpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageS3RackcorpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageS3Rackcorp",
		Method:             "POST",
		PathPattern:        "/storage/s3/rackcorp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageS3RackcorpReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageS3RackcorpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageS3Rackcorp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageS3Scaleway creates s3 storage with scaleway scaleway object storage
*/
func (a *Client) PostStorageS3Scaleway(params *PostStorageS3ScalewayParams, opts ...ClientOption) (*PostStorageS3ScalewayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageS3ScalewayParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageS3Scaleway",
		Method:             "POST",
		PathPattern:        "/storage/s3/scaleway",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageS3ScalewayReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageS3ScalewayOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageS3Scaleway: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageS3Seaweedfs creates s3 storage with seaweed f s seaweed f s s3
*/
func (a *Client) PostStorageS3Seaweedfs(params *PostStorageS3SeaweedfsParams, opts ...ClientOption) (*PostStorageS3SeaweedfsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageS3SeaweedfsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageS3Seaweedfs",
		Method:             "POST",
		PathPattern:        "/storage/s3/seaweedfs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageS3SeaweedfsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageS3SeaweedfsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageS3Seaweedfs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageS3Stackpath creates s3 storage with stack path stack path object storage
*/
func (a *Client) PostStorageS3Stackpath(params *PostStorageS3StackpathParams, opts ...ClientOption) (*PostStorageS3StackpathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageS3StackpathParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageS3Stackpath",
		Method:             "POST",
		PathPattern:        "/storage/s3/stackpath",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageS3StackpathReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageS3StackpathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageS3Stackpath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageS3Storj creates s3 storage with storj storj s3 compatible gateway
*/
func (a *Client) PostStorageS3Storj(params *PostStorageS3StorjParams, opts ...ClientOption) (*PostStorageS3StorjOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageS3StorjParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageS3Storj",
		Method:             "POST",
		PathPattern:        "/storage/s3/storj",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageS3StorjReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageS3StorjOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageS3Storj: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageS3Tencentcos creates s3 storage with tencent c o s tencent cloud object storage c o s
*/
func (a *Client) PostStorageS3Tencentcos(params *PostStorageS3TencentcosParams, opts ...ClientOption) (*PostStorageS3TencentcosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageS3TencentcosParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageS3Tencentcos",
		Method:             "POST",
		PathPattern:        "/storage/s3/tencentcos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageS3TencentcosReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageS3TencentcosOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageS3Tencentcos: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageS3Wasabi creates s3 storage with wasabi wasabi object storage
*/
func (a *Client) PostStorageS3Wasabi(params *PostStorageS3WasabiParams, opts ...ClientOption) (*PostStorageS3WasabiOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageS3WasabiParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageS3Wasabi",
		Method:             "POST",
		PathPattern:        "/storage/s3/wasabi",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageS3WasabiReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageS3WasabiOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageS3Wasabi: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageSeafile creates seafile storage
*/
func (a *Client) PostStorageSeafile(params *PostStorageSeafileParams, opts ...ClientOption) (*PostStorageSeafileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageSeafileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageSeafile",
		Method:             "POST",
		PathPattern:        "/storage/seafile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageSeafileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageSeafileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageSeafile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageSftp creates sftp storage
*/
func (a *Client) PostStorageSftp(params *PostStorageSftpParams, opts ...ClientOption) (*PostStorageSftpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageSftpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageSftp",
		Method:             "POST",
		PathPattern:        "/storage/sftp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageSftpReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageSftpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageSftp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageSharefile creates sharefile storage
*/
func (a *Client) PostStorageSharefile(params *PostStorageSharefileParams, opts ...ClientOption) (*PostStorageSharefileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageSharefileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageSharefile",
		Method:             "POST",
		PathPattern:        "/storage/sharefile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageSharefileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageSharefileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageSharefile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageSia creates sia storage
*/
func (a *Client) PostStorageSia(params *PostStorageSiaParams, opts ...ClientOption) (*PostStorageSiaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageSiaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageSia",
		Method:             "POST",
		PathPattern:        "/storage/sia",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageSiaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageSiaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageSia: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageSmb creates smb storage
*/
func (a *Client) PostStorageSmb(params *PostStorageSmbParams, opts ...ClientOption) (*PostStorageSmbOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageSmbParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageSmb",
		Method:             "POST",
		PathPattern:        "/storage/smb",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageSmbReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageSmbOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageSmb: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageStorageType creates a new storage
*/
func (a *Client) PostStorageStorageType(params *PostStorageStorageTypeParams, opts ...ClientOption) (*PostStorageStorageTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageStorageTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageStorageType",
		Method:             "POST",
		PathPattern:        "/storage/{storageType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageStorageTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageStorageTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageStorageType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageStorjExisting creates storj storage with existing use an existing access grant
*/
func (a *Client) PostStorageStorjExisting(params *PostStorageStorjExistingParams, opts ...ClientOption) (*PostStorageStorjExistingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageStorjExistingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageStorjExisting",
		Method:             "POST",
		PathPattern:        "/storage/storj/existing",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageStorjExistingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageStorjExistingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageStorjExisting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageStorjNew creates storj storage with new create a new access grant from satellite address API key and passphrase
*/
func (a *Client) PostStorageStorjNew(params *PostStorageStorjNewParams, opts ...ClientOption) (*PostStorageStorjNewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageStorjNewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageStorjNew",
		Method:             "POST",
		PathPattern:        "/storage/storj/new",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageStorjNewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageStorjNewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageStorjNew: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageSugarsync creates sugarsync storage
*/
func (a *Client) PostStorageSugarsync(params *PostStorageSugarsyncParams, opts ...ClientOption) (*PostStorageSugarsyncOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageSugarsyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageSugarsync",
		Method:             "POST",
		PathPattern:        "/storage/sugarsync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageSugarsyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageSugarsyncOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageSugarsync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageSwift creates swift storage
*/
func (a *Client) PostStorageSwift(params *PostStorageSwiftParams, opts ...ClientOption) (*PostStorageSwiftOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageSwiftParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageSwift",
		Method:             "POST",
		PathPattern:        "/storage/swift",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageSwiftReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageSwiftOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageSwift: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageUptobox creates uptobox storage
*/
func (a *Client) PostStorageUptobox(params *PostStorageUptoboxParams, opts ...ClientOption) (*PostStorageUptoboxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageUptoboxParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageUptobox",
		Method:             "POST",
		PathPattern:        "/storage/uptobox",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageUptoboxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageUptoboxOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageUptobox: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageWebdav creates webdav storage
*/
func (a *Client) PostStorageWebdav(params *PostStorageWebdavParams, opts ...ClientOption) (*PostStorageWebdavOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageWebdavParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageWebdav",
		Method:             "POST",
		PathPattern:        "/storage/webdav",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageWebdavReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageWebdavOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageWebdav: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageYandex creates yandex storage
*/
func (a *Client) PostStorageYandex(params *PostStorageYandexParams, opts ...ClientOption) (*PostStorageYandexOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageYandexParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageYandex",
		Method:             "POST",
		PathPattern:        "/storage/yandex",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageYandexReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageYandexOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageYandex: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostStorageZoho creates zoho storage
*/
func (a *Client) PostStorageZoho(params *PostStorageZohoParams, opts ...ClientOption) (*PostStorageZohoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageZohoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStorageZoho",
		Method:             "POST",
		PathPattern:        "/storage/zoho",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStorageZohoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageZohoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStorageZoho: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
