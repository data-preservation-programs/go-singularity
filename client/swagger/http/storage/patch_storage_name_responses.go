// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/data-preservation-programs/singularity/client/swagger/models"
)

// PatchStorageNameReader is a Reader for the PatchStorageName structure.
type PatchStorageNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchStorageNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchStorageNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchStorageNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchStorageNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /storage/{name}] PatchStorageName", response, response.Code())
	}
}

// NewPatchStorageNameOK creates a PatchStorageNameOK with default headers values
func NewPatchStorageNameOK() *PatchStorageNameOK {
	return &PatchStorageNameOK{}
}

/*
PatchStorageNameOK describes a response with status code 200, with default header values.

OK
*/
type PatchStorageNameOK struct {
	Payload *models.ModelStorage
}

// IsSuccess returns true when this patch storage name o k response has a 2xx status code
func (o *PatchStorageNameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch storage name o k response has a 3xx status code
func (o *PatchStorageNameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch storage name o k response has a 4xx status code
func (o *PatchStorageNameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch storage name o k response has a 5xx status code
func (o *PatchStorageNameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch storage name o k response a status code equal to that given
func (o *PatchStorageNameOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the patch storage name o k response
func (o *PatchStorageNameOK) Code() int {
	return 200
}

func (o *PatchStorageNameOK) Error() string {
	return fmt.Sprintf("[PATCH /storage/{name}][%d] patchStorageNameOK  %+v", 200, o.Payload)
}

func (o *PatchStorageNameOK) String() string {
	return fmt.Sprintf("[PATCH /storage/{name}][%d] patchStorageNameOK  %+v", 200, o.Payload)
}

func (o *PatchStorageNameOK) GetPayload() *models.ModelStorage {
	return o.Payload
}

func (o *PatchStorageNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelStorage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchStorageNameBadRequest creates a PatchStorageNameBadRequest with default headers values
func NewPatchStorageNameBadRequest() *PatchStorageNameBadRequest {
	return &PatchStorageNameBadRequest{}
}

/*
PatchStorageNameBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PatchStorageNameBadRequest struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this patch storage name bad request response has a 2xx status code
func (o *PatchStorageNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch storage name bad request response has a 3xx status code
func (o *PatchStorageNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch storage name bad request response has a 4xx status code
func (o *PatchStorageNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch storage name bad request response has a 5xx status code
func (o *PatchStorageNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch storage name bad request response a status code equal to that given
func (o *PatchStorageNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the patch storage name bad request response
func (o *PatchStorageNameBadRequest) Code() int {
	return 400
}

func (o *PatchStorageNameBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /storage/{name}][%d] patchStorageNameBadRequest  %+v", 400, o.Payload)
}

func (o *PatchStorageNameBadRequest) String() string {
	return fmt.Sprintf("[PATCH /storage/{name}][%d] patchStorageNameBadRequest  %+v", 400, o.Payload)
}

func (o *PatchStorageNameBadRequest) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PatchStorageNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchStorageNameInternalServerError creates a PatchStorageNameInternalServerError with default headers values
func NewPatchStorageNameInternalServerError() *PatchStorageNameInternalServerError {
	return &PatchStorageNameInternalServerError{}
}

/*
PatchStorageNameInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PatchStorageNameInternalServerError struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this patch storage name internal server error response has a 2xx status code
func (o *PatchStorageNameInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch storage name internal server error response has a 3xx status code
func (o *PatchStorageNameInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch storage name internal server error response has a 4xx status code
func (o *PatchStorageNameInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch storage name internal server error response has a 5xx status code
func (o *PatchStorageNameInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch storage name internal server error response a status code equal to that given
func (o *PatchStorageNameInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the patch storage name internal server error response
func (o *PatchStorageNameInternalServerError) Code() int {
	return 500
}

func (o *PatchStorageNameInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /storage/{name}][%d] patchStorageNameInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchStorageNameInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /storage/{name}][%d] patchStorageNameInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchStorageNameInternalServerError) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PatchStorageNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
