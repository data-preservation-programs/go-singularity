// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/data-preservation-programs/singularity/client/swagger/models"
)

// PostStorageS3DreamhostReader is a Reader for the PostStorageS3Dreamhost structure.
type PostStorageS3DreamhostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostStorageS3DreamhostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostStorageS3DreamhostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostStorageS3DreamhostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostStorageS3DreamhostInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /storage/s3/dreamhost] PostStorageS3Dreamhost", response, response.Code())
	}
}

// NewPostStorageS3DreamhostOK creates a PostStorageS3DreamhostOK with default headers values
func NewPostStorageS3DreamhostOK() *PostStorageS3DreamhostOK {
	return &PostStorageS3DreamhostOK{}
}

/*
PostStorageS3DreamhostOK describes a response with status code 200, with default header values.

OK
*/
type PostStorageS3DreamhostOK struct {
	Payload *models.ModelStorage
}

// IsSuccess returns true when this post storage s3 dreamhost o k response has a 2xx status code
func (o *PostStorageS3DreamhostOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post storage s3 dreamhost o k response has a 3xx status code
func (o *PostStorageS3DreamhostOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post storage s3 dreamhost o k response has a 4xx status code
func (o *PostStorageS3DreamhostOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post storage s3 dreamhost o k response has a 5xx status code
func (o *PostStorageS3DreamhostOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post storage s3 dreamhost o k response a status code equal to that given
func (o *PostStorageS3DreamhostOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post storage s3 dreamhost o k response
func (o *PostStorageS3DreamhostOK) Code() int {
	return 200
}

func (o *PostStorageS3DreamhostOK) Error() string {
	return fmt.Sprintf("[POST /storage/s3/dreamhost][%d] postStorageS3DreamhostOK  %+v", 200, o.Payload)
}

func (o *PostStorageS3DreamhostOK) String() string {
	return fmt.Sprintf("[POST /storage/s3/dreamhost][%d] postStorageS3DreamhostOK  %+v", 200, o.Payload)
}

func (o *PostStorageS3DreamhostOK) GetPayload() *models.ModelStorage {
	return o.Payload
}

func (o *PostStorageS3DreamhostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelStorage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostStorageS3DreamhostBadRequest creates a PostStorageS3DreamhostBadRequest with default headers values
func NewPostStorageS3DreamhostBadRequest() *PostStorageS3DreamhostBadRequest {
	return &PostStorageS3DreamhostBadRequest{}
}

/*
PostStorageS3DreamhostBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostStorageS3DreamhostBadRequest struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this post storage s3 dreamhost bad request response has a 2xx status code
func (o *PostStorageS3DreamhostBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post storage s3 dreamhost bad request response has a 3xx status code
func (o *PostStorageS3DreamhostBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post storage s3 dreamhost bad request response has a 4xx status code
func (o *PostStorageS3DreamhostBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post storage s3 dreamhost bad request response has a 5xx status code
func (o *PostStorageS3DreamhostBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post storage s3 dreamhost bad request response a status code equal to that given
func (o *PostStorageS3DreamhostBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post storage s3 dreamhost bad request response
func (o *PostStorageS3DreamhostBadRequest) Code() int {
	return 400
}

func (o *PostStorageS3DreamhostBadRequest) Error() string {
	return fmt.Sprintf("[POST /storage/s3/dreamhost][%d] postStorageS3DreamhostBadRequest  %+v", 400, o.Payload)
}

func (o *PostStorageS3DreamhostBadRequest) String() string {
	return fmt.Sprintf("[POST /storage/s3/dreamhost][%d] postStorageS3DreamhostBadRequest  %+v", 400, o.Payload)
}

func (o *PostStorageS3DreamhostBadRequest) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PostStorageS3DreamhostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostStorageS3DreamhostInternalServerError creates a PostStorageS3DreamhostInternalServerError with default headers values
func NewPostStorageS3DreamhostInternalServerError() *PostStorageS3DreamhostInternalServerError {
	return &PostStorageS3DreamhostInternalServerError{}
}

/*
PostStorageS3DreamhostInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostStorageS3DreamhostInternalServerError struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this post storage s3 dreamhost internal server error response has a 2xx status code
func (o *PostStorageS3DreamhostInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post storage s3 dreamhost internal server error response has a 3xx status code
func (o *PostStorageS3DreamhostInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post storage s3 dreamhost internal server error response has a 4xx status code
func (o *PostStorageS3DreamhostInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post storage s3 dreamhost internal server error response has a 5xx status code
func (o *PostStorageS3DreamhostInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post storage s3 dreamhost internal server error response a status code equal to that given
func (o *PostStorageS3DreamhostInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post storage s3 dreamhost internal server error response
func (o *PostStorageS3DreamhostInternalServerError) Code() int {
	return 500
}

func (o *PostStorageS3DreamhostInternalServerError) Error() string {
	return fmt.Sprintf("[POST /storage/s3/dreamhost][%d] postStorageS3DreamhostInternalServerError  %+v", 500, o.Payload)
}

func (o *PostStorageS3DreamhostInternalServerError) String() string {
	return fmt.Sprintf("[POST /storage/s3/dreamhost][%d] postStorageS3DreamhostInternalServerError  %+v", 500, o.Payload)
}

func (o *PostStorageS3DreamhostInternalServerError) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PostStorageS3DreamhostInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
