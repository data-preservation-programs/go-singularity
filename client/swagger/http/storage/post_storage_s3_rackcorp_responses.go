// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/data-preservation-programs/singularity/client/swagger/models"
)

// PostStorageS3RackcorpReader is a Reader for the PostStorageS3Rackcorp structure.
type PostStorageS3RackcorpReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostStorageS3RackcorpReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostStorageS3RackcorpOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostStorageS3RackcorpBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostStorageS3RackcorpInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /storage/s3/rackcorp] PostStorageS3Rackcorp", response, response.Code())
	}
}

// NewPostStorageS3RackcorpOK creates a PostStorageS3RackcorpOK with default headers values
func NewPostStorageS3RackcorpOK() *PostStorageS3RackcorpOK {
	return &PostStorageS3RackcorpOK{}
}

/*
PostStorageS3RackcorpOK describes a response with status code 200, with default header values.

OK
*/
type PostStorageS3RackcorpOK struct {
	Payload *models.ModelStorage
}

// IsSuccess returns true when this post storage s3 rackcorp o k response has a 2xx status code
func (o *PostStorageS3RackcorpOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post storage s3 rackcorp o k response has a 3xx status code
func (o *PostStorageS3RackcorpOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post storage s3 rackcorp o k response has a 4xx status code
func (o *PostStorageS3RackcorpOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post storage s3 rackcorp o k response has a 5xx status code
func (o *PostStorageS3RackcorpOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post storage s3 rackcorp o k response a status code equal to that given
func (o *PostStorageS3RackcorpOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post storage s3 rackcorp o k response
func (o *PostStorageS3RackcorpOK) Code() int {
	return 200
}

func (o *PostStorageS3RackcorpOK) Error() string {
	return fmt.Sprintf("[POST /storage/s3/rackcorp][%d] postStorageS3RackcorpOK  %+v", 200, o.Payload)
}

func (o *PostStorageS3RackcorpOK) String() string {
	return fmt.Sprintf("[POST /storage/s3/rackcorp][%d] postStorageS3RackcorpOK  %+v", 200, o.Payload)
}

func (o *PostStorageS3RackcorpOK) GetPayload() *models.ModelStorage {
	return o.Payload
}

func (o *PostStorageS3RackcorpOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelStorage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostStorageS3RackcorpBadRequest creates a PostStorageS3RackcorpBadRequest with default headers values
func NewPostStorageS3RackcorpBadRequest() *PostStorageS3RackcorpBadRequest {
	return &PostStorageS3RackcorpBadRequest{}
}

/*
PostStorageS3RackcorpBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostStorageS3RackcorpBadRequest struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this post storage s3 rackcorp bad request response has a 2xx status code
func (o *PostStorageS3RackcorpBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post storage s3 rackcorp bad request response has a 3xx status code
func (o *PostStorageS3RackcorpBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post storage s3 rackcorp bad request response has a 4xx status code
func (o *PostStorageS3RackcorpBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post storage s3 rackcorp bad request response has a 5xx status code
func (o *PostStorageS3RackcorpBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post storage s3 rackcorp bad request response a status code equal to that given
func (o *PostStorageS3RackcorpBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post storage s3 rackcorp bad request response
func (o *PostStorageS3RackcorpBadRequest) Code() int {
	return 400
}

func (o *PostStorageS3RackcorpBadRequest) Error() string {
	return fmt.Sprintf("[POST /storage/s3/rackcorp][%d] postStorageS3RackcorpBadRequest  %+v", 400, o.Payload)
}

func (o *PostStorageS3RackcorpBadRequest) String() string {
	return fmt.Sprintf("[POST /storage/s3/rackcorp][%d] postStorageS3RackcorpBadRequest  %+v", 400, o.Payload)
}

func (o *PostStorageS3RackcorpBadRequest) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PostStorageS3RackcorpBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostStorageS3RackcorpInternalServerError creates a PostStorageS3RackcorpInternalServerError with default headers values
func NewPostStorageS3RackcorpInternalServerError() *PostStorageS3RackcorpInternalServerError {
	return &PostStorageS3RackcorpInternalServerError{}
}

/*
PostStorageS3RackcorpInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostStorageS3RackcorpInternalServerError struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this post storage s3 rackcorp internal server error response has a 2xx status code
func (o *PostStorageS3RackcorpInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post storage s3 rackcorp internal server error response has a 3xx status code
func (o *PostStorageS3RackcorpInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post storage s3 rackcorp internal server error response has a 4xx status code
func (o *PostStorageS3RackcorpInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post storage s3 rackcorp internal server error response has a 5xx status code
func (o *PostStorageS3RackcorpInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post storage s3 rackcorp internal server error response a status code equal to that given
func (o *PostStorageS3RackcorpInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post storage s3 rackcorp internal server error response
func (o *PostStorageS3RackcorpInternalServerError) Code() int {
	return 500
}

func (o *PostStorageS3RackcorpInternalServerError) Error() string {
	return fmt.Sprintf("[POST /storage/s3/rackcorp][%d] postStorageS3RackcorpInternalServerError  %+v", 500, o.Payload)
}

func (o *PostStorageS3RackcorpInternalServerError) String() string {
	return fmt.Sprintf("[POST /storage/s3/rackcorp][%d] postStorageS3RackcorpInternalServerError  %+v", 500, o.Payload)
}

func (o *PostStorageS3RackcorpInternalServerError) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PostStorageS3RackcorpInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
