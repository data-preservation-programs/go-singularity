// Code generated by go-swagger; DO NOT EDIT.

package data_source

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PostFileIDPrepareToPackReader is a Reader for the PostFileIDPrepareToPack structure.
type PostFileIDPrepareToPackReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostFileIDPrepareToPackReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostFileIDPrepareToPackCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostFileIDPrepareToPackBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostFileIDPrepareToPackInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /file/{id}/prepare_to_pack] PostFileIDPrepareToPack", response, response.Code())
	}
}

// NewPostFileIDPrepareToPackCreated creates a PostFileIDPrepareToPackCreated with default headers values
func NewPostFileIDPrepareToPackCreated() *PostFileIDPrepareToPackCreated {
	return &PostFileIDPrepareToPackCreated{}
}

/*
PostFileIDPrepareToPackCreated describes a response with status code 201, with default header values.

Created
*/
type PostFileIDPrepareToPackCreated struct {
	Payload int64
}

// IsSuccess returns true when this post file Id prepare to pack created response has a 2xx status code
func (o *PostFileIDPrepareToPackCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post file Id prepare to pack created response has a 3xx status code
func (o *PostFileIDPrepareToPackCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post file Id prepare to pack created response has a 4xx status code
func (o *PostFileIDPrepareToPackCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this post file Id prepare to pack created response has a 5xx status code
func (o *PostFileIDPrepareToPackCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this post file Id prepare to pack created response a status code equal to that given
func (o *PostFileIDPrepareToPackCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the post file Id prepare to pack created response
func (o *PostFileIDPrepareToPackCreated) Code() int {
	return 201
}

func (o *PostFileIDPrepareToPackCreated) Error() string {
	return fmt.Sprintf("[POST /file/{id}/prepare_to_pack][%d] postFileIdPrepareToPackCreated  %+v", 201, o.Payload)
}

func (o *PostFileIDPrepareToPackCreated) String() string {
	return fmt.Sprintf("[POST /file/{id}/prepare_to_pack][%d] postFileIdPrepareToPackCreated  %+v", 201, o.Payload)
}

func (o *PostFileIDPrepareToPackCreated) GetPayload() int64 {
	return o.Payload
}

func (o *PostFileIDPrepareToPackCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFileIDPrepareToPackBadRequest creates a PostFileIDPrepareToPackBadRequest with default headers values
func NewPostFileIDPrepareToPackBadRequest() *PostFileIDPrepareToPackBadRequest {
	return &PostFileIDPrepareToPackBadRequest{}
}

/*
PostFileIDPrepareToPackBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostFileIDPrepareToPackBadRequest struct {
	Payload string
}

// IsSuccess returns true when this post file Id prepare to pack bad request response has a 2xx status code
func (o *PostFileIDPrepareToPackBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post file Id prepare to pack bad request response has a 3xx status code
func (o *PostFileIDPrepareToPackBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post file Id prepare to pack bad request response has a 4xx status code
func (o *PostFileIDPrepareToPackBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post file Id prepare to pack bad request response has a 5xx status code
func (o *PostFileIDPrepareToPackBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post file Id prepare to pack bad request response a status code equal to that given
func (o *PostFileIDPrepareToPackBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post file Id prepare to pack bad request response
func (o *PostFileIDPrepareToPackBadRequest) Code() int {
	return 400
}

func (o *PostFileIDPrepareToPackBadRequest) Error() string {
	return fmt.Sprintf("[POST /file/{id}/prepare_to_pack][%d] postFileIdPrepareToPackBadRequest  %+v", 400, o.Payload)
}

func (o *PostFileIDPrepareToPackBadRequest) String() string {
	return fmt.Sprintf("[POST /file/{id}/prepare_to_pack][%d] postFileIdPrepareToPackBadRequest  %+v", 400, o.Payload)
}

func (o *PostFileIDPrepareToPackBadRequest) GetPayload() string {
	return o.Payload
}

func (o *PostFileIDPrepareToPackBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFileIDPrepareToPackInternalServerError creates a PostFileIDPrepareToPackInternalServerError with default headers values
func NewPostFileIDPrepareToPackInternalServerError() *PostFileIDPrepareToPackInternalServerError {
	return &PostFileIDPrepareToPackInternalServerError{}
}

/*
PostFileIDPrepareToPackInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostFileIDPrepareToPackInternalServerError struct {
	Payload string
}

// IsSuccess returns true when this post file Id prepare to pack internal server error response has a 2xx status code
func (o *PostFileIDPrepareToPackInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post file Id prepare to pack internal server error response has a 3xx status code
func (o *PostFileIDPrepareToPackInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post file Id prepare to pack internal server error response has a 4xx status code
func (o *PostFileIDPrepareToPackInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post file Id prepare to pack internal server error response has a 5xx status code
func (o *PostFileIDPrepareToPackInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post file Id prepare to pack internal server error response a status code equal to that given
func (o *PostFileIDPrepareToPackInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post file Id prepare to pack internal server error response
func (o *PostFileIDPrepareToPackInternalServerError) Code() int {
	return 500
}

func (o *PostFileIDPrepareToPackInternalServerError) Error() string {
	return fmt.Sprintf("[POST /file/{id}/prepare_to_pack][%d] postFileIdPrepareToPackInternalServerError  %+v", 500, o.Payload)
}

func (o *PostFileIDPrepareToPackInternalServerError) String() string {
	return fmt.Sprintf("[POST /file/{id}/prepare_to_pack][%d] postFileIdPrepareToPackInternalServerError  %+v", 500, o.Payload)
}

func (o *PostFileIDPrepareToPackInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *PostFileIDPrepareToPackInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
