// Code generated by go-swagger; DO NOT EDIT.

package data_source

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/data-preservation-programs/singularity/client/swagger/models"
)

// PostSourceInternetarchiveDatasetDatasetNameReader is a Reader for the PostSourceInternetarchiveDatasetDatasetName structure.
type PostSourceInternetarchiveDatasetDatasetNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostSourceInternetarchiveDatasetDatasetNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostSourceInternetarchiveDatasetDatasetNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostSourceInternetarchiveDatasetDatasetNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostSourceInternetarchiveDatasetDatasetNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /source/internetarchive/dataset/{datasetName}] PostSourceInternetarchiveDatasetDatasetName", response, response.Code())
	}
}

// NewPostSourceInternetarchiveDatasetDatasetNameOK creates a PostSourceInternetarchiveDatasetDatasetNameOK with default headers values
func NewPostSourceInternetarchiveDatasetDatasetNameOK() *PostSourceInternetarchiveDatasetDatasetNameOK {
	return &PostSourceInternetarchiveDatasetDatasetNameOK{}
}

/*
PostSourceInternetarchiveDatasetDatasetNameOK describes a response with status code 200, with default header values.

OK
*/
type PostSourceInternetarchiveDatasetDatasetNameOK struct {
	Payload *models.ModelSource
}

// IsSuccess returns true when this post source internetarchive dataset dataset name o k response has a 2xx status code
func (o *PostSourceInternetarchiveDatasetDatasetNameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post source internetarchive dataset dataset name o k response has a 3xx status code
func (o *PostSourceInternetarchiveDatasetDatasetNameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post source internetarchive dataset dataset name o k response has a 4xx status code
func (o *PostSourceInternetarchiveDatasetDatasetNameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post source internetarchive dataset dataset name o k response has a 5xx status code
func (o *PostSourceInternetarchiveDatasetDatasetNameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post source internetarchive dataset dataset name o k response a status code equal to that given
func (o *PostSourceInternetarchiveDatasetDatasetNameOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post source internetarchive dataset dataset name o k response
func (o *PostSourceInternetarchiveDatasetDatasetNameOK) Code() int {
	return 200
}

func (o *PostSourceInternetarchiveDatasetDatasetNameOK) Error() string {
	return fmt.Sprintf("[POST /source/internetarchive/dataset/{datasetName}][%d] postSourceInternetarchiveDatasetDatasetNameOK  %+v", 200, o.Payload)
}

func (o *PostSourceInternetarchiveDatasetDatasetNameOK) String() string {
	return fmt.Sprintf("[POST /source/internetarchive/dataset/{datasetName}][%d] postSourceInternetarchiveDatasetDatasetNameOK  %+v", 200, o.Payload)
}

func (o *PostSourceInternetarchiveDatasetDatasetNameOK) GetPayload() *models.ModelSource {
	return o.Payload
}

func (o *PostSourceInternetarchiveDatasetDatasetNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelSource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSourceInternetarchiveDatasetDatasetNameBadRequest creates a PostSourceInternetarchiveDatasetDatasetNameBadRequest with default headers values
func NewPostSourceInternetarchiveDatasetDatasetNameBadRequest() *PostSourceInternetarchiveDatasetDatasetNameBadRequest {
	return &PostSourceInternetarchiveDatasetDatasetNameBadRequest{}
}

/*
PostSourceInternetarchiveDatasetDatasetNameBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostSourceInternetarchiveDatasetDatasetNameBadRequest struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this post source internetarchive dataset dataset name bad request response has a 2xx status code
func (o *PostSourceInternetarchiveDatasetDatasetNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post source internetarchive dataset dataset name bad request response has a 3xx status code
func (o *PostSourceInternetarchiveDatasetDatasetNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post source internetarchive dataset dataset name bad request response has a 4xx status code
func (o *PostSourceInternetarchiveDatasetDatasetNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post source internetarchive dataset dataset name bad request response has a 5xx status code
func (o *PostSourceInternetarchiveDatasetDatasetNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post source internetarchive dataset dataset name bad request response a status code equal to that given
func (o *PostSourceInternetarchiveDatasetDatasetNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post source internetarchive dataset dataset name bad request response
func (o *PostSourceInternetarchiveDatasetDatasetNameBadRequest) Code() int {
	return 400
}

func (o *PostSourceInternetarchiveDatasetDatasetNameBadRequest) Error() string {
	return fmt.Sprintf("[POST /source/internetarchive/dataset/{datasetName}][%d] postSourceInternetarchiveDatasetDatasetNameBadRequest  %+v", 400, o.Payload)
}

func (o *PostSourceInternetarchiveDatasetDatasetNameBadRequest) String() string {
	return fmt.Sprintf("[POST /source/internetarchive/dataset/{datasetName}][%d] postSourceInternetarchiveDatasetDatasetNameBadRequest  %+v", 400, o.Payload)
}

func (o *PostSourceInternetarchiveDatasetDatasetNameBadRequest) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PostSourceInternetarchiveDatasetDatasetNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSourceInternetarchiveDatasetDatasetNameInternalServerError creates a PostSourceInternetarchiveDatasetDatasetNameInternalServerError with default headers values
func NewPostSourceInternetarchiveDatasetDatasetNameInternalServerError() *PostSourceInternetarchiveDatasetDatasetNameInternalServerError {
	return &PostSourceInternetarchiveDatasetDatasetNameInternalServerError{}
}

/*
PostSourceInternetarchiveDatasetDatasetNameInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostSourceInternetarchiveDatasetDatasetNameInternalServerError struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this post source internetarchive dataset dataset name internal server error response has a 2xx status code
func (o *PostSourceInternetarchiveDatasetDatasetNameInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post source internetarchive dataset dataset name internal server error response has a 3xx status code
func (o *PostSourceInternetarchiveDatasetDatasetNameInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post source internetarchive dataset dataset name internal server error response has a 4xx status code
func (o *PostSourceInternetarchiveDatasetDatasetNameInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post source internetarchive dataset dataset name internal server error response has a 5xx status code
func (o *PostSourceInternetarchiveDatasetDatasetNameInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post source internetarchive dataset dataset name internal server error response a status code equal to that given
func (o *PostSourceInternetarchiveDatasetDatasetNameInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post source internetarchive dataset dataset name internal server error response
func (o *PostSourceInternetarchiveDatasetDatasetNameInternalServerError) Code() int {
	return 500
}

func (o *PostSourceInternetarchiveDatasetDatasetNameInternalServerError) Error() string {
	return fmt.Sprintf("[POST /source/internetarchive/dataset/{datasetName}][%d] postSourceInternetarchiveDatasetDatasetNameInternalServerError  %+v", 500, o.Payload)
}

func (o *PostSourceInternetarchiveDatasetDatasetNameInternalServerError) String() string {
	return fmt.Sprintf("[POST /source/internetarchive/dataset/{datasetName}][%d] postSourceInternetarchiveDatasetDatasetNameInternalServerError  %+v", 500, o.Payload)
}

func (o *PostSourceInternetarchiveDatasetDatasetNameInternalServerError) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PostSourceInternetarchiveDatasetDatasetNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
