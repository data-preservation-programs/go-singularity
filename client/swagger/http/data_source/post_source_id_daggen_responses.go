// Code generated by go-swagger; DO NOT EDIT.

package data_source

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/data-preservation-programs/singularity/client/swagger/models"
)

// PostSourceIDDaggenReader is a Reader for the PostSourceIDDaggen structure.
type PostSourceIDDaggenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostSourceIDDaggenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostSourceIDDaggenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostSourceIDDaggenBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostSourceIDDaggenInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /source/{id}/daggen] PostSourceIDDaggen", response, response.Code())
	}
}

// NewPostSourceIDDaggenOK creates a PostSourceIDDaggenOK with default headers values
func NewPostSourceIDDaggenOK() *PostSourceIDDaggenOK {
	return &PostSourceIDDaggenOK{}
}

/*
PostSourceIDDaggenOK describes a response with status code 200, with default header values.

OK
*/
type PostSourceIDDaggenOK struct {
	Payload *models.ModelSource
}

// IsSuccess returns true when this post source Id daggen o k response has a 2xx status code
func (o *PostSourceIDDaggenOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post source Id daggen o k response has a 3xx status code
func (o *PostSourceIDDaggenOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post source Id daggen o k response has a 4xx status code
func (o *PostSourceIDDaggenOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post source Id daggen o k response has a 5xx status code
func (o *PostSourceIDDaggenOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post source Id daggen o k response a status code equal to that given
func (o *PostSourceIDDaggenOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post source Id daggen o k response
func (o *PostSourceIDDaggenOK) Code() int {
	return 200
}

func (o *PostSourceIDDaggenOK) Error() string {
	return fmt.Sprintf("[POST /source/{id}/daggen][%d] postSourceIdDaggenOK  %+v", 200, o.Payload)
}

func (o *PostSourceIDDaggenOK) String() string {
	return fmt.Sprintf("[POST /source/{id}/daggen][%d] postSourceIdDaggenOK  %+v", 200, o.Payload)
}

func (o *PostSourceIDDaggenOK) GetPayload() *models.ModelSource {
	return o.Payload
}

func (o *PostSourceIDDaggenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelSource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSourceIDDaggenBadRequest creates a PostSourceIDDaggenBadRequest with default headers values
func NewPostSourceIDDaggenBadRequest() *PostSourceIDDaggenBadRequest {
	return &PostSourceIDDaggenBadRequest{}
}

/*
PostSourceIDDaggenBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostSourceIDDaggenBadRequest struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this post source Id daggen bad request response has a 2xx status code
func (o *PostSourceIDDaggenBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post source Id daggen bad request response has a 3xx status code
func (o *PostSourceIDDaggenBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post source Id daggen bad request response has a 4xx status code
func (o *PostSourceIDDaggenBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post source Id daggen bad request response has a 5xx status code
func (o *PostSourceIDDaggenBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post source Id daggen bad request response a status code equal to that given
func (o *PostSourceIDDaggenBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post source Id daggen bad request response
func (o *PostSourceIDDaggenBadRequest) Code() int {
	return 400
}

func (o *PostSourceIDDaggenBadRequest) Error() string {
	return fmt.Sprintf("[POST /source/{id}/daggen][%d] postSourceIdDaggenBadRequest  %+v", 400, o.Payload)
}

func (o *PostSourceIDDaggenBadRequest) String() string {
	return fmt.Sprintf("[POST /source/{id}/daggen][%d] postSourceIdDaggenBadRequest  %+v", 400, o.Payload)
}

func (o *PostSourceIDDaggenBadRequest) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PostSourceIDDaggenBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSourceIDDaggenInternalServerError creates a PostSourceIDDaggenInternalServerError with default headers values
func NewPostSourceIDDaggenInternalServerError() *PostSourceIDDaggenInternalServerError {
	return &PostSourceIDDaggenInternalServerError{}
}

/*
PostSourceIDDaggenInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostSourceIDDaggenInternalServerError struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this post source Id daggen internal server error response has a 2xx status code
func (o *PostSourceIDDaggenInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post source Id daggen internal server error response has a 3xx status code
func (o *PostSourceIDDaggenInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post source Id daggen internal server error response has a 4xx status code
func (o *PostSourceIDDaggenInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post source Id daggen internal server error response has a 5xx status code
func (o *PostSourceIDDaggenInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post source Id daggen internal server error response a status code equal to that given
func (o *PostSourceIDDaggenInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post source Id daggen internal server error response
func (o *PostSourceIDDaggenInternalServerError) Code() int {
	return 500
}

func (o *PostSourceIDDaggenInternalServerError) Error() string {
	return fmt.Sprintf("[POST /source/{id}/daggen][%d] postSourceIdDaggenInternalServerError  %+v", 500, o.Payload)
}

func (o *PostSourceIDDaggenInternalServerError) String() string {
	return fmt.Sprintf("[POST /source/{id}/daggen][%d] postSourceIdDaggenInternalServerError  %+v", 500, o.Payload)
}

func (o *PostSourceIDDaggenInternalServerError) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PostSourceIDDaggenInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
