// Code generated by go-swagger; DO NOT EDIT.

package data_source

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/data-preservation-programs/singularity/client/swagger/models"
)

// PatchSourceIDReader is a Reader for the PatchSourceID structure.
type PatchSourceIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchSourceIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchSourceIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchSourceIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchSourceIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /source/{id}] PatchSourceID", response, response.Code())
	}
}

// NewPatchSourceIDOK creates a PatchSourceIDOK with default headers values
func NewPatchSourceIDOK() *PatchSourceIDOK {
	return &PatchSourceIDOK{}
}

/*
PatchSourceIDOK describes a response with status code 200, with default header values.

OK
*/
type PatchSourceIDOK struct {
	Payload *models.ModelSource
}

// IsSuccess returns true when this patch source Id o k response has a 2xx status code
func (o *PatchSourceIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch source Id o k response has a 3xx status code
func (o *PatchSourceIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch source Id o k response has a 4xx status code
func (o *PatchSourceIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch source Id o k response has a 5xx status code
func (o *PatchSourceIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch source Id o k response a status code equal to that given
func (o *PatchSourceIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the patch source Id o k response
func (o *PatchSourceIDOK) Code() int {
	return 200
}

func (o *PatchSourceIDOK) Error() string {
	return fmt.Sprintf("[PATCH /source/{id}][%d] patchSourceIdOK  %+v", 200, o.Payload)
}

func (o *PatchSourceIDOK) String() string {
	return fmt.Sprintf("[PATCH /source/{id}][%d] patchSourceIdOK  %+v", 200, o.Payload)
}

func (o *PatchSourceIDOK) GetPayload() *models.ModelSource {
	return o.Payload
}

func (o *PatchSourceIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelSource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSourceIDBadRequest creates a PatchSourceIDBadRequest with default headers values
func NewPatchSourceIDBadRequest() *PatchSourceIDBadRequest {
	return &PatchSourceIDBadRequest{}
}

/*
PatchSourceIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PatchSourceIDBadRequest struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this patch source Id bad request response has a 2xx status code
func (o *PatchSourceIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch source Id bad request response has a 3xx status code
func (o *PatchSourceIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch source Id bad request response has a 4xx status code
func (o *PatchSourceIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch source Id bad request response has a 5xx status code
func (o *PatchSourceIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch source Id bad request response a status code equal to that given
func (o *PatchSourceIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the patch source Id bad request response
func (o *PatchSourceIDBadRequest) Code() int {
	return 400
}

func (o *PatchSourceIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /source/{id}][%d] patchSourceIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchSourceIDBadRequest) String() string {
	return fmt.Sprintf("[PATCH /source/{id}][%d] patchSourceIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchSourceIDBadRequest) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PatchSourceIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSourceIDInternalServerError creates a PatchSourceIDInternalServerError with default headers values
func NewPatchSourceIDInternalServerError() *PatchSourceIDInternalServerError {
	return &PatchSourceIDInternalServerError{}
}

/*
PatchSourceIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PatchSourceIDInternalServerError struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this patch source Id internal server error response has a 2xx status code
func (o *PatchSourceIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch source Id internal server error response has a 3xx status code
func (o *PatchSourceIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch source Id internal server error response has a 4xx status code
func (o *PatchSourceIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch source Id internal server error response has a 5xx status code
func (o *PatchSourceIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch source Id internal server error response a status code equal to that given
func (o *PatchSourceIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the patch source Id internal server error response
func (o *PatchSourceIDInternalServerError) Code() int {
	return 500
}

func (o *PatchSourceIDInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /source/{id}][%d] patchSourceIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchSourceIDInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /source/{id}][%d] patchSourceIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchSourceIDInternalServerError) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PatchSourceIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
