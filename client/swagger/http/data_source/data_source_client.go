// Code generated by go-swagger; DO NOT EDIT.

package data_source

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new data source API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for data source API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteSourceID(params *DeleteSourceIDParams, opts ...ClientOption) (*DeleteSourceIDNoContent, error)

	GetChunkID(params *GetChunkIDParams, opts ...ClientOption) (*GetChunkIDOK, error)

	GetItemID(params *GetItemIDParams, opts ...ClientOption) (*GetItemIDOK, error)

	GetSource(params *GetSourceParams, opts ...ClientOption) (*GetSourceOK, error)

	GetSourceIDChunks(params *GetSourceIDChunksParams, opts ...ClientOption) (*GetSourceIDChunksOK, error)

	GetSourceIDItems(params *GetSourceIDItemsParams, opts ...ClientOption) (*GetSourceIDItemsOK, error)

	GetSourceIDPath(params *GetSourceIDPathParams, opts ...ClientOption) (*GetSourceIDPathOK, error)

	GetSourceIDSummary(params *GetSourceIDSummaryParams, opts ...ClientOption) (*GetSourceIDSummaryOK, error)

	PatchSourceID(params *PatchSourceIDParams, opts ...ClientOption) (*PatchSourceIDOK, error)

	PostSourceAcdDatasetDatasetName(params *PostSourceAcdDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceAcdDatasetDatasetNameOK, error)

	PostSourceAzureblobDatasetDatasetName(params *PostSourceAzureblobDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceAzureblobDatasetDatasetNameOK, error)

	PostSourceB2DatasetDatasetName(params *PostSourceB2DatasetDatasetNameParams, opts ...ClientOption) (*PostSourceB2DatasetDatasetNameOK, error)

	PostSourceBoxDatasetDatasetName(params *PostSourceBoxDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceBoxDatasetDatasetNameOK, error)

	PostSourceDriveDatasetDatasetName(params *PostSourceDriveDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceDriveDatasetDatasetNameOK, error)

	PostSourceDropboxDatasetDatasetName(params *PostSourceDropboxDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceDropboxDatasetDatasetNameOK, error)

	PostSourceFichierDatasetDatasetName(params *PostSourceFichierDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceFichierDatasetDatasetNameOK, error)

	PostSourceFilefabricDatasetDatasetName(params *PostSourceFilefabricDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceFilefabricDatasetDatasetNameOK, error)

	PostSourceFtpDatasetDatasetName(params *PostSourceFtpDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceFtpDatasetDatasetNameOK, error)

	PostSourceGcsDatasetDatasetName(params *PostSourceGcsDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceGcsDatasetDatasetNameOK, error)

	PostSourceGphotosDatasetDatasetName(params *PostSourceGphotosDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceGphotosDatasetDatasetNameOK, error)

	PostSourceHTTPDatasetDatasetName(params *PostSourceHTTPDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceHTTPDatasetDatasetNameOK, error)

	PostSourceHdfsDatasetDatasetName(params *PostSourceHdfsDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceHdfsDatasetDatasetNameOK, error)

	PostSourceHidriveDatasetDatasetName(params *PostSourceHidriveDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceHidriveDatasetDatasetNameOK, error)

	PostSourceIDCheck(params *PostSourceIDCheckParams, opts ...ClientOption) (*PostSourceIDCheckOK, error)

	PostSourceIDDaggen(params *PostSourceIDDaggenParams, opts ...ClientOption) (*PostSourceIDDaggenOK, error)

	PostSourceIDPush(params *PostSourceIDPushParams, opts ...ClientOption) (*PostSourceIDPushCreated, error)

	PostSourceIDRepack(params *PostSourceIDRepackParams, opts ...ClientOption) (*PostSourceIDRepackOK, error)

	PostSourceIDRescan(params *PostSourceIDRescanParams, opts ...ClientOption) (*PostSourceIDRescanOK, error)

	PostSourceInternetarchiveDatasetDatasetName(params *PostSourceInternetarchiveDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceInternetarchiveDatasetDatasetNameOK, error)

	PostSourceJottacloudDatasetDatasetName(params *PostSourceJottacloudDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceJottacloudDatasetDatasetNameOK, error)

	PostSourceKoofrDatasetDatasetName(params *PostSourceKoofrDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceKoofrDatasetDatasetNameOK, error)

	PostSourceLocalDatasetDatasetName(params *PostSourceLocalDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceLocalDatasetDatasetNameOK, error)

	PostSourceMailruDatasetDatasetName(params *PostSourceMailruDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceMailruDatasetDatasetNameOK, error)

	PostSourceMegaDatasetDatasetName(params *PostSourceMegaDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceMegaDatasetDatasetNameOK, error)

	PostSourceNetstorageDatasetDatasetName(params *PostSourceNetstorageDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceNetstorageDatasetDatasetNameOK, error)

	PostSourceOnedriveDatasetDatasetName(params *PostSourceOnedriveDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceOnedriveDatasetDatasetNameOK, error)

	PostSourceOosDatasetDatasetName(params *PostSourceOosDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceOosDatasetDatasetNameOK, error)

	PostSourceOpendriveDatasetDatasetName(params *PostSourceOpendriveDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceOpendriveDatasetDatasetNameOK, error)

	PostSourcePcloudDatasetDatasetName(params *PostSourcePcloudDatasetDatasetNameParams, opts ...ClientOption) (*PostSourcePcloudDatasetDatasetNameOK, error)

	PostSourcePremiumizemeDatasetDatasetName(params *PostSourcePremiumizemeDatasetDatasetNameParams, opts ...ClientOption) (*PostSourcePremiumizemeDatasetDatasetNameOK, error)

	PostSourcePutioDatasetDatasetName(params *PostSourcePutioDatasetDatasetNameParams, opts ...ClientOption) (*PostSourcePutioDatasetDatasetNameOK, error)

	PostSourceQingstorDatasetDatasetName(params *PostSourceQingstorDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceQingstorDatasetDatasetNameOK, error)

	PostSourceS3DatasetDatasetName(params *PostSourceS3DatasetDatasetNameParams, opts ...ClientOption) (*PostSourceS3DatasetDatasetNameOK, error)

	PostSourceSeafileDatasetDatasetName(params *PostSourceSeafileDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceSeafileDatasetDatasetNameOK, error)

	PostSourceSftpDatasetDatasetName(params *PostSourceSftpDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceSftpDatasetDatasetNameOK, error)

	PostSourceSharefileDatasetDatasetName(params *PostSourceSharefileDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceSharefileDatasetDatasetNameOK, error)

	PostSourceSiaDatasetDatasetName(params *PostSourceSiaDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceSiaDatasetDatasetNameOK, error)

	PostSourceSmbDatasetDatasetName(params *PostSourceSmbDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceSmbDatasetDatasetNameOK, error)

	PostSourceStorjDatasetDatasetName(params *PostSourceStorjDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceStorjDatasetDatasetNameOK, error)

	PostSourceSugarsyncDatasetDatasetName(params *PostSourceSugarsyncDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceSugarsyncDatasetDatasetNameOK, error)

	PostSourceSwiftDatasetDatasetName(params *PostSourceSwiftDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceSwiftDatasetDatasetNameOK, error)

	PostSourceUptoboxDatasetDatasetName(params *PostSourceUptoboxDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceUptoboxDatasetDatasetNameOK, error)

	PostSourceWebdavDatasetDatasetName(params *PostSourceWebdavDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceWebdavDatasetDatasetNameOK, error)

	PostSourceYandexDatasetDatasetName(params *PostSourceYandexDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceYandexDatasetDatasetNameOK, error)

	PostSourceZohoDatasetDatasetName(params *PostSourceZohoDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceZohoDatasetDatasetNameOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteSourceID removes a source
*/
func (a *Client) DeleteSourceID(params *DeleteSourceIDParams, opts ...ClientOption) (*DeleteSourceIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSourceIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteSourceID",
		Method:             "DELETE",
		PathPattern:        "/source/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSourceIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSourceIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteSourceID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetChunkID gets detail of a specific chunk
*/
func (a *Client) GetChunkID(params *GetChunkIDParams, opts ...ClientOption) (*GetChunkIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChunkIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetChunkID",
		Method:             "GET",
		PathPattern:        "/chunk/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetChunkIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChunkIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetChunkID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetItemID gets details about an item
*/
func (a *Client) GetItemID(params *GetItemIDParams, opts ...ClientOption) (*GetItemIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetItemIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetItemID",
		Method:             "GET",
		PathPattern:        "/item/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetItemIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetItemIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetItemID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSource lists all sources for a dataset
*/
func (a *Client) GetSource(params *GetSourceParams, opts ...ClientOption) (*GetSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSource",
		Method:             "GET",
		PathPattern:        "/source",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSourceIDChunks gets all dag details of a data source
*/
func (a *Client) GetSourceIDChunks(params *GetSourceIDChunksParams, opts ...ClientOption) (*GetSourceIDChunksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSourceIDChunksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSourceIDChunks",
		Method:             "GET",
		PathPattern:        "/source/{id}/chunks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSourceIDChunksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSourceIDChunksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSourceIDChunks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSourceIDItems gets all item details of a data source
*/
func (a *Client) GetSourceIDItems(params *GetSourceIDItemsParams, opts ...ClientOption) (*GetSourceIDItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSourceIDItemsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSourceIDItems",
		Method:             "GET",
		PathPattern:        "/source/{id}/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSourceIDItemsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSourceIDItemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSourceIDItems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSourceIDPath gets all item details inside a data source path
*/
func (a *Client) GetSourceIDPath(params *GetSourceIDPathParams, opts ...ClientOption) (*GetSourceIDPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSourceIDPathParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSourceIDPath",
		Method:             "GET",
		PathPattern:        "/source/{id}/path",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSourceIDPathReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSourceIDPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSourceIDPath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSourceIDSummary gets the data preparation summary of a data source
*/
func (a *Client) GetSourceIDSummary(params *GetSourceIDSummaryParams, opts ...ClientOption) (*GetSourceIDSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSourceIDSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSourceIDSummary",
		Method:             "GET",
		PathPattern:        "/source/{id}/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSourceIDSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSourceIDSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSourceIDSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchSourceID updates the config options of a source
*/
func (a *Client) PatchSourceID(params *PatchSourceIDParams, opts ...ClientOption) (*PatchSourceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSourceIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchSourceID",
		Method:             "PATCH",
		PathPattern:        "/source/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchSourceIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchSourceIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchSourceID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceAcdDatasetDatasetName adds acd source for a dataset
*/
func (a *Client) PostSourceAcdDatasetDatasetName(params *PostSourceAcdDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceAcdDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceAcdDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceAcdDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/acd/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceAcdDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceAcdDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceAcdDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceAzureblobDatasetDatasetName adds azureblob source for a dataset
*/
func (a *Client) PostSourceAzureblobDatasetDatasetName(params *PostSourceAzureblobDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceAzureblobDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceAzureblobDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceAzureblobDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/azureblob/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceAzureblobDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceAzureblobDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceAzureblobDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceB2DatasetDatasetName adds b2 source for a dataset
*/
func (a *Client) PostSourceB2DatasetDatasetName(params *PostSourceB2DatasetDatasetNameParams, opts ...ClientOption) (*PostSourceB2DatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceB2DatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceB2DatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/b2/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceB2DatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceB2DatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceB2DatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceBoxDatasetDatasetName adds box source for a dataset
*/
func (a *Client) PostSourceBoxDatasetDatasetName(params *PostSourceBoxDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceBoxDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceBoxDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceBoxDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/box/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceBoxDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceBoxDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceBoxDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceDriveDatasetDatasetName adds drive source for a dataset
*/
func (a *Client) PostSourceDriveDatasetDatasetName(params *PostSourceDriveDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceDriveDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceDriveDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceDriveDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/drive/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceDriveDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceDriveDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceDriveDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceDropboxDatasetDatasetName adds dropbox source for a dataset
*/
func (a *Client) PostSourceDropboxDatasetDatasetName(params *PostSourceDropboxDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceDropboxDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceDropboxDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceDropboxDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/dropbox/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceDropboxDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceDropboxDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceDropboxDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceFichierDatasetDatasetName adds fichier source for a dataset
*/
func (a *Client) PostSourceFichierDatasetDatasetName(params *PostSourceFichierDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceFichierDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceFichierDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceFichierDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/fichier/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceFichierDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceFichierDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceFichierDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceFilefabricDatasetDatasetName adds filefabric source for a dataset
*/
func (a *Client) PostSourceFilefabricDatasetDatasetName(params *PostSourceFilefabricDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceFilefabricDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceFilefabricDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceFilefabricDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/filefabric/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceFilefabricDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceFilefabricDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceFilefabricDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceFtpDatasetDatasetName adds ftp source for a dataset
*/
func (a *Client) PostSourceFtpDatasetDatasetName(params *PostSourceFtpDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceFtpDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceFtpDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceFtpDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/ftp/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceFtpDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceFtpDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceFtpDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceGcsDatasetDatasetName adds gcs source for a dataset
*/
func (a *Client) PostSourceGcsDatasetDatasetName(params *PostSourceGcsDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceGcsDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceGcsDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceGcsDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/gcs/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceGcsDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceGcsDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceGcsDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceGphotosDatasetDatasetName adds gphotos source for a dataset
*/
func (a *Client) PostSourceGphotosDatasetDatasetName(params *PostSourceGphotosDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceGphotosDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceGphotosDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceGphotosDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/gphotos/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceGphotosDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceGphotosDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceGphotosDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceHTTPDatasetDatasetName adds http source for a dataset
*/
func (a *Client) PostSourceHTTPDatasetDatasetName(params *PostSourceHTTPDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceHTTPDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceHTTPDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceHTTPDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/http/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceHTTPDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceHTTPDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceHTTPDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceHdfsDatasetDatasetName adds hdfs source for a dataset
*/
func (a *Client) PostSourceHdfsDatasetDatasetName(params *PostSourceHdfsDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceHdfsDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceHdfsDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceHdfsDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/hdfs/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceHdfsDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceHdfsDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceHdfsDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceHidriveDatasetDatasetName adds hidrive source for a dataset
*/
func (a *Client) PostSourceHidriveDatasetDatasetName(params *PostSourceHidriveDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceHidriveDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceHidriveDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceHidriveDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/hidrive/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceHidriveDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceHidriveDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceHidriveDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceIDCheck checks the connection of the data source by listing a path
*/
func (a *Client) PostSourceIDCheck(params *PostSourceIDCheckParams, opts ...ClientOption) (*PostSourceIDCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceIDCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceIDCheck",
		Method:             "POST",
		PathPattern:        "/source/{id}/check",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceIDCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceIDCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceIDCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceIDDaggen marks a source as ready for d a g generation
*/
func (a *Client) PostSourceIDDaggen(params *PostSourceIDDaggenParams, opts ...ClientOption) (*PostSourceIDDaggenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceIDDaggenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceIDDaggen",
		Method:             "POST",
		PathPattern:        "/source/{id}/daggen",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceIDDaggenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceIDDaggenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceIDDaggen: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceIDPush pushes an item to be queued

Tells Singularity that something is ready to be grabbed for data preparation
*/
func (a *Client) PostSourceIDPush(params *PostSourceIDPushParams, opts ...ClientOption) (*PostSourceIDPushCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceIDPushParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceIDPush",
		Method:             "POST",
		PathPattern:        "/source/{id}/push",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceIDPushReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceIDPushCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceIDPush: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceIDRepack triggers a repack of a chunk or all errored chunks of a data source
*/
func (a *Client) PostSourceIDRepack(params *PostSourceIDRepackParams, opts ...ClientOption) (*PostSourceIDRepackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceIDRepackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceIDRepack",
		Method:             "POST",
		PathPattern:        "/source/{id}/repack",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceIDRepackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceIDRepackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceIDRepack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceIDRescan triggers a rescan of a data source
*/
func (a *Client) PostSourceIDRescan(params *PostSourceIDRescanParams, opts ...ClientOption) (*PostSourceIDRescanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceIDRescanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceIDRescan",
		Method:             "POST",
		PathPattern:        "/source/{id}/rescan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceIDRescanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceIDRescanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceIDRescan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceInternetarchiveDatasetDatasetName adds internetarchive source for a dataset
*/
func (a *Client) PostSourceInternetarchiveDatasetDatasetName(params *PostSourceInternetarchiveDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceInternetarchiveDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceInternetarchiveDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceInternetarchiveDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/internetarchive/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceInternetarchiveDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceInternetarchiveDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceInternetarchiveDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceJottacloudDatasetDatasetName adds jottacloud source for a dataset
*/
func (a *Client) PostSourceJottacloudDatasetDatasetName(params *PostSourceJottacloudDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceJottacloudDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceJottacloudDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceJottacloudDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/jottacloud/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceJottacloudDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceJottacloudDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceJottacloudDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceKoofrDatasetDatasetName adds koofr source for a dataset
*/
func (a *Client) PostSourceKoofrDatasetDatasetName(params *PostSourceKoofrDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceKoofrDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceKoofrDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceKoofrDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/koofr/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceKoofrDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceKoofrDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceKoofrDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceLocalDatasetDatasetName adds local source for a dataset
*/
func (a *Client) PostSourceLocalDatasetDatasetName(params *PostSourceLocalDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceLocalDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceLocalDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceLocalDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/local/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceLocalDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceLocalDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceLocalDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceMailruDatasetDatasetName adds mailru source for a dataset
*/
func (a *Client) PostSourceMailruDatasetDatasetName(params *PostSourceMailruDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceMailruDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceMailruDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceMailruDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/mailru/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceMailruDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceMailruDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceMailruDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceMegaDatasetDatasetName adds mega source for a dataset
*/
func (a *Client) PostSourceMegaDatasetDatasetName(params *PostSourceMegaDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceMegaDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceMegaDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceMegaDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/mega/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceMegaDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceMegaDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceMegaDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceNetstorageDatasetDatasetName adds netstorage source for a dataset
*/
func (a *Client) PostSourceNetstorageDatasetDatasetName(params *PostSourceNetstorageDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceNetstorageDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceNetstorageDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceNetstorageDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/netstorage/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceNetstorageDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceNetstorageDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceNetstorageDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceOnedriveDatasetDatasetName adds onedrive source for a dataset
*/
func (a *Client) PostSourceOnedriveDatasetDatasetName(params *PostSourceOnedriveDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceOnedriveDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceOnedriveDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceOnedriveDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/onedrive/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceOnedriveDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceOnedriveDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceOnedriveDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceOosDatasetDatasetName adds oos source for a dataset
*/
func (a *Client) PostSourceOosDatasetDatasetName(params *PostSourceOosDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceOosDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceOosDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceOosDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/oos/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceOosDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceOosDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceOosDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceOpendriveDatasetDatasetName adds opendrive source for a dataset
*/
func (a *Client) PostSourceOpendriveDatasetDatasetName(params *PostSourceOpendriveDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceOpendriveDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceOpendriveDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceOpendriveDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/opendrive/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceOpendriveDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceOpendriveDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceOpendriveDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourcePcloudDatasetDatasetName adds pcloud source for a dataset
*/
func (a *Client) PostSourcePcloudDatasetDatasetName(params *PostSourcePcloudDatasetDatasetNameParams, opts ...ClientOption) (*PostSourcePcloudDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourcePcloudDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourcePcloudDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/pcloud/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourcePcloudDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourcePcloudDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourcePcloudDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourcePremiumizemeDatasetDatasetName adds premiumizeme source for a dataset
*/
func (a *Client) PostSourcePremiumizemeDatasetDatasetName(params *PostSourcePremiumizemeDatasetDatasetNameParams, opts ...ClientOption) (*PostSourcePremiumizemeDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourcePremiumizemeDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourcePremiumizemeDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/premiumizeme/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourcePremiumizemeDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourcePremiumizemeDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourcePremiumizemeDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourcePutioDatasetDatasetName adds putio source for a dataset
*/
func (a *Client) PostSourcePutioDatasetDatasetName(params *PostSourcePutioDatasetDatasetNameParams, opts ...ClientOption) (*PostSourcePutioDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourcePutioDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourcePutioDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/putio/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourcePutioDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourcePutioDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourcePutioDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceQingstorDatasetDatasetName adds qingstor source for a dataset
*/
func (a *Client) PostSourceQingstorDatasetDatasetName(params *PostSourceQingstorDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceQingstorDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceQingstorDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceQingstorDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/qingstor/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceQingstorDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceQingstorDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceQingstorDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceS3DatasetDatasetName adds s3 source for a dataset
*/
func (a *Client) PostSourceS3DatasetDatasetName(params *PostSourceS3DatasetDatasetNameParams, opts ...ClientOption) (*PostSourceS3DatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceS3DatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceS3DatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/s3/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceS3DatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceS3DatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceS3DatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceSeafileDatasetDatasetName adds seafile source for a dataset
*/
func (a *Client) PostSourceSeafileDatasetDatasetName(params *PostSourceSeafileDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceSeafileDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceSeafileDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceSeafileDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/seafile/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceSeafileDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceSeafileDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceSeafileDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceSftpDatasetDatasetName adds sftp source for a dataset
*/
func (a *Client) PostSourceSftpDatasetDatasetName(params *PostSourceSftpDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceSftpDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceSftpDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceSftpDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/sftp/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceSftpDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceSftpDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceSftpDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceSharefileDatasetDatasetName adds sharefile source for a dataset
*/
func (a *Client) PostSourceSharefileDatasetDatasetName(params *PostSourceSharefileDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceSharefileDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceSharefileDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceSharefileDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/sharefile/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceSharefileDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceSharefileDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceSharefileDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceSiaDatasetDatasetName adds sia source for a dataset
*/
func (a *Client) PostSourceSiaDatasetDatasetName(params *PostSourceSiaDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceSiaDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceSiaDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceSiaDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/sia/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceSiaDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceSiaDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceSiaDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceSmbDatasetDatasetName adds smb source for a dataset
*/
func (a *Client) PostSourceSmbDatasetDatasetName(params *PostSourceSmbDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceSmbDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceSmbDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceSmbDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/smb/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceSmbDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceSmbDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceSmbDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceStorjDatasetDatasetName adds storj source for a dataset
*/
func (a *Client) PostSourceStorjDatasetDatasetName(params *PostSourceStorjDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceStorjDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceStorjDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceStorjDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/storj/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceStorjDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceStorjDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceStorjDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceSugarsyncDatasetDatasetName adds sugarsync source for a dataset
*/
func (a *Client) PostSourceSugarsyncDatasetDatasetName(params *PostSourceSugarsyncDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceSugarsyncDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceSugarsyncDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceSugarsyncDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/sugarsync/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceSugarsyncDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceSugarsyncDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceSugarsyncDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceSwiftDatasetDatasetName adds swift source for a dataset
*/
func (a *Client) PostSourceSwiftDatasetDatasetName(params *PostSourceSwiftDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceSwiftDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceSwiftDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceSwiftDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/swift/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceSwiftDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceSwiftDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceSwiftDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceUptoboxDatasetDatasetName adds uptobox source for a dataset
*/
func (a *Client) PostSourceUptoboxDatasetDatasetName(params *PostSourceUptoboxDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceUptoboxDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceUptoboxDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceUptoboxDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/uptobox/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceUptoboxDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceUptoboxDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceUptoboxDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceWebdavDatasetDatasetName adds webdav source for a dataset
*/
func (a *Client) PostSourceWebdavDatasetDatasetName(params *PostSourceWebdavDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceWebdavDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceWebdavDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceWebdavDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/webdav/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceWebdavDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceWebdavDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceWebdavDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceYandexDatasetDatasetName adds yandex source for a dataset
*/
func (a *Client) PostSourceYandexDatasetDatasetName(params *PostSourceYandexDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceYandexDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceYandexDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceYandexDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/yandex/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceYandexDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceYandexDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceYandexDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSourceZohoDatasetDatasetName adds zoho source for a dataset
*/
func (a *Client) PostSourceZohoDatasetDatasetName(params *PostSourceZohoDatasetDatasetNameParams, opts ...ClientOption) (*PostSourceZohoDatasetDatasetNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSourceZohoDatasetDatasetNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSourceZohoDatasetDatasetName",
		Method:             "POST",
		PathPattern:        "/source/zoho/dataset/{datasetName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSourceZohoDatasetDatasetNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSourceZohoDatasetDatasetNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSourceZohoDatasetDatasetName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
