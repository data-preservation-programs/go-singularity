// Code generated by go-swagger; DO NOT EDIT.

package preparation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/data-preservation-programs/singularity/client/swagger/models"
)

// GetPreparationIDSourceNameExplorePathReader is a Reader for the GetPreparationIDSourceNameExplorePath structure.
type GetPreparationIDSourceNameExplorePathReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPreparationIDSourceNameExplorePathReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPreparationIDSourceNameExplorePathOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPreparationIDSourceNameExplorePathBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetPreparationIDSourceNameExplorePathInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /preparation/{id}/source/{name}/explore/{path}] GetPreparationIDSourceNameExplorePath", response, response.Code())
	}
}

// NewGetPreparationIDSourceNameExplorePathOK creates a GetPreparationIDSourceNameExplorePathOK with default headers values
func NewGetPreparationIDSourceNameExplorePathOK() *GetPreparationIDSourceNameExplorePathOK {
	return &GetPreparationIDSourceNameExplorePathOK{}
}

/*
GetPreparationIDSourceNameExplorePathOK describes a response with status code 200, with default header values.

OK
*/
type GetPreparationIDSourceNameExplorePathOK struct {
	Payload *models.DataprepExploreResult
}

// IsSuccess returns true when this get preparation Id source name explore path o k response has a 2xx status code
func (o *GetPreparationIDSourceNameExplorePathOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get preparation Id source name explore path o k response has a 3xx status code
func (o *GetPreparationIDSourceNameExplorePathOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get preparation Id source name explore path o k response has a 4xx status code
func (o *GetPreparationIDSourceNameExplorePathOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get preparation Id source name explore path o k response has a 5xx status code
func (o *GetPreparationIDSourceNameExplorePathOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get preparation Id source name explore path o k response a status code equal to that given
func (o *GetPreparationIDSourceNameExplorePathOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get preparation Id source name explore path o k response
func (o *GetPreparationIDSourceNameExplorePathOK) Code() int {
	return 200
}

func (o *GetPreparationIDSourceNameExplorePathOK) Error() string {
	return fmt.Sprintf("[GET /preparation/{id}/source/{name}/explore/{path}][%d] getPreparationIdSourceNameExplorePathOK  %+v", 200, o.Payload)
}

func (o *GetPreparationIDSourceNameExplorePathOK) String() string {
	return fmt.Sprintf("[GET /preparation/{id}/source/{name}/explore/{path}][%d] getPreparationIdSourceNameExplorePathOK  %+v", 200, o.Payload)
}

func (o *GetPreparationIDSourceNameExplorePathOK) GetPayload() *models.DataprepExploreResult {
	return o.Payload
}

func (o *GetPreparationIDSourceNameExplorePathOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DataprepExploreResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPreparationIDSourceNameExplorePathBadRequest creates a GetPreparationIDSourceNameExplorePathBadRequest with default headers values
func NewGetPreparationIDSourceNameExplorePathBadRequest() *GetPreparationIDSourceNameExplorePathBadRequest {
	return &GetPreparationIDSourceNameExplorePathBadRequest{}
}

/*
GetPreparationIDSourceNameExplorePathBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetPreparationIDSourceNameExplorePathBadRequest struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this get preparation Id source name explore path bad request response has a 2xx status code
func (o *GetPreparationIDSourceNameExplorePathBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get preparation Id source name explore path bad request response has a 3xx status code
func (o *GetPreparationIDSourceNameExplorePathBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get preparation Id source name explore path bad request response has a 4xx status code
func (o *GetPreparationIDSourceNameExplorePathBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get preparation Id source name explore path bad request response has a 5xx status code
func (o *GetPreparationIDSourceNameExplorePathBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get preparation Id source name explore path bad request response a status code equal to that given
func (o *GetPreparationIDSourceNameExplorePathBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get preparation Id source name explore path bad request response
func (o *GetPreparationIDSourceNameExplorePathBadRequest) Code() int {
	return 400
}

func (o *GetPreparationIDSourceNameExplorePathBadRequest) Error() string {
	return fmt.Sprintf("[GET /preparation/{id}/source/{name}/explore/{path}][%d] getPreparationIdSourceNameExplorePathBadRequest  %+v", 400, o.Payload)
}

func (o *GetPreparationIDSourceNameExplorePathBadRequest) String() string {
	return fmt.Sprintf("[GET /preparation/{id}/source/{name}/explore/{path}][%d] getPreparationIdSourceNameExplorePathBadRequest  %+v", 400, o.Payload)
}

func (o *GetPreparationIDSourceNameExplorePathBadRequest) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *GetPreparationIDSourceNameExplorePathBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPreparationIDSourceNameExplorePathInternalServerError creates a GetPreparationIDSourceNameExplorePathInternalServerError with default headers values
func NewGetPreparationIDSourceNameExplorePathInternalServerError() *GetPreparationIDSourceNameExplorePathInternalServerError {
	return &GetPreparationIDSourceNameExplorePathInternalServerError{}
}

/*
GetPreparationIDSourceNameExplorePathInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetPreparationIDSourceNameExplorePathInternalServerError struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this get preparation Id source name explore path internal server error response has a 2xx status code
func (o *GetPreparationIDSourceNameExplorePathInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get preparation Id source name explore path internal server error response has a 3xx status code
func (o *GetPreparationIDSourceNameExplorePathInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get preparation Id source name explore path internal server error response has a 4xx status code
func (o *GetPreparationIDSourceNameExplorePathInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get preparation Id source name explore path internal server error response has a 5xx status code
func (o *GetPreparationIDSourceNameExplorePathInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get preparation Id source name explore path internal server error response a status code equal to that given
func (o *GetPreparationIDSourceNameExplorePathInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get preparation Id source name explore path internal server error response
func (o *GetPreparationIDSourceNameExplorePathInternalServerError) Code() int {
	return 500
}

func (o *GetPreparationIDSourceNameExplorePathInternalServerError) Error() string {
	return fmt.Sprintf("[GET /preparation/{id}/source/{name}/explore/{path}][%d] getPreparationIdSourceNameExplorePathInternalServerError  %+v", 500, o.Payload)
}

func (o *GetPreparationIDSourceNameExplorePathInternalServerError) String() string {
	return fmt.Sprintf("[GET /preparation/{id}/source/{name}/explore/{path}][%d] getPreparationIdSourceNameExplorePathInternalServerError  %+v", 500, o.Payload)
}

func (o *GetPreparationIDSourceNameExplorePathInternalServerError) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *GetPreparationIDSourceNameExplorePathInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
