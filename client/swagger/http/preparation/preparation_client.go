// Code generated by go-swagger; DO NOT EDIT.

package preparation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new preparation API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for preparation API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeletePreparationIDOutputName(params *DeletePreparationIDOutputNameParams, opts ...ClientOption) (*DeletePreparationIDOutputNameOK, error)

	GetPreparation(params *GetPreparationParams, opts ...ClientOption) (*GetPreparationOK, error)

	GetPreparationID(params *GetPreparationIDParams, opts ...ClientOption) (*GetPreparationIDOK, error)

	GetPreparationIDSourceNameExplorePath(params *GetPreparationIDSourceNameExplorePathParams, opts ...ClientOption) (*GetPreparationIDSourceNameExplorePathOK, error)

	PostPreparation(params *PostPreparationParams, opts ...ClientOption) (*PostPreparationOK, error)

	PostPreparationIDOutputName(params *PostPreparationIDOutputNameParams, opts ...ClientOption) (*PostPreparationIDOutputNameOK, error)

	PostPreparationIDSourceName(params *PostPreparationIDSourceNameParams, opts ...ClientOption) (*PostPreparationIDSourceNameOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeletePreparationIDOutputName detaches an output storage from a preparation
*/
func (a *Client) DeletePreparationIDOutputName(params *DeletePreparationIDOutputNameParams, opts ...ClientOption) (*DeletePreparationIDOutputNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePreparationIDOutputNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeletePreparationIDOutputName",
		Method:             "DELETE",
		PathPattern:        "/preparation/{id}/output/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePreparationIDOutputNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePreparationIDOutputNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeletePreparationIDOutputName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPreparation lists all preparations
*/
func (a *Client) GetPreparation(params *GetPreparationParams, opts ...ClientOption) (*GetPreparationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPreparationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPreparation",
		Method:             "GET",
		PathPattern:        "/preparation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPreparationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPreparationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPreparation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPreparationID gets the status of a preparation
*/
func (a *Client) GetPreparationID(params *GetPreparationIDParams, opts ...ClientOption) (*GetPreparationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPreparationIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPreparationID",
		Method:             "GET",
		PathPattern:        "/preparation/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPreparationIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPreparationIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPreparationID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPreparationIDSourceNameExplorePath explores a directory in a prepared source storage
*/
func (a *Client) GetPreparationIDSourceNameExplorePath(params *GetPreparationIDSourceNameExplorePathParams, opts ...ClientOption) (*GetPreparationIDSourceNameExplorePathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPreparationIDSourceNameExplorePathParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPreparationIDSourceNameExplorePath",
		Method:             "GET",
		PathPattern:        "/preparation/{id}/source/{name}/explore/{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPreparationIDSourceNameExplorePathReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPreparationIDSourceNameExplorePathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPreparationIDSourceNameExplorePath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostPreparation creates a new preparation
*/
func (a *Client) PostPreparation(params *PostPreparationParams, opts ...ClientOption) (*PostPreparationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPreparationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostPreparation",
		Method:             "POST",
		PathPattern:        "/preparation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPreparationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPreparationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPreparation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostPreparationIDOutputName attaches an output storage with a preparation
*/
func (a *Client) PostPreparationIDOutputName(params *PostPreparationIDOutputNameParams, opts ...ClientOption) (*PostPreparationIDOutputNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPreparationIDOutputNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostPreparationIDOutputName",
		Method:             "POST",
		PathPattern:        "/preparation/{id}/output/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPreparationIDOutputNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPreparationIDOutputNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPreparationIDOutputName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostPreparationIDSourceName attaches a source storage with a preparation
*/
func (a *Client) PostPreparationIDSourceName(params *PostPreparationIDSourceNameParams, opts ...ClientOption) (*PostPreparationIDSourceNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPreparationIDSourceNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostPreparationIDSourceName",
		Method:             "POST",
		PathPattern:        "/preparation/{id}/source/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPreparationIDSourceNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPreparationIDSourceNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPreparationIDSourceName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
