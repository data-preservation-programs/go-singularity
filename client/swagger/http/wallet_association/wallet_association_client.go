// Code generated by go-swagger; DO NOT EDIT.

package wallet_association

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new wallet association API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for wallet association API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeletePreparationIDWalletWallet(params *DeletePreparationIDWalletWalletParams, opts ...ClientOption) (*DeletePreparationIDWalletWalletOK, error)

	PostPreparationIDWallet(params *PostPreparationIDWalletParams, opts ...ClientOption) (*PostPreparationIDWalletOK, error)

	PostPreparationIDWalletWallet(params *PostPreparationIDWalletWalletParams, opts ...ClientOption) (*PostPreparationIDWalletWalletOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeletePreparationIDWalletWallet detaches a new wallet from a preparation
*/
func (a *Client) DeletePreparationIDWalletWallet(params *DeletePreparationIDWalletWalletParams, opts ...ClientOption) (*DeletePreparationIDWalletWalletOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePreparationIDWalletWalletParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeletePreparationIDWalletWallet",
		Method:             "DELETE",
		PathPattern:        "/preparation/{id}/wallet/{wallet}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePreparationIDWalletWalletReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePreparationIDWalletWalletOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeletePreparationIDWalletWallet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostPreparationIDWallet lists all wallets of a preparation
*/
func (a *Client) PostPreparationIDWallet(params *PostPreparationIDWalletParams, opts ...ClientOption) (*PostPreparationIDWalletOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPreparationIDWalletParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostPreparationIDWallet",
		Method:             "POST",
		PathPattern:        "/preparation/{id}/wallet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPreparationIDWalletReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPreparationIDWalletOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPreparationIDWallet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostPreparationIDWalletWallet attaches a new wallet with a preparation
*/
func (a *Client) PostPreparationIDWalletWallet(params *PostPreparationIDWalletWalletParams, opts ...ClientOption) (*PostPreparationIDWalletWalletOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPreparationIDWalletWalletParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostPreparationIDWalletWallet",
		Method:             "POST",
		PathPattern:        "/preparation/{id}/wallet/{wallet}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPreparationIDWalletWalletReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPreparationIDWalletWalletOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPreparationIDWalletWallet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
