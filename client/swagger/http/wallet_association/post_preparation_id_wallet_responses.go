// Code generated by go-swagger; DO NOT EDIT.

package wallet_association

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/data-preservation-programs/singularity/client/swagger/models"
)

// PostPreparationIDWalletReader is a Reader for the PostPreparationIDWallet structure.
type PostPreparationIDWalletReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostPreparationIDWalletReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostPreparationIDWalletOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostPreparationIDWalletBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostPreparationIDWalletInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /preparation/{id}/wallet] PostPreparationIDWallet", response, response.Code())
	}
}

// NewPostPreparationIDWalletOK creates a PostPreparationIDWalletOK with default headers values
func NewPostPreparationIDWalletOK() *PostPreparationIDWalletOK {
	return &PostPreparationIDWalletOK{}
}

/*
PostPreparationIDWalletOK describes a response with status code 200, with default header values.

OK
*/
type PostPreparationIDWalletOK struct {
	Payload *models.ModelWallet
}

// IsSuccess returns true when this post preparation Id wallet o k response has a 2xx status code
func (o *PostPreparationIDWalletOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post preparation Id wallet o k response has a 3xx status code
func (o *PostPreparationIDWalletOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post preparation Id wallet o k response has a 4xx status code
func (o *PostPreparationIDWalletOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post preparation Id wallet o k response has a 5xx status code
func (o *PostPreparationIDWalletOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post preparation Id wallet o k response a status code equal to that given
func (o *PostPreparationIDWalletOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post preparation Id wallet o k response
func (o *PostPreparationIDWalletOK) Code() int {
	return 200
}

func (o *PostPreparationIDWalletOK) Error() string {
	return fmt.Sprintf("[POST /preparation/{id}/wallet][%d] postPreparationIdWalletOK  %+v", 200, o.Payload)
}

func (o *PostPreparationIDWalletOK) String() string {
	return fmt.Sprintf("[POST /preparation/{id}/wallet][%d] postPreparationIdWalletOK  %+v", 200, o.Payload)
}

func (o *PostPreparationIDWalletOK) GetPayload() *models.ModelWallet {
	return o.Payload
}

func (o *PostPreparationIDWalletOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelWallet)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostPreparationIDWalletBadRequest creates a PostPreparationIDWalletBadRequest with default headers values
func NewPostPreparationIDWalletBadRequest() *PostPreparationIDWalletBadRequest {
	return &PostPreparationIDWalletBadRequest{}
}

/*
PostPreparationIDWalletBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostPreparationIDWalletBadRequest struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this post preparation Id wallet bad request response has a 2xx status code
func (o *PostPreparationIDWalletBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post preparation Id wallet bad request response has a 3xx status code
func (o *PostPreparationIDWalletBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post preparation Id wallet bad request response has a 4xx status code
func (o *PostPreparationIDWalletBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post preparation Id wallet bad request response has a 5xx status code
func (o *PostPreparationIDWalletBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post preparation Id wallet bad request response a status code equal to that given
func (o *PostPreparationIDWalletBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post preparation Id wallet bad request response
func (o *PostPreparationIDWalletBadRequest) Code() int {
	return 400
}

func (o *PostPreparationIDWalletBadRequest) Error() string {
	return fmt.Sprintf("[POST /preparation/{id}/wallet][%d] postPreparationIdWalletBadRequest  %+v", 400, o.Payload)
}

func (o *PostPreparationIDWalletBadRequest) String() string {
	return fmt.Sprintf("[POST /preparation/{id}/wallet][%d] postPreparationIdWalletBadRequest  %+v", 400, o.Payload)
}

func (o *PostPreparationIDWalletBadRequest) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PostPreparationIDWalletBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostPreparationIDWalletInternalServerError creates a PostPreparationIDWalletInternalServerError with default headers values
func NewPostPreparationIDWalletInternalServerError() *PostPreparationIDWalletInternalServerError {
	return &PostPreparationIDWalletInternalServerError{}
}

/*
PostPreparationIDWalletInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostPreparationIDWalletInternalServerError struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this post preparation Id wallet internal server error response has a 2xx status code
func (o *PostPreparationIDWalletInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post preparation Id wallet internal server error response has a 3xx status code
func (o *PostPreparationIDWalletInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post preparation Id wallet internal server error response has a 4xx status code
func (o *PostPreparationIDWalletInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post preparation Id wallet internal server error response has a 5xx status code
func (o *PostPreparationIDWalletInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post preparation Id wallet internal server error response a status code equal to that given
func (o *PostPreparationIDWalletInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post preparation Id wallet internal server error response
func (o *PostPreparationIDWalletInternalServerError) Code() int {
	return 500
}

func (o *PostPreparationIDWalletInternalServerError) Error() string {
	return fmt.Sprintf("[POST /preparation/{id}/wallet][%d] postPreparationIdWalletInternalServerError  %+v", 500, o.Payload)
}

func (o *PostPreparationIDWalletInternalServerError) String() string {
	return fmt.Sprintf("[POST /preparation/{id}/wallet][%d] postPreparationIdWalletInternalServerError  %+v", 500, o.Payload)
}

func (o *PostPreparationIDWalletInternalServerError) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PostPreparationIDWalletInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
