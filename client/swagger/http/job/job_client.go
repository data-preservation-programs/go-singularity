// Code generated by go-swagger; DO NOT EDIT.

package job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new job API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for job API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	PostJobIDPack(params *PostJobIDPackParams, opts ...ClientOption) (*PostJobIDPackOK, error)

	PostPreparationIDSourceNameFinalize(params *PostPreparationIDSourceNameFinalizeParams, opts ...ClientOption) (*PostPreparationIDSourceNameFinalizeCreated, error)

	PostPreparationIDSourceNamePauseDaggen(params *PostPreparationIDSourceNamePauseDaggenParams, opts ...ClientOption) (*PostPreparationIDSourceNamePauseDaggenOK, error)

	PostPreparationIDSourceNamePausePack(params *PostPreparationIDSourceNamePausePackParams, opts ...ClientOption) (*PostPreparationIDSourceNamePausePackOK, error)

	PostPreparationIDSourceNamePausePackJobID(params *PostPreparationIDSourceNamePausePackJobIDParams, opts ...ClientOption) (*PostPreparationIDSourceNamePausePackJobIDOK, error)

	PostPreparationIDSourceNamePauseScan(params *PostPreparationIDSourceNamePauseScanParams, opts ...ClientOption) (*PostPreparationIDSourceNamePauseScanOK, error)

	PostPreparationIDSourceNameStartDaggen(params *PostPreparationIDSourceNameStartDaggenParams, opts ...ClientOption) (*PostPreparationIDSourceNameStartDaggenOK, error)

	PostPreparationIDSourceNameStartPack(params *PostPreparationIDSourceNameStartPackParams, opts ...ClientOption) (*PostPreparationIDSourceNameStartPackOK, error)

	PostPreparationIDSourceNameStartPackJobID(params *PostPreparationIDSourceNameStartPackJobIDParams, opts ...ClientOption) (*PostPreparationIDSourceNameStartPackJobIDOK, error)

	PostPreparationIDSourceNameStartScan(params *PostPreparationIDSourceNameStartScanParams, opts ...ClientOption) (*PostPreparationIDSourceNameStartScanOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
PostJobIDPack packs a pack job into car files
*/
func (a *Client) PostJobIDPack(params *PostJobIDPackParams, opts ...ClientOption) (*PostJobIDPackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostJobIDPackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostJobIDPack",
		Method:             "POST",
		PathPattern:        "/job/{id}/pack",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostJobIDPackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostJobIDPackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostJobIDPack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostPreparationIDSourceNameFinalize prepares to pack a data source
*/
func (a *Client) PostPreparationIDSourceNameFinalize(params *PostPreparationIDSourceNameFinalizeParams, opts ...ClientOption) (*PostPreparationIDSourceNameFinalizeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPreparationIDSourceNameFinalizeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostPreparationIDSourceNameFinalize",
		Method:             "POST",
		PathPattern:        "/preparation/{id}/source/{name}/finalize",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPreparationIDSourceNameFinalizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPreparationIDSourceNameFinalizeCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPreparationIDSourceNameFinalize: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostPreparationIDSourceNamePauseDaggen pauses an ongoing d a g generation job
*/
func (a *Client) PostPreparationIDSourceNamePauseDaggen(params *PostPreparationIDSourceNamePauseDaggenParams, opts ...ClientOption) (*PostPreparationIDSourceNamePauseDaggenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPreparationIDSourceNamePauseDaggenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostPreparationIDSourceNamePauseDaggen",
		Method:             "POST",
		PathPattern:        "/preparation/{id}/source/{name}/pause-daggen",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPreparationIDSourceNamePauseDaggenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPreparationIDSourceNamePauseDaggenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPreparationIDSourceNamePauseDaggen: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostPreparationIDSourceNamePausePack pauses all packing job
*/
func (a *Client) PostPreparationIDSourceNamePausePack(params *PostPreparationIDSourceNamePausePackParams, opts ...ClientOption) (*PostPreparationIDSourceNamePausePackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPreparationIDSourceNamePausePackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostPreparationIDSourceNamePausePack",
		Method:             "POST",
		PathPattern:        "/preparation/{id}/source/{name}/pause-pack",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPreparationIDSourceNamePausePackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPreparationIDSourceNamePausePackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPreparationIDSourceNamePausePack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostPreparationIDSourceNamePausePackJobID pauses a specific packing job
*/
func (a *Client) PostPreparationIDSourceNamePausePackJobID(params *PostPreparationIDSourceNamePausePackJobIDParams, opts ...ClientOption) (*PostPreparationIDSourceNamePausePackJobIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPreparationIDSourceNamePausePackJobIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostPreparationIDSourceNamePausePackJobID",
		Method:             "POST",
		PathPattern:        "/preparation/{id}/source/{name}/pause-pack/{job_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPreparationIDSourceNamePausePackJobIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPreparationIDSourceNamePausePackJobIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPreparationIDSourceNamePausePackJobID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostPreparationIDSourceNamePauseScan pauses an ongoing scanning job
*/
func (a *Client) PostPreparationIDSourceNamePauseScan(params *PostPreparationIDSourceNamePauseScanParams, opts ...ClientOption) (*PostPreparationIDSourceNamePauseScanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPreparationIDSourceNamePauseScanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostPreparationIDSourceNamePauseScan",
		Method:             "POST",
		PathPattern:        "/preparation/{id}/source/{name}/pause-scan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPreparationIDSourceNamePauseScanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPreparationIDSourceNamePauseScanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPreparationIDSourceNamePauseScan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostPreparationIDSourceNameStartDaggen starts a new d a g generation job
*/
func (a *Client) PostPreparationIDSourceNameStartDaggen(params *PostPreparationIDSourceNameStartDaggenParams, opts ...ClientOption) (*PostPreparationIDSourceNameStartDaggenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPreparationIDSourceNameStartDaggenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostPreparationIDSourceNameStartDaggen",
		Method:             "POST",
		PathPattern:        "/preparation/{id}/source/{name}/start-daggen",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPreparationIDSourceNameStartDaggenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPreparationIDSourceNameStartDaggenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPreparationIDSourceNameStartDaggen: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostPreparationIDSourceNameStartPack starts or restart all packing job
*/
func (a *Client) PostPreparationIDSourceNameStartPack(params *PostPreparationIDSourceNameStartPackParams, opts ...ClientOption) (*PostPreparationIDSourceNameStartPackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPreparationIDSourceNameStartPackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostPreparationIDSourceNameStartPack",
		Method:             "POST",
		PathPattern:        "/preparation/{id}/source/{name}/start-pack",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPreparationIDSourceNameStartPackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPreparationIDSourceNameStartPackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPreparationIDSourceNameStartPack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostPreparationIDSourceNameStartPackJobID starts or restart a specific packing job
*/
func (a *Client) PostPreparationIDSourceNameStartPackJobID(params *PostPreparationIDSourceNameStartPackJobIDParams, opts ...ClientOption) (*PostPreparationIDSourceNameStartPackJobIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPreparationIDSourceNameStartPackJobIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostPreparationIDSourceNameStartPackJobID",
		Method:             "POST",
		PathPattern:        "/preparation/{id}/source/{name}/start-pack/{job_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPreparationIDSourceNameStartPackJobIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPreparationIDSourceNameStartPackJobIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPreparationIDSourceNameStartPackJobID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostPreparationIDSourceNameStartScan starts a new scanning job
*/
func (a *Client) PostPreparationIDSourceNameStartScan(params *PostPreparationIDSourceNameStartScanParams, opts ...ClientOption) (*PostPreparationIDSourceNameStartScanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPreparationIDSourceNameStartScanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostPreparationIDSourceNameStartScan",
		Method:             "POST",
		PathPattern:        "/preparation/{id}/source/{name}/start-scan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPreparationIDSourceNameStartScanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPreparationIDSourceNameStartScanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPreparationIDSourceNameStartScan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
