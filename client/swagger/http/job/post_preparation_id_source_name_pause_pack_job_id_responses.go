// Code generated by go-swagger; DO NOT EDIT.

package job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/data-preservation-programs/singularity/client/swagger/models"
)

// PostPreparationIDSourceNamePausePackJobIDReader is a Reader for the PostPreparationIDSourceNamePausePackJobID structure.
type PostPreparationIDSourceNamePausePackJobIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostPreparationIDSourceNamePausePackJobIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostPreparationIDSourceNamePausePackJobIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostPreparationIDSourceNamePausePackJobIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostPreparationIDSourceNamePausePackJobIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /preparation/{id}/source/{name}/pause-pack/{job_id}] PostPreparationIDSourceNamePausePackJobID", response, response.Code())
	}
}

// NewPostPreparationIDSourceNamePausePackJobIDOK creates a PostPreparationIDSourceNamePausePackJobIDOK with default headers values
func NewPostPreparationIDSourceNamePausePackJobIDOK() *PostPreparationIDSourceNamePausePackJobIDOK {
	return &PostPreparationIDSourceNamePausePackJobIDOK{}
}

/*
PostPreparationIDSourceNamePausePackJobIDOK describes a response with status code 200, with default header values.

OK
*/
type PostPreparationIDSourceNamePausePackJobIDOK struct {
	Payload *models.ModelJob
}

// IsSuccess returns true when this post preparation Id source name pause pack job Id o k response has a 2xx status code
func (o *PostPreparationIDSourceNamePausePackJobIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post preparation Id source name pause pack job Id o k response has a 3xx status code
func (o *PostPreparationIDSourceNamePausePackJobIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post preparation Id source name pause pack job Id o k response has a 4xx status code
func (o *PostPreparationIDSourceNamePausePackJobIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post preparation Id source name pause pack job Id o k response has a 5xx status code
func (o *PostPreparationIDSourceNamePausePackJobIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post preparation Id source name pause pack job Id o k response a status code equal to that given
func (o *PostPreparationIDSourceNamePausePackJobIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post preparation Id source name pause pack job Id o k response
func (o *PostPreparationIDSourceNamePausePackJobIDOK) Code() int {
	return 200
}

func (o *PostPreparationIDSourceNamePausePackJobIDOK) Error() string {
	return fmt.Sprintf("[POST /preparation/{id}/source/{name}/pause-pack/{job_id}][%d] postPreparationIdSourceNamePausePackJobIdOK  %+v", 200, o.Payload)
}

func (o *PostPreparationIDSourceNamePausePackJobIDOK) String() string {
	return fmt.Sprintf("[POST /preparation/{id}/source/{name}/pause-pack/{job_id}][%d] postPreparationIdSourceNamePausePackJobIdOK  %+v", 200, o.Payload)
}

func (o *PostPreparationIDSourceNamePausePackJobIDOK) GetPayload() *models.ModelJob {
	return o.Payload
}

func (o *PostPreparationIDSourceNamePausePackJobIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelJob)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostPreparationIDSourceNamePausePackJobIDBadRequest creates a PostPreparationIDSourceNamePausePackJobIDBadRequest with default headers values
func NewPostPreparationIDSourceNamePausePackJobIDBadRequest() *PostPreparationIDSourceNamePausePackJobIDBadRequest {
	return &PostPreparationIDSourceNamePausePackJobIDBadRequest{}
}

/*
PostPreparationIDSourceNamePausePackJobIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostPreparationIDSourceNamePausePackJobIDBadRequest struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this post preparation Id source name pause pack job Id bad request response has a 2xx status code
func (o *PostPreparationIDSourceNamePausePackJobIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post preparation Id source name pause pack job Id bad request response has a 3xx status code
func (o *PostPreparationIDSourceNamePausePackJobIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post preparation Id source name pause pack job Id bad request response has a 4xx status code
func (o *PostPreparationIDSourceNamePausePackJobIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post preparation Id source name pause pack job Id bad request response has a 5xx status code
func (o *PostPreparationIDSourceNamePausePackJobIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post preparation Id source name pause pack job Id bad request response a status code equal to that given
func (o *PostPreparationIDSourceNamePausePackJobIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post preparation Id source name pause pack job Id bad request response
func (o *PostPreparationIDSourceNamePausePackJobIDBadRequest) Code() int {
	return 400
}

func (o *PostPreparationIDSourceNamePausePackJobIDBadRequest) Error() string {
	return fmt.Sprintf("[POST /preparation/{id}/source/{name}/pause-pack/{job_id}][%d] postPreparationIdSourceNamePausePackJobIdBadRequest  %+v", 400, o.Payload)
}

func (o *PostPreparationIDSourceNamePausePackJobIDBadRequest) String() string {
	return fmt.Sprintf("[POST /preparation/{id}/source/{name}/pause-pack/{job_id}][%d] postPreparationIdSourceNamePausePackJobIdBadRequest  %+v", 400, o.Payload)
}

func (o *PostPreparationIDSourceNamePausePackJobIDBadRequest) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PostPreparationIDSourceNamePausePackJobIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostPreparationIDSourceNamePausePackJobIDInternalServerError creates a PostPreparationIDSourceNamePausePackJobIDInternalServerError with default headers values
func NewPostPreparationIDSourceNamePausePackJobIDInternalServerError() *PostPreparationIDSourceNamePausePackJobIDInternalServerError {
	return &PostPreparationIDSourceNamePausePackJobIDInternalServerError{}
}

/*
PostPreparationIDSourceNamePausePackJobIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostPreparationIDSourceNamePausePackJobIDInternalServerError struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this post preparation Id source name pause pack job Id internal server error response has a 2xx status code
func (o *PostPreparationIDSourceNamePausePackJobIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post preparation Id source name pause pack job Id internal server error response has a 3xx status code
func (o *PostPreparationIDSourceNamePausePackJobIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post preparation Id source name pause pack job Id internal server error response has a 4xx status code
func (o *PostPreparationIDSourceNamePausePackJobIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post preparation Id source name pause pack job Id internal server error response has a 5xx status code
func (o *PostPreparationIDSourceNamePausePackJobIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post preparation Id source name pause pack job Id internal server error response a status code equal to that given
func (o *PostPreparationIDSourceNamePausePackJobIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post preparation Id source name pause pack job Id internal server error response
func (o *PostPreparationIDSourceNamePausePackJobIDInternalServerError) Code() int {
	return 500
}

func (o *PostPreparationIDSourceNamePausePackJobIDInternalServerError) Error() string {
	return fmt.Sprintf("[POST /preparation/{id}/source/{name}/pause-pack/{job_id}][%d] postPreparationIdSourceNamePausePackJobIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PostPreparationIDSourceNamePausePackJobIDInternalServerError) String() string {
	return fmt.Sprintf("[POST /preparation/{id}/source/{name}/pause-pack/{job_id}][%d] postPreparationIdSourceNamePausePackJobIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PostPreparationIDSourceNamePausePackJobIDInternalServerError) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PostPreparationIDSourceNamePausePackJobIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
