// Code generated by go-swagger; DO NOT EDIT.

package deal_schedule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/data-preservation-programs/singularity/client/swagger/models"
)

// PatchScheduleScheduleIDReader is a Reader for the PatchScheduleScheduleID structure.
type PatchScheduleScheduleIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchScheduleScheduleIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchScheduleScheduleIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchScheduleScheduleIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchScheduleScheduleIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /schedule/{scheduleId}] PatchScheduleScheduleID", response, response.Code())
	}
}

// NewPatchScheduleScheduleIDOK creates a PatchScheduleScheduleIDOK with default headers values
func NewPatchScheduleScheduleIDOK() *PatchScheduleScheduleIDOK {
	return &PatchScheduleScheduleIDOK{}
}

/*
PatchScheduleScheduleIDOK describes a response with status code 200, with default header values.

OK
*/
type PatchScheduleScheduleIDOK struct {
	Payload *models.ModelSchedule
}

// IsSuccess returns true when this patch schedule schedule Id o k response has a 2xx status code
func (o *PatchScheduleScheduleIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch schedule schedule Id o k response has a 3xx status code
func (o *PatchScheduleScheduleIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch schedule schedule Id o k response has a 4xx status code
func (o *PatchScheduleScheduleIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch schedule schedule Id o k response has a 5xx status code
func (o *PatchScheduleScheduleIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch schedule schedule Id o k response a status code equal to that given
func (o *PatchScheduleScheduleIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the patch schedule schedule Id o k response
func (o *PatchScheduleScheduleIDOK) Code() int {
	return 200
}

func (o *PatchScheduleScheduleIDOK) Error() string {
	return fmt.Sprintf("[PATCH /schedule/{scheduleId}][%d] patchScheduleScheduleIdOK  %+v", 200, o.Payload)
}

func (o *PatchScheduleScheduleIDOK) String() string {
	return fmt.Sprintf("[PATCH /schedule/{scheduleId}][%d] patchScheduleScheduleIdOK  %+v", 200, o.Payload)
}

func (o *PatchScheduleScheduleIDOK) GetPayload() *models.ModelSchedule {
	return o.Payload
}

func (o *PatchScheduleScheduleIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelSchedule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScheduleScheduleIDBadRequest creates a PatchScheduleScheduleIDBadRequest with default headers values
func NewPatchScheduleScheduleIDBadRequest() *PatchScheduleScheduleIDBadRequest {
	return &PatchScheduleScheduleIDBadRequest{}
}

/*
PatchScheduleScheduleIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PatchScheduleScheduleIDBadRequest struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this patch schedule schedule Id bad request response has a 2xx status code
func (o *PatchScheduleScheduleIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch schedule schedule Id bad request response has a 3xx status code
func (o *PatchScheduleScheduleIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch schedule schedule Id bad request response has a 4xx status code
func (o *PatchScheduleScheduleIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch schedule schedule Id bad request response has a 5xx status code
func (o *PatchScheduleScheduleIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch schedule schedule Id bad request response a status code equal to that given
func (o *PatchScheduleScheduleIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the patch schedule schedule Id bad request response
func (o *PatchScheduleScheduleIDBadRequest) Code() int {
	return 400
}

func (o *PatchScheduleScheduleIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /schedule/{scheduleId}][%d] patchScheduleScheduleIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchScheduleScheduleIDBadRequest) String() string {
	return fmt.Sprintf("[PATCH /schedule/{scheduleId}][%d] patchScheduleScheduleIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchScheduleScheduleIDBadRequest) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PatchScheduleScheduleIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchScheduleScheduleIDInternalServerError creates a PatchScheduleScheduleIDInternalServerError with default headers values
func NewPatchScheduleScheduleIDInternalServerError() *PatchScheduleScheduleIDInternalServerError {
	return &PatchScheduleScheduleIDInternalServerError{}
}

/*
PatchScheduleScheduleIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PatchScheduleScheduleIDInternalServerError struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this patch schedule schedule Id internal server error response has a 2xx status code
func (o *PatchScheduleScheduleIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch schedule schedule Id internal server error response has a 3xx status code
func (o *PatchScheduleScheduleIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch schedule schedule Id internal server error response has a 4xx status code
func (o *PatchScheduleScheduleIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch schedule schedule Id internal server error response has a 5xx status code
func (o *PatchScheduleScheduleIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch schedule schedule Id internal server error response a status code equal to that given
func (o *PatchScheduleScheduleIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the patch schedule schedule Id internal server error response
func (o *PatchScheduleScheduleIDInternalServerError) Code() int {
	return 500
}

func (o *PatchScheduleScheduleIDInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /schedule/{scheduleId}][%d] patchScheduleScheduleIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchScheduleScheduleIDInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /schedule/{scheduleId}][%d] patchScheduleScheduleIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchScheduleScheduleIDInternalServerError) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PatchScheduleScheduleIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
