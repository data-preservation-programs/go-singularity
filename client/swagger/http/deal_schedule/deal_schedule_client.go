// Code generated by go-swagger; DO NOT EDIT.

package deal_schedule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new deal schedule API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for deal schedule API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetPreparationIDSchedules(params *GetPreparationIDSchedulesParams, opts ...ClientOption) (*GetPreparationIDSchedulesOK, error)

	GetSchedules(params *GetSchedulesParams, opts ...ClientOption) (*GetSchedulesOK, error)

	PatchScheduleScheduleID(params *PatchScheduleScheduleIDParams, opts ...ClientOption) (*PatchScheduleScheduleIDOK, error)

	PostSchedule(params *PostScheduleParams, opts ...ClientOption) (*PostScheduleOK, error)

	PostScheduleIDPause(params *PostScheduleIDPauseParams, opts ...ClientOption) (*PostScheduleIDPauseOK, error)

	PostScheduleIDResume(params *PostScheduleIDResumeParams, opts ...ClientOption) (*PostScheduleIDResumeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetPreparationIDSchedules lists all schedules for a preparation
*/
func (a *Client) GetPreparationIDSchedules(params *GetPreparationIDSchedulesParams, opts ...ClientOption) (*GetPreparationIDSchedulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPreparationIDSchedulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPreparationIDSchedules",
		Method:             "GET",
		PathPattern:        "/preparation/{id}/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPreparationIDSchedulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPreparationIDSchedulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPreparationIDSchedules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSchedules lists all deal making schedules
*/
func (a *Client) GetSchedules(params *GetSchedulesParams, opts ...ClientOption) (*GetSchedulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSchedulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSchedules",
		Method:             "GET",
		PathPattern:        "/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSchedulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSchedulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSchedules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchScheduleScheduleID updates a schedule

Update a schedule
*/
func (a *Client) PatchScheduleScheduleID(params *PatchScheduleScheduleIDParams, opts ...ClientOption) (*PatchScheduleScheduleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchScheduleScheduleIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchScheduleScheduleID",
		Method:             "PATCH",
		PathPattern:        "/schedule/{scheduleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchScheduleScheduleIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchScheduleScheduleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchScheduleScheduleID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSchedule creates a new schedule

Create a new schedule
*/
func (a *Client) PostSchedule(params *PostScheduleParams, opts ...ClientOption) (*PostScheduleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSchedule",
		Method:             "POST",
		PathPattern:        "/schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostScheduleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostScheduleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSchedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostScheduleIDPause pauses a specific schedule
*/
func (a *Client) PostScheduleIDPause(params *PostScheduleIDPauseParams, opts ...ClientOption) (*PostScheduleIDPauseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostScheduleIDPauseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostScheduleIDPause",
		Method:             "POST",
		PathPattern:        "/schedule/{id}/pause",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostScheduleIDPauseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostScheduleIDPauseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostScheduleIDPause: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostScheduleIDResume resumes a specific schedule
*/
func (a *Client) PostScheduleIDResume(params *PostScheduleIDResumeParams, opts ...ClientOption) (*PostScheduleIDResumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostScheduleIDResumeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostScheduleIDResume",
		Method:             "POST",
		PathPattern:        "/schedule/{id}/resume",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostScheduleIDResumeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostScheduleIDResumeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostScheduleIDResume: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
