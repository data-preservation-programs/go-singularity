// Code generated by go-swagger; DO NOT EDIT.

package piece

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/data-preservation-programs/singularity/client/swagger/models"
)

// PostPreparationIDPieceReader is a Reader for the PostPreparationIDPiece structure.
type PostPreparationIDPieceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostPreparationIDPieceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostPreparationIDPieceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostPreparationIDPieceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostPreparationIDPieceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /preparation/{id}/piece] PostPreparationIDPiece", response, response.Code())
	}
}

// NewPostPreparationIDPieceOK creates a PostPreparationIDPieceOK with default headers values
func NewPostPreparationIDPieceOK() *PostPreparationIDPieceOK {
	return &PostPreparationIDPieceOK{}
}

/*
PostPreparationIDPieceOK describes a response with status code 200, with default header values.

OK
*/
type PostPreparationIDPieceOK struct {
	Payload *models.ModelCar
}

// IsSuccess returns true when this post preparation Id piece o k response has a 2xx status code
func (o *PostPreparationIDPieceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post preparation Id piece o k response has a 3xx status code
func (o *PostPreparationIDPieceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post preparation Id piece o k response has a 4xx status code
func (o *PostPreparationIDPieceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post preparation Id piece o k response has a 5xx status code
func (o *PostPreparationIDPieceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post preparation Id piece o k response a status code equal to that given
func (o *PostPreparationIDPieceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post preparation Id piece o k response
func (o *PostPreparationIDPieceOK) Code() int {
	return 200
}

func (o *PostPreparationIDPieceOK) Error() string {
	return fmt.Sprintf("[POST /preparation/{id}/piece][%d] postPreparationIdPieceOK  %+v", 200, o.Payload)
}

func (o *PostPreparationIDPieceOK) String() string {
	return fmt.Sprintf("[POST /preparation/{id}/piece][%d] postPreparationIdPieceOK  %+v", 200, o.Payload)
}

func (o *PostPreparationIDPieceOK) GetPayload() *models.ModelCar {
	return o.Payload
}

func (o *PostPreparationIDPieceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelCar)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostPreparationIDPieceBadRequest creates a PostPreparationIDPieceBadRequest with default headers values
func NewPostPreparationIDPieceBadRequest() *PostPreparationIDPieceBadRequest {
	return &PostPreparationIDPieceBadRequest{}
}

/*
PostPreparationIDPieceBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostPreparationIDPieceBadRequest struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this post preparation Id piece bad request response has a 2xx status code
func (o *PostPreparationIDPieceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post preparation Id piece bad request response has a 3xx status code
func (o *PostPreparationIDPieceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post preparation Id piece bad request response has a 4xx status code
func (o *PostPreparationIDPieceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post preparation Id piece bad request response has a 5xx status code
func (o *PostPreparationIDPieceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post preparation Id piece bad request response a status code equal to that given
func (o *PostPreparationIDPieceBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post preparation Id piece bad request response
func (o *PostPreparationIDPieceBadRequest) Code() int {
	return 400
}

func (o *PostPreparationIDPieceBadRequest) Error() string {
	return fmt.Sprintf("[POST /preparation/{id}/piece][%d] postPreparationIdPieceBadRequest  %+v", 400, o.Payload)
}

func (o *PostPreparationIDPieceBadRequest) String() string {
	return fmt.Sprintf("[POST /preparation/{id}/piece][%d] postPreparationIdPieceBadRequest  %+v", 400, o.Payload)
}

func (o *PostPreparationIDPieceBadRequest) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PostPreparationIDPieceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostPreparationIDPieceInternalServerError creates a PostPreparationIDPieceInternalServerError with default headers values
func NewPostPreparationIDPieceInternalServerError() *PostPreparationIDPieceInternalServerError {
	return &PostPreparationIDPieceInternalServerError{}
}

/*
PostPreparationIDPieceInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostPreparationIDPieceInternalServerError struct {
	Payload *models.APIHTTPError
}

// IsSuccess returns true when this post preparation Id piece internal server error response has a 2xx status code
func (o *PostPreparationIDPieceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post preparation Id piece internal server error response has a 3xx status code
func (o *PostPreparationIDPieceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post preparation Id piece internal server error response has a 4xx status code
func (o *PostPreparationIDPieceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post preparation Id piece internal server error response has a 5xx status code
func (o *PostPreparationIDPieceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post preparation Id piece internal server error response a status code equal to that given
func (o *PostPreparationIDPieceInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post preparation Id piece internal server error response
func (o *PostPreparationIDPieceInternalServerError) Code() int {
	return 500
}

func (o *PostPreparationIDPieceInternalServerError) Error() string {
	return fmt.Sprintf("[POST /preparation/{id}/piece][%d] postPreparationIdPieceInternalServerError  %+v", 500, o.Payload)
}

func (o *PostPreparationIDPieceInternalServerError) String() string {
	return fmt.Sprintf("[POST /preparation/{id}/piece][%d] postPreparationIdPieceInternalServerError  %+v", 500, o.Payload)
}

func (o *PostPreparationIDPieceInternalServerError) GetPayload() *models.APIHTTPError {
	return o.Payload
}

func (o *PostPreparationIDPieceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
