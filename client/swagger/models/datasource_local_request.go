// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatasourceLocalRequest datasource local request
//
// swagger:model datasource.LocalRequest
type DatasourceLocalRequest struct {

	// Force the filesystem to report itself as case insensitive.
	CaseInsensitive *string `json:"caseInsensitive,omitempty"`

	// Force the filesystem to report itself as case sensitive.
	CaseSensitive *string `json:"caseSensitive,omitempty"`

	// Follow symlinks and copy the pointed to item.
	CopyLinks *string `json:"copyLinks,omitempty"`

	// Delete the source after exporting to CAR files
	// Required: true
	DeleteAfterExport *bool `json:"deleteAfterExport"`

	// The encoding for the backend.
	Encoding *string `json:"encoding,omitempty"`

	// Translate symlinks to/from regular files with a '.rclonelink' extension.
	Links *string `json:"links,omitempty"`

	// Don't check to see if the files change during upload.
	NoCheckUpdated *string `json:"noCheckUpdated,omitempty"`

	// Disable preallocation of disk space for transferred files.
	NoPreallocate *string `json:"noPreallocate,omitempty"`

	// Disable setting modtime.
	NoSetModtime *string `json:"noSetModtime,omitempty"`

	// Disable sparse files for multi-thread downloads.
	NoSparse *string `json:"noSparse,omitempty"`

	// Disable UNC (long path names) conversion on Windows.
	Nounc *string `json:"nounc,omitempty"`

	// Don't cross filesystem boundaries (unix/macOS only).
	OneFileSystem *string `json:"oneFileSystem,omitempty"`

	// Automatically rescan the source directory when this interval has passed from last successful scan
	// Required: true
	RescanInterval *string `json:"rescanInterval"`

	// Starting state for scanning
	// Required: true
	ScanningState struct {
		ModelWorkState
	} `json:"scanningState"`

	// Don't warn about skipped symlinks.
	SkipLinks *string `json:"skipLinks,omitempty"`

	// The path of the source to scan files
	// Required: true
	SourcePath *string `json:"sourcePath"`

	// Apply unicode NFC normalization to paths and filenames.
	UnicodeNormalization *string `json:"unicodeNormalization,omitempty"`

	// Assume the Stat size of links is zero (and read them instead) (deprecated).
	ZeroSizeLinks *string `json:"zeroSizeLinks,omitempty"`
}

// Validate validates this datasource local request
func (m *DatasourceLocalRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeleteAfterExport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRescanInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScanningState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourcePath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatasourceLocalRequest) validateDeleteAfterExport(formats strfmt.Registry) error {

	if err := validate.Required("deleteAfterExport", "body", m.DeleteAfterExport); err != nil {
		return err
	}

	return nil
}

func (m *DatasourceLocalRequest) validateRescanInterval(formats strfmt.Registry) error {

	if err := validate.Required("rescanInterval", "body", m.RescanInterval); err != nil {
		return err
	}

	return nil
}

func (m *DatasourceLocalRequest) validateScanningState(formats strfmt.Registry) error {

	return nil
}

func (m *DatasourceLocalRequest) validateSourcePath(formats strfmt.Registry) error {

	if err := validate.Required("sourcePath", "body", m.SourcePath); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this datasource local request based on the context it is used
func (m *DatasourceLocalRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateScanningState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatasourceLocalRequest) contextValidateScanningState(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *DatasourceLocalRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatasourceLocalRequest) UnmarshalBinary(b []byte) error {
	var res DatasourceLocalRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
