// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ModelScheduleState model schedule state
//
// swagger:model model.ScheduleState
type ModelScheduleState string

func NewModelScheduleState(value ModelScheduleState) *ModelScheduleState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ModelScheduleState.
func (m ModelScheduleState) Pointer() *ModelScheduleState {
	return &m
}

const (

	// ModelScheduleStateActive captures enum value "active"
	ModelScheduleStateActive ModelScheduleState = "active"

	// ModelScheduleStatePaused captures enum value "paused"
	ModelScheduleStatePaused ModelScheduleState = "paused"

	// ModelScheduleStateError captures enum value "error"
	ModelScheduleStateError ModelScheduleState = "error"

	// ModelScheduleStateCompleted captures enum value "completed"
	ModelScheduleStateCompleted ModelScheduleState = "completed"
)

// for schema
var modelScheduleStateEnum []interface{}

func init() {
	var res []ModelScheduleState
	if err := json.Unmarshal([]byte(`["active","paused","error","completed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelScheduleStateEnum = append(modelScheduleStateEnum, v)
	}
}

func (m ModelScheduleState) validateModelScheduleStateEnum(path, location string, value ModelScheduleState) error {
	if err := validate.EnumCase(path, location, value, modelScheduleStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this model schedule state
func (m ModelScheduleState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateModelScheduleStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this model schedule state based on context it is used
func (m ModelScheduleState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
