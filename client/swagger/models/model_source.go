// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModelSource model source
//
// swagger:model model.Source
type ModelSource struct {

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// dag gen error message
	DagGenErrorMessage string `json:"dagGenErrorMessage,omitempty"`

	// dag gen state
	DagGenState ModelWorkState `json:"dagGenState,omitempty"`

	// dag gen worker Id
	DagGenWorkerID string `json:"dagGenWorkerId,omitempty"`

	// dataset Id
	DatasetID int64 `json:"datasetId,omitempty"`

	// delete after export
	DeleteAfterExport bool `json:"deleteAfterExport,omitempty"`

	// error message
	ErrorMessage string `json:"errorMessage,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// last scanned path
	LastScannedPath string `json:"lastScannedPath,omitempty"`

	// last scanned timestamp
	LastScannedTimestamp int64 `json:"lastScannedTimestamp,omitempty"`

	// metadata
	Metadata ModelMetadata `json:"metadata,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// scan interval seconds
	ScanIntervalSeconds int64 `json:"scanIntervalSeconds,omitempty"`

	// scanning state
	ScanningState ModelWorkState `json:"scanningState,omitempty"`

	// scanning worker Id
	ScanningWorkerID string `json:"scanningWorkerId,omitempty"`

	// type
	Type ModelSourceType `json:"type,omitempty"`

	// updated at
	UpdatedAt string `json:"updatedAt,omitempty"`
}

// Validate validates this model source
func (m *ModelSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDagGenState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScanningState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelSource) validateDagGenState(formats strfmt.Registry) error {
	if swag.IsZero(m.DagGenState) { // not required
		return nil
	}

	if err := m.DagGenState.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dagGenState")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dagGenState")
		}
		return err
	}

	return nil
}

func (m *ModelSource) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *ModelSource) validateScanningState(formats strfmt.Registry) error {
	if swag.IsZero(m.ScanningState) { // not required
		return nil
	}

	if err := m.ScanningState.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("scanningState")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("scanningState")
		}
		return err
	}

	return nil
}

func (m *ModelSource) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// ContextValidate validate this model source based on the context it is used
func (m *ModelSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDagGenState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScanningState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelSource) contextValidateDagGenState(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.DagGenState) { // not required
		return nil
	}

	if err := m.DagGenState.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dagGenState")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dagGenState")
		}
		return err
	}

	return nil
}

func (m *ModelSource) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("metadata")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("metadata")
		}
		return err
	}

	return nil
}

func (m *ModelSource) contextValidateScanningState(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ScanningState) { // not required
		return nil
	}

	if err := m.ScanningState.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("scanningState")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("scanningState")
		}
		return err
	}

	return nil
}

func (m *ModelSource) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelSource) UnmarshalBinary(b []byte) error {
	var res ModelSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
