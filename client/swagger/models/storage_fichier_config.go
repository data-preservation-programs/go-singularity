// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StorageFichierConfig storage fichier config
//
// swagger:model storage.fichierConfig
type StorageFichierConfig struct {

	// Your API Key, get it from https://1fichier.com/console/params.pl.
	APIKey string `json:"apiKey,omitempty"`

	// The encoding for the backend.
	Encoding *string `json:"encoding,omitempty"`

	// If you want to download a shared file that is password protected, add this parameter.
	FilePassword string `json:"filePassword,omitempty"`

	// If you want to list the files in a shared folder that is password protected, add this parameter.
	FolderPassword string `json:"folderPassword,omitempty"`

	// If you want to download a shared folder, add this parameter.
	SharedFolder string `json:"sharedFolder,omitempty"`
}

// Validate validates this storage fichier config
func (m *StorageFichierConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this storage fichier config based on context it is used
func (m *StorageFichierConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageFichierConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageFichierConfig) UnmarshalBinary(b []byte) error {
	var res StorageFichierConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
