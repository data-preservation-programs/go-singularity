// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StorageBoxConfig storage box config
//
// swagger:model storage.BoxConfig
type StorageBoxConfig struct {

	// Box App Primary Access Token
	AccessToken string `json:"accessToken,omitempty"`

	// Auth server URL.
	AuthURL string `json:"authUrl,omitempty"`

	// Box App config.json location
	BoxConfigFile string `json:"boxConfigFile,omitempty"`

	// box sub type
	// Example: user
	BoxSubType *string `json:"boxSubType,omitempty"`

	// OAuth Client Id.
	ClientID string `json:"clientId,omitempty"`

	// OAuth Client Secret.
	ClientSecret string `json:"clientSecret,omitempty"`

	// Max number of times to try committing a multipart file.
	CommitRetries *int64 `json:"commitRetries,omitempty"`

	// The encoding for the backend.
	Encoding *string `json:"encoding,omitempty"`

	// Size of listing chunk 1-1000.
	ListChunk *int64 `json:"listChunk,omitempty"`

	// Only show items owned by the login (email address) passed in.
	OwnedBy string `json:"ownedBy,omitempty"`

	// Fill in for rclone to use a non root folder as its starting point.
	RootFolderID *string `json:"rootFolderId,omitempty"`

	// OAuth Access Token as a JSON blob.
	Token string `json:"token,omitempty"`

	// Token server url.
	TokenURL string `json:"tokenUrl,omitempty"`

	// Cutoff for switching to multipart upload (>= 50 MiB).
	UploadCutoff *string `json:"uploadCutoff,omitempty"`
}

// Validate validates this storage box config
func (m *StorageBoxConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this storage box config based on context it is used
func (m *StorageBoxConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageBoxConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageBoxConfig) UnmarshalBinary(b []byte) error {
	var res StorageBoxConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
