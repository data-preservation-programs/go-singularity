// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatasourceFtpRequest datasource ftp request
//
// swagger:model datasource.FtpRequest
type DatasourceFtpRequest struct {

	// Allow asking for FTP password when needed.
	AskPassword *string `json:"askPassword,omitempty"`

	// Maximum time to wait for a response to close.
	CloseTimeout *string `json:"closeTimeout,omitempty"`

	// Maximum number of FTP simultaneous connections, 0 for unlimited.
	Concurrency *string `json:"concurrency,omitempty"`

	// Delete the source after exporting to CAR files
	// Required: true
	DeleteAfterExport *bool `json:"deleteAfterExport"`

	// Disable using EPSV even if server advertises support.
	DisableEpsv *string `json:"disableEpsv,omitempty"`

	// Disable using MLSD even if server advertises support.
	DisableMlsd *string `json:"disableMlsd,omitempty"`

	// Disable TLS 1.3 (workaround for FTP servers with buggy TLS)
	DisableTls13 *string `json:"disableTls13,omitempty"`

	// Disable using UTF-8 even if server advertises support.
	DisableUTF8 *string `json:"disableUtf8,omitempty"`

	// The encoding for the backend.
	Encoding *string `json:"encoding,omitempty"`

	// Use Explicit FTPS (FTP over TLS).
	ExplicitTLS *string `json:"explicitTls,omitempty"`

	// Use LIST -a to force listing of hidden files and folders. This will disable the use of MLSD.
	ForceListHidden *string `json:"forceListHidden,omitempty"`

	// FTP host to connect to.
	Host string `json:"host,omitempty"`

	// Max time before closing idle connections.
	IdleTimeout *string `json:"idleTimeout,omitempty"`

	// Do not verify the TLS certificate of the server.
	NoCheckCertificate *string `json:"noCheckCertificate,omitempty"`

	// FTP password.
	Pass string `json:"pass,omitempty"`

	// FTP port number.
	Port *string `json:"port,omitempty"`

	// Automatically rescan the source directory when this interval has passed from last successful scan
	// Required: true
	RescanInterval *string `json:"rescanInterval"`

	// Starting state for scanning
	// Required: true
	ScanningState struct {
		ModelWorkState
	} `json:"scanningState"`

	// Maximum time to wait for data connection closing status.
	ShutTimeout *string `json:"shutTimeout,omitempty"`

	// The path of the source to scan items
	// Required: true
	SourcePath *string `json:"sourcePath"`

	// Use Implicit FTPS (FTP over TLS).
	TLS *string `json:"tls,omitempty"`

	// Size of TLS session cache for all control and data connections.
	TLSCacheSize *string `json:"tlsCacheSize,omitempty"`

	// FTP username.
	User *string `json:"user,omitempty"`

	// Use MDTM to set modification time (VsFtpd quirk)
	WritingMdtm *string `json:"writingMdtm,omitempty"`
}

// Validate validates this datasource ftp request
func (m *DatasourceFtpRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeleteAfterExport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRescanInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScanningState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourcePath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatasourceFtpRequest) validateDeleteAfterExport(formats strfmt.Registry) error {

	if err := validate.Required("deleteAfterExport", "body", m.DeleteAfterExport); err != nil {
		return err
	}

	return nil
}

func (m *DatasourceFtpRequest) validateRescanInterval(formats strfmt.Registry) error {

	if err := validate.Required("rescanInterval", "body", m.RescanInterval); err != nil {
		return err
	}

	return nil
}

func (m *DatasourceFtpRequest) validateScanningState(formats strfmt.Registry) error {

	return nil
}

func (m *DatasourceFtpRequest) validateSourcePath(formats strfmt.Registry) error {

	if err := validate.Required("sourcePath", "body", m.SourcePath); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this datasource ftp request based on the context it is used
func (m *DatasourceFtpRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateScanningState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatasourceFtpRequest) contextValidateScanningState(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *DatasourceFtpRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatasourceFtpRequest) UnmarshalBinary(b []byte) error {
	var res DatasourceFtpRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
