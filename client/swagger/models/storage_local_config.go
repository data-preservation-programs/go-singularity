// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StorageLocalConfig storage local config
//
// swagger:model storage.LocalConfig
type StorageLocalConfig struct {

	// Force the filesystem to report itself as case insensitive.
	CaseInsensitive *bool `json:"caseInsensitive,omitempty"`

	// Force the filesystem to report itself as case sensitive.
	CaseSensitive *bool `json:"caseSensitive,omitempty"`

	// Follow symlinks and copy the pointed to item.
	CopyLinks *bool `json:"copyLinks,omitempty"`

	// The encoding for the backend.
	Encoding *string `json:"encoding,omitempty"`

	// Translate symlinks to/from regular files with a '.rclonelink' extension.
	Links *bool `json:"links,omitempty"`

	// Don't check to see if the files change during upload.
	NoCheckUpdated *bool `json:"noCheckUpdated,omitempty"`

	// Disable preallocation of disk space for transferred files.
	NoPreallocate *bool `json:"noPreallocate,omitempty"`

	// Disable setting modtime.
	NoSetModtime *bool `json:"noSetModtime,omitempty"`

	// Disable sparse files for multi-thread downloads.
	NoSparse *bool `json:"noSparse,omitempty"`

	// Disable UNC (long path names) conversion on Windows.
	// Example: true
	Nounc *bool `json:"nounc,omitempty"`

	// Don't cross filesystem boundaries (unix/macOS only).
	OneFileSystem *bool `json:"oneFileSystem,omitempty"`

	// Don't warn about skipped symlinks.
	SkipLinks *bool `json:"skipLinks,omitempty"`

	// Apply unicode NFC normalization to paths and filenames.
	UnicodeNormalization *bool `json:"unicodeNormalization,omitempty"`

	// Assume the Stat size of links is zero (and read them instead) (deprecated).
	ZeroSizeLinks *bool `json:"zeroSizeLinks,omitempty"`
}

// Validate validates this storage local config
func (m *StorageLocalConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this storage local config based on context it is used
func (m *StorageLocalConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageLocalConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageLocalConfig) UnmarshalBinary(b []byte) error {
	var res StorageLocalConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
