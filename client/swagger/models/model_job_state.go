// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ModelJobState model job state
//
// swagger:model model.JobState
type ModelJobState string

func NewModelJobState(value ModelJobState) *ModelJobState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ModelJobState.
func (m ModelJobState) Pointer() *ModelJobState {
	return &m
}

const (

	// ModelJobStateCreated captures enum value "created"
	ModelJobStateCreated ModelJobState = "created"

	// ModelJobStateReady captures enum value "ready"
	ModelJobStateReady ModelJobState = "ready"

	// ModelJobStatePaused captures enum value "paused"
	ModelJobStatePaused ModelJobState = "paused"

	// ModelJobStateProcessing captures enum value "processing"
	ModelJobStateProcessing ModelJobState = "processing"

	// ModelJobStateComplete captures enum value "complete"
	ModelJobStateComplete ModelJobState = "complete"

	// ModelJobStateError captures enum value "error"
	ModelJobStateError ModelJobState = "error"
)

// for schema
var modelJobStateEnum []interface{}

func init() {
	var res []ModelJobState
	if err := json.Unmarshal([]byte(`["created","ready","paused","processing","complete","error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelJobStateEnum = append(modelJobStateEnum, v)
	}
}

func (m ModelJobState) validateModelJobStateEnum(path, location string, value ModelJobState) error {
	if err := validate.EnumCase(path, location, value, modelJobStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this model job state
func (m ModelJobState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateModelJobStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this model job state based on context it is used
func (m ModelJobState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
