// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatasetCreateRequest dataset create request
//
// swagger:model dataset.CreateRequest
type DatasetCreateRequest struct {

	// Public key of the encryption recipient
	EncryptionRecipients []string `json:"encryptionRecipients"`

	// EncryptionScript command to run for custom encryption
	EncryptionScript string `json:"encryptionScript,omitempty"`

	// Maximum size of the CAR files to be created
	// Required: true
	MaxSize *string `json:"maxSize"`

	// Name must be a unique identifier for a dataset
	// Required: true
	Name *string `json:"name"`

	// Output directory for CAR files. Do not set if using inline preparation
	OutputDirs []string `json:"outputDirs"`

	// Target piece size of the CAR files used for piece commitment calculation
	PieceSize string `json:"pieceSize,omitempty"`
}

// Validate validates this dataset create request
func (m *DatasetCreateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaxSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatasetCreateRequest) validateMaxSize(formats strfmt.Registry) error {

	if err := validate.Required("maxSize", "body", m.MaxSize); err != nil {
		return err
	}

	return nil
}

func (m *DatasetCreateRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this dataset create request based on context it is used
func (m *DatasetCreateRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DatasetCreateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatasetCreateRequest) UnmarshalBinary(b []byte) error {
	var res DatasetCreateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
