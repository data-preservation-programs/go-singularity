// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatasourceAllConfig datasource all config
//
// swagger:model datasource.AllConfig
type DatasourceAllConfig struct {

	// Auth server URL.
	AcdAuthURL string `json:"acdAuthUrl,omitempty"`

	// Checkpoint for internal polling (debug).
	AcdCheckpoint string `json:"acdCheckpoint,omitempty"`

	// OAuth Client Id.
	AcdClientID string `json:"acdClientId,omitempty"`

	// OAuth Client Secret.
	AcdClientSecret string `json:"acdClientSecret,omitempty"`

	// The encoding for the backend.
	AcdEncoding *string `json:"acdEncoding,omitempty"`

	// Files >= this size will be downloaded via their tempLink.
	AcdTemplinkThreshold *string `json:"acdTemplinkThreshold,omitempty"`

	// OAuth Access Token as a JSON blob.
	AcdToken string `json:"acdToken,omitempty"`

	// Token server url.
	AcdTokenURL string `json:"acdTokenUrl,omitempty"`

	// Additional time per GiB to wait after a failed complete upload to see if it appears.
	AcdUploadWaitPerGb *string `json:"acdUploadWaitPerGb,omitempty"`

	// Access tier of blob: hot, cool or archive.
	AzureblobAccessTier string `json:"azureblobAccessTier,omitempty"`

	// Azure Storage Account Name.
	AzureblobAccount string `json:"azureblobAccount,omitempty"`

	// Delete archive tier blobs before overwriting.
	AzureblobArchiveTierDelete *string `json:"azureblobArchiveTierDelete,omitempty"`

	// Upload chunk size.
	AzureblobChunkSize *string `json:"azureblobChunkSize,omitempty"`

	// Password for the certificate file (optional).
	AzureblobClientCertificatePassword string `json:"azureblobClientCertificatePassword,omitempty"`

	// Path to a PEM or PKCS12 certificate file including the private key.
	AzureblobClientCertificatePath string `json:"azureblobClientCertificatePath,omitempty"`

	// The ID of the client in use.
	AzureblobClientID string `json:"azureblobClientId,omitempty"`

	// One of the service principal's client secrets
	AzureblobClientSecret string `json:"azureblobClientSecret,omitempty"`

	// Send the certificate chain when using certificate auth.
	AzureblobClientSendCertificateChain *string `json:"azureblobClientSendCertificateChain,omitempty"`

	// Don't store MD5 checksum with object metadata.
	AzureblobDisableChecksum *string `json:"azureblobDisableChecksum,omitempty"`

	// The encoding for the backend.
	AzureblobEncoding *string `json:"azureblobEncoding,omitempty"`

	// Endpoint for the service.
	AzureblobEndpoint string `json:"azureblobEndpoint,omitempty"`

	// Read credentials from runtime (environment variables, CLI or MSI).
	AzureblobEnvAuth *string `json:"azureblobEnvAuth,omitempty"`

	// Storage Account Shared Key.
	AzureblobKey string `json:"azureblobKey,omitempty"`

	// Size of blob list.
	AzureblobListChunk *string `json:"azureblobListChunk,omitempty"`

	// How often internal memory buffer pools will be flushed.
	AzureblobMemoryPoolFlushTime *string `json:"azureblobMemoryPoolFlushTime,omitempty"`

	// Whether to use mmap buffers in internal memory pool.
	AzureblobMemoryPoolUseMmap *string `json:"azureblobMemoryPoolUseMmap,omitempty"`

	// Object ID of the user-assigned MSI to use, if any.
	AzureblobMsiClientID string `json:"azureblobMsiClientId,omitempty"`

	// Azure resource ID of the user-assigned MSI to use, if any.
	AzureblobMsiMiResID string `json:"azureblobMsiMiResId,omitempty"`

	// Object ID of the user-assigned MSI to use, if any.
	AzureblobMsiObjectID string `json:"azureblobMsiObjectId,omitempty"`

	// If set, don't attempt to check the container exists or create it.
	AzureblobNoCheckContainer *string `json:"azureblobNoCheckContainer,omitempty"`

	// If set, do not do HEAD before GET when getting objects.
	AzureblobNoHeadObject *string `json:"azureblobNoHeadObject,omitempty"`

	// The user's password
	AzureblobPassword string `json:"azureblobPassword,omitempty"`

	// Public access level of a container: blob or container.
	AzureblobPublicAccess string `json:"azureblobPublicAccess,omitempty"`

	// SAS URL for container level access only.
	AzureblobSasURL string `json:"azureblobSasUrl,omitempty"`

	// Path to file containing credentials for use with a service principal.
	AzureblobServicePrincipalFile string `json:"azureblobServicePrincipalFile,omitempty"`

	// ID of the service principal's tenant. Also called its directory ID.
	AzureblobTenant string `json:"azureblobTenant,omitempty"`

	// Concurrency for multipart uploads.
	AzureblobUploadConcurrency *string `json:"azureblobUploadConcurrency,omitempty"`

	// Cutoff for switching to chunked upload (<= 256 MiB) (deprecated).
	AzureblobUploadCutoff string `json:"azureblobUploadCutoff,omitempty"`

	// Uses local storage emulator if provided as 'true'.
	AzureblobUseEmulator *string `json:"azureblobUseEmulator,omitempty"`

	// Use a managed service identity to authenticate (only works in Azure).
	AzureblobUseMsi *string `json:"azureblobUseMsi,omitempty"`

	// User name (usually an email address)
	AzureblobUsername string `json:"azureblobUsername,omitempty"`

	// Account ID or Application Key ID.
	B2Account string `json:"b2Account,omitempty"`

	// Upload chunk size.
	B2ChunkSize *string `json:"b2ChunkSize,omitempty"`

	// Cutoff for switching to multipart copy.
	B2CopyCutoff *string `json:"b2CopyCutoff,omitempty"`

	// Disable checksums for large (> upload cutoff) files.
	B2DisableChecksum *string `json:"b2DisableChecksum,omitempty"`

	// Time before the authorization token will expire in s or suffix ms|s|m|h|d.
	B2DownloadAuthDuration *string `json:"b2DownloadAuthDuration,omitempty"`

	// Custom endpoint for downloads.
	B2DownloadURL string `json:"b2DownloadUrl,omitempty"`

	// The encoding for the backend.
	B2Encoding *string `json:"b2Encoding,omitempty"`

	// Endpoint for the service.
	B2Endpoint string `json:"b2Endpoint,omitempty"`

	// Permanently delete files on remote removal, otherwise hide files.
	B2HardDelete *string `json:"b2HardDelete,omitempty"`

	// Application Key.
	B2Key string `json:"b2Key,omitempty"`

	// How often internal memory buffer pools will be flushed.
	B2MemoryPoolFlushTime *string `json:"b2MemoryPoolFlushTime,omitempty"`

	// Whether to use mmap buffers in internal memory pool.
	B2MemoryPoolUseMmap *string `json:"b2MemoryPoolUseMmap,omitempty"`

	// A flag string for X-Bz-Test-Mode header for debugging.
	B2TestMode string `json:"b2TestMode,omitempty"`

	// Cutoff for switching to chunked upload.
	B2UploadCutoff *string `json:"b2UploadCutoff,omitempty"`

	// Show file versions as they were at the specified time.
	B2VersionAt *string `json:"b2VersionAt,omitempty"`

	// Include old versions in directory listings.
	B2Versions *string `json:"b2Versions,omitempty"`

	// Box App Primary Access Token
	BoxAccessToken string `json:"boxAccessToken,omitempty"`

	// Auth server URL.
	BoxAuthURL string `json:"boxAuthUrl,omitempty"`

	// Box App config.json location
	BoxBoxConfigFile string `json:"boxBoxConfigFile,omitempty"`

	// box box sub type
	BoxBoxSubType *string `json:"boxBoxSubType,omitempty"`

	// OAuth Client Id.
	BoxClientID string `json:"boxClientId,omitempty"`

	// OAuth Client Secret.
	BoxClientSecret string `json:"boxClientSecret,omitempty"`

	// Max number of times to try committing a multipart file.
	BoxCommitRetries *string `json:"boxCommitRetries,omitempty"`

	// The encoding for the backend.
	BoxEncoding *string `json:"boxEncoding,omitempty"`

	// Size of listing chunk 1-1000.
	BoxListChunk *string `json:"boxListChunk,omitempty"`

	// Only show items owned by the login (email address) passed in.
	BoxOwnedBy string `json:"boxOwnedBy,omitempty"`

	// Fill in for rclone to use a non root folder as its starting point.
	BoxRootFolderID *string `json:"boxRootFolderId,omitempty"`

	// OAuth Access Token as a JSON blob.
	BoxToken string `json:"boxToken,omitempty"`

	// Token server url.
	BoxTokenURL string `json:"boxTokenUrl,omitempty"`

	// Cutoff for switching to multipart upload (>= 50 MiB).
	BoxUploadCutoff *string `json:"boxUploadCutoff,omitempty"`

	// Delete the source after exporting to CAR files
	DeleteAfterExport bool `json:"deleteAfterExport,omitempty"`

	// Set to allow files which return cannotDownloadAbusiveFile to be downloaded.
	DriveAcknowledgeAbuse *string `json:"driveAcknowledgeAbuse,omitempty"`

	// Allow the filetype to change when uploading Google docs.
	DriveAllowImportNameChange *string `json:"driveAllowImportNameChange,omitempty"`

	// Deprecated: No longer needed.
	DriveAlternateExport *string `json:"driveAlternateExport,omitempty"`

	// Only consider files owned by the authenticated user.
	DriveAuthOwnerOnly *string `json:"driveAuthOwnerOnly,omitempty"`

	// Auth server URL.
	DriveAuthURL string `json:"driveAuthUrl,omitempty"`

	// Upload chunk size.
	DriveChunkSize *string `json:"driveChunkSize,omitempty"`

	// Google Application Client Id
	DriveClientID string `json:"driveClientId,omitempty"`

	// OAuth Client Secret.
	DriveClientSecret string `json:"driveClientSecret,omitempty"`

	// Server side copy contents of shortcuts instead of the shortcut.
	DriveCopyShortcutContent *string `json:"driveCopyShortcutContent,omitempty"`

	// Disable drive using http2.
	DriveDisableHttp2 *string `json:"driveDisableHttp2,omitempty"`

	// The encoding for the backend.
	DriveEncoding *string `json:"driveEncoding,omitempty"`

	// Comma separated list of preferred formats for downloading Google docs.
	DriveExportFormats *string `json:"driveExportFormats,omitempty"`

	// Deprecated: See export_formats.
	DriveFormats string `json:"driveFormats,omitempty"`

	// Impersonate this user when using a service account.
	DriveImpersonate string `json:"driveImpersonate,omitempty"`

	// Comma separated list of preferred formats for uploading Google docs.
	DriveImportFormats string `json:"driveImportFormats,omitempty"`

	// Keep new head revision of each file forever.
	DriveKeepRevisionForever *string `json:"driveKeepRevisionForever,omitempty"`

	// Size of listing chunk 100-1000, 0 to disable.
	DriveListChunk *string `json:"driveListChunk,omitempty"`

	// Number of API calls to allow without sleeping.
	DrivePacerBurst *string `json:"drivePacerBurst,omitempty"`

	// Minimum time to sleep between API calls.
	DrivePacerMinSleep *string `json:"drivePacerMinSleep,omitempty"`

	// Resource key for accessing a link-shared file.
	DriveResourceKey string `json:"driveResourceKey,omitempty"`

	// ID of the root folder.
	DriveRootFolderID string `json:"driveRootFolderId,omitempty"`

	// Scope that rclone should use when requesting access from drive.
	DriveScope string `json:"driveScope,omitempty"`

	// Allow server-side operations (e.g. copy) to work across different drive configs.
	DriveServerSideAcrossConfigs *string `json:"driveServerSideAcrossConfigs,omitempty"`

	// Service Account Credentials JSON blob.
	DriveServiceAccountCredentials string `json:"driveServiceAccountCredentials,omitempty"`

	// Service Account Credentials JSON file path.
	DriveServiceAccountFile string `json:"driveServiceAccountFile,omitempty"`

	// Only show files that are shared with me.
	DriveSharedWithMe *string `json:"driveSharedWithMe,omitempty"`

	// Show sizes as storage quota usage, not actual size.
	DriveSizeAsQuota *string `json:"driveSizeAsQuota,omitempty"`

	// Skip MD5 checksum on Google photos and videos only.
	DriveSkipChecksumGphotos *string `json:"driveSkipChecksumGphotos,omitempty"`

	// If set skip dangling shortcut files.
	DriveSkipDanglingShortcuts *string `json:"driveSkipDanglingShortcuts,omitempty"`

	// Skip google documents in all listings.
	DriveSkipGdocs *string `json:"driveSkipGdocs,omitempty"`

	// If set skip shortcut files.
	DriveSkipShortcuts *string `json:"driveSkipShortcuts,omitempty"`

	// Only show files that are starred.
	DriveStarredOnly *string `json:"driveStarredOnly,omitempty"`

	// Make download limit errors be fatal.
	DriveStopOnDownloadLimit *string `json:"driveStopOnDownloadLimit,omitempty"`

	// Make upload limit errors be fatal.
	DriveStopOnUploadLimit *string `json:"driveStopOnUploadLimit,omitempty"`

	// ID of the Shared Drive (Team Drive).
	DriveTeamDrive string `json:"driveTeamDrive,omitempty"`

	// OAuth Access Token as a JSON blob.
	DriveToken string `json:"driveToken,omitempty"`

	// Token server url.
	DriveTokenURL string `json:"driveTokenUrl,omitempty"`

	// Only show files that are in the trash.
	DriveTrashedOnly *string `json:"driveTrashedOnly,omitempty"`

	// Cutoff for switching to chunked upload.
	DriveUploadCutoff *string `json:"driveUploadCutoff,omitempty"`

	// Use file created date instead of modified date.
	DriveUseCreatedDate *string `json:"driveUseCreatedDate,omitempty"`

	// Use date file was shared instead of modified date.
	DriveUseSharedDate *string `json:"driveUseSharedDate,omitempty"`

	// Send files to the trash instead of deleting permanently.
	DriveUseTrash *string `json:"driveUseTrash,omitempty"`

	// If Object's are greater, use drive v2 API to download.
	DriveV2DownloadMinSize *string `json:"driveV2DownloadMinSize,omitempty"`

	// Auth server URL.
	DropboxAuthURL string `json:"dropboxAuthUrl,omitempty"`

	// Max time to wait for a batch to finish committing
	DropboxBatchCommitTimeout *string `json:"dropboxBatchCommitTimeout,omitempty"`

	// Upload file batching sync|async|off.
	DropboxBatchMode *string `json:"dropboxBatchMode,omitempty"`

	// Max number of files in upload batch.
	DropboxBatchSize *string `json:"dropboxBatchSize,omitempty"`

	// Max time to allow an idle upload batch before uploading.
	DropboxBatchTimeout *string `json:"dropboxBatchTimeout,omitempty"`

	// Upload chunk size (< 150Mi).
	DropboxChunkSize *string `json:"dropboxChunkSize,omitempty"`

	// OAuth Client Id.
	DropboxClientID string `json:"dropboxClientId,omitempty"`

	// OAuth Client Secret.
	DropboxClientSecret string `json:"dropboxClientSecret,omitempty"`

	// The encoding for the backend.
	DropboxEncoding *string `json:"dropboxEncoding,omitempty"`

	// Impersonate this user when using a business account.
	DropboxImpersonate string `json:"dropboxImpersonate,omitempty"`

	// Instructs rclone to work on individual shared files.
	DropboxSharedFiles *string `json:"dropboxSharedFiles,omitempty"`

	// Instructs rclone to work on shared folders.
	DropboxSharedFolders *string `json:"dropboxSharedFolders,omitempty"`

	// OAuth Access Token as a JSON blob.
	DropboxToken string `json:"dropboxToken,omitempty"`

	// Token server url.
	DropboxTokenURL string `json:"dropboxTokenUrl,omitempty"`

	// Your API Key, get it from https://1fichier.com/console/params.pl.
	FichierAPIKey string `json:"fichierApiKey,omitempty"`

	// The encoding for the backend.
	FichierEncoding *string `json:"fichierEncoding,omitempty"`

	// If you want to download a shared file that is password protected, add this parameter.
	FichierFilePassword string `json:"fichierFilePassword,omitempty"`

	// If you want to list the files in a shared folder that is password protected, add this parameter.
	FichierFolderPassword string `json:"fichierFolderPassword,omitempty"`

	// If you want to download a shared folder, add this parameter.
	FichierSharedFolder string `json:"fichierSharedFolder,omitempty"`

	// The encoding for the backend.
	FilefabricEncoding *string `json:"filefabricEncoding,omitempty"`

	// Permanent Authentication Token.
	FilefabricPermanentToken string `json:"filefabricPermanentToken,omitempty"`

	// ID of the root folder.
	FilefabricRootFolderID string `json:"filefabricRootFolderId,omitempty"`

	// Session Token.
	FilefabricToken string `json:"filefabricToken,omitempty"`

	// Token expiry time.
	FilefabricTokenExpiry string `json:"filefabricTokenExpiry,omitempty"`

	// URL of the Enterprise File Fabric to connect to.
	FilefabricURL string `json:"filefabricUrl,omitempty"`

	// Version read from the file fabric.
	FilefabricVersion string `json:"filefabricVersion,omitempty"`

	// Allow asking for FTP password when needed.
	FtpAskPassword *string `json:"ftpAskPassword,omitempty"`

	// Maximum time to wait for a response to close.
	FtpCloseTimeout *string `json:"ftpCloseTimeout,omitempty"`

	// Maximum number of FTP simultaneous connections, 0 for unlimited.
	FtpConcurrency *string `json:"ftpConcurrency,omitempty"`

	// Disable using EPSV even if server advertises support.
	FtpDisableEpsv *string `json:"ftpDisableEpsv,omitempty"`

	// Disable using MLSD even if server advertises support.
	FtpDisableMlsd *string `json:"ftpDisableMlsd,omitempty"`

	// Disable TLS 1.3 (workaround for FTP servers with buggy TLS)
	FtpDisableTls13 *string `json:"ftpDisableTls13,omitempty"`

	// Disable using UTF-8 even if server advertises support.
	FtpDisableUTF8 *string `json:"ftpDisableUtf8,omitempty"`

	// The encoding for the backend.
	FtpEncoding *string `json:"ftpEncoding,omitempty"`

	// Use Explicit FTPS (FTP over TLS).
	FtpExplicitTLS *string `json:"ftpExplicitTls,omitempty"`

	// Use LIST -a to force listing of hidden files and folders. This will disable the use of MLSD.
	FtpForceListHidden *string `json:"ftpForceListHidden,omitempty"`

	// FTP host to connect to.
	FtpHost string `json:"ftpHost,omitempty"`

	// Max time before closing idle connections.
	FtpIdleTimeout *string `json:"ftpIdleTimeout,omitempty"`

	// Do not verify the TLS certificate of the server.
	FtpNoCheckCertificate *string `json:"ftpNoCheckCertificate,omitempty"`

	// FTP password.
	FtpPass string `json:"ftpPass,omitempty"`

	// FTP port number.
	FtpPort *string `json:"ftpPort,omitempty"`

	// Maximum time to wait for data connection closing status.
	FtpShutTimeout *string `json:"ftpShutTimeout,omitempty"`

	// Use Implicit FTPS (FTP over TLS).
	FtpTLS *string `json:"ftpTls,omitempty"`

	// Size of TLS session cache for all control and data connections.
	FtpTLSCacheSize *string `json:"ftpTlsCacheSize,omitempty"`

	// FTP username.
	FtpUser *string `json:"ftpUser,omitempty"`

	// Use MDTM to set modification time (VsFtpd quirk)
	FtpWritingMdtm *string `json:"ftpWritingMdtm,omitempty"`

	// Access public buckets and objects without credentials.
	GcsAnonymous *string `json:"gcsAnonymous,omitempty"`

	// Auth server URL.
	GcsAuthURL string `json:"gcsAuthUrl,omitempty"`

	// Access Control List for new buckets.
	GcsBucketACL string `json:"gcsBucketAcl,omitempty"`

	// Access checks should use bucket-level IAM policies.
	GcsBucketPolicyOnly *string `json:"gcsBucketPolicyOnly,omitempty"`

	// OAuth Client Id.
	GcsClientID string `json:"gcsClientId,omitempty"`

	// OAuth Client Secret.
	GcsClientSecret string `json:"gcsClientSecret,omitempty"`

	// If set this will decompress gzip encoded objects.
	GcsDecompress *string `json:"gcsDecompress,omitempty"`

	// The encoding for the backend.
	GcsEncoding *string `json:"gcsEncoding,omitempty"`

	// Endpoint for the service.
	GcsEndpoint string `json:"gcsEndpoint,omitempty"`

	// Get GCP IAM credentials from runtime (environment variables or instance meta data if no env vars).
	GcsEnvAuth *string `json:"gcsEnvAuth,omitempty"`

	// Location for the newly created buckets.
	GcsLocation string `json:"gcsLocation,omitempty"`

	// If set, don't attempt to check the bucket exists or create it.
	GcsNoCheckBucket *string `json:"gcsNoCheckBucket,omitempty"`

	// Access Control List for new objects.
	GcsObjectACL string `json:"gcsObjectAcl,omitempty"`

	// Project number.
	GcsProjectNumber string `json:"gcsProjectNumber,omitempty"`

	// Service Account Credentials JSON blob.
	GcsServiceAccountCredentials string `json:"gcsServiceAccountCredentials,omitempty"`

	// Service Account Credentials JSON file path.
	GcsServiceAccountFile string `json:"gcsServiceAccountFile,omitempty"`

	// The storage class to use when storing objects in Google Cloud Storage.
	GcsStorageClass string `json:"gcsStorageClass,omitempty"`

	// OAuth Access Token as a JSON blob.
	GcsToken string `json:"gcsToken,omitempty"`

	// Token server url.
	GcsTokenURL string `json:"gcsTokenUrl,omitempty"`

	// Auth server URL.
	GphotosAuthURL string `json:"gphotosAuthUrl,omitempty"`

	// OAuth Client Id.
	GphotosClientID string `json:"gphotosClientId,omitempty"`

	// OAuth Client Secret.
	GphotosClientSecret string `json:"gphotosClientSecret,omitempty"`

	// The encoding for the backend.
	GphotosEncoding *string `json:"gphotosEncoding,omitempty"`

	// Also view and download archived media.
	GphotosIncludeArchived *string `json:"gphotosIncludeArchived,omitempty"`

	// Set to make the Google Photos backend read only.
	GphotosReadOnly *string `json:"gphotosReadOnly,omitempty"`

	// Set to read the size of media items.
	GphotosReadSize *string `json:"gphotosReadSize,omitempty"`

	// Year limits the photos to be downloaded to those which are uploaded after the given year.
	GphotosStartYear *string `json:"gphotosStartYear,omitempty"`

	// OAuth Access Token as a JSON blob.
	GphotosToken string `json:"gphotosToken,omitempty"`

	// Token server url.
	GphotosTokenURL string `json:"gphotosTokenUrl,omitempty"`

	// Kerberos data transfer protection: authentication|integrity|privacy.
	HdfsDataTransferProtection string `json:"hdfsDataTransferProtection,omitempty"`

	// The encoding for the backend.
	HdfsEncoding *string `json:"hdfsEncoding,omitempty"`

	// Hadoop name node and port.
	HdfsNamenode string `json:"hdfsNamenode,omitempty"`

	// Kerberos service principal name for the namenode.
	HdfsServicePrincipalName string `json:"hdfsServicePrincipalName,omitempty"`

	// Hadoop user name.
	HdfsUsername string `json:"hdfsUsername,omitempty"`

	// Auth server URL.
	HidriveAuthURL string `json:"hidriveAuthUrl,omitempty"`

	// Chunksize for chunked uploads.
	HidriveChunkSize *string `json:"hidriveChunkSize,omitempty"`

	// OAuth Client Id.
	HidriveClientID string `json:"hidriveClientId,omitempty"`

	// OAuth Client Secret.
	HidriveClientSecret string `json:"hidriveClientSecret,omitempty"`

	// Do not fetch number of objects in directories unless it is absolutely necessary.
	HidriveDisableFetchingMemberCount *string `json:"hidriveDisableFetchingMemberCount,omitempty"`

	// The encoding for the backend.
	HidriveEncoding *string `json:"hidriveEncoding,omitempty"`

	// Endpoint for the service.
	HidriveEndpoint *string `json:"hidriveEndpoint,omitempty"`

	// The root/parent folder for all paths.
	HidriveRootPrefix *string `json:"hidriveRootPrefix,omitempty"`

	// Access permissions that rclone should use when requesting access from HiDrive.
	HidriveScopeAccess *string `json:"hidriveScopeAccess,omitempty"`

	// User-level that rclone should use when requesting access from HiDrive.
	HidriveScopeRole *string `json:"hidriveScopeRole,omitempty"`

	// OAuth Access Token as a JSON blob.
	HidriveToken string `json:"hidriveToken,omitempty"`

	// Token server url.
	HidriveTokenURL string `json:"hidriveTokenUrl,omitempty"`

	// Concurrency for chunked uploads.
	HidriveUploadConcurrency *string `json:"hidriveUploadConcurrency,omitempty"`

	// Cutoff/Threshold for chunked uploads.
	HidriveUploadCutoff *string `json:"hidriveUploadCutoff,omitempty"`

	// Set HTTP headers for all transactions.
	HTTPHeaders string `json:"httpHeaders,omitempty"`

	// Don't use HEAD requests.
	HTTPNoHead *string `json:"httpNoHead,omitempty"`

	// Set this if the site doesn't end directories with /.
	HTTPNoSlash *string `json:"httpNoSlash,omitempty"`

	// URL of HTTP host to connect to.
	HTTPURL string `json:"httpUrl,omitempty"`

	// IAS3 Access Key.
	InternetarchiveAccessKeyID string `json:"internetarchiveAccessKeyId,omitempty"`

	// Don't ask the server to test against MD5 checksum calculated by rclone.
	InternetarchiveDisableChecksum *string `json:"internetarchiveDisableChecksum,omitempty"`

	// The encoding for the backend.
	InternetarchiveEncoding *string `json:"internetarchiveEncoding,omitempty"`

	// IAS3 Endpoint.
	InternetarchiveEndpoint *string `json:"internetarchiveEndpoint,omitempty"`

	// Host of InternetArchive Frontend.
	InternetarchiveFrontEndpoint *string `json:"internetarchiveFrontEndpoint,omitempty"`

	// IAS3 Secret Key (password).
	InternetarchiveSecretAccessKey string `json:"internetarchiveSecretAccessKey,omitempty"`

	// Timeout for waiting the server's processing tasks (specifically archive and book_op) to finish.
	InternetarchiveWaitArchive *string `json:"internetarchiveWaitArchive,omitempty"`

	// The encoding for the backend.
	JottacloudEncoding *string `json:"jottacloudEncoding,omitempty"`

	// Delete files permanently rather than putting them into the trash.
	JottacloudHardDelete *string `json:"jottacloudHardDelete,omitempty"`

	// Files bigger than this will be cached on disk to calculate the MD5 if required.
	JottacloudMd5MemoryLimit *string `json:"jottacloudMd5MemoryLimit,omitempty"`

	// Avoid server side versioning by deleting files and recreating files instead of overwriting them.
	JottacloudNoVersions *string `json:"jottacloudNoVersions,omitempty"`

	// Only show files that are in the trash.
	JottacloudTrashedOnly *string `json:"jottacloudTrashedOnly,omitempty"`

	// Files bigger than this can be resumed if the upload fail's.
	JottacloudUploadResumeLimit *string `json:"jottacloudUploadResumeLimit,omitempty"`

	// The encoding for the backend.
	KoofrEncoding *string `json:"koofrEncoding,omitempty"`

	// The Koofr API endpoint to use.
	KoofrEndpoint string `json:"koofrEndpoint,omitempty"`

	// Mount ID of the mount to use.
	KoofrMountid string `json:"koofrMountid,omitempty"`

	// Your password for rclone (generate one at https://app.koofr.net/app/admin/preferences/password).
	KoofrPassword string `json:"koofrPassword,omitempty"`

	// Choose your storage provider.
	KoofrProvider string `json:"koofrProvider,omitempty"`

	// Does the backend support setting modification time.
	KoofrSetmtime *string `json:"koofrSetmtime,omitempty"`

	// Your user name.
	KoofrUser string `json:"koofrUser,omitempty"`

	// Force the filesystem to report itself as case insensitive.
	LocalCaseInsensitive *string `json:"localCaseInsensitive,omitempty"`

	// Force the filesystem to report itself as case sensitive.
	LocalCaseSensitive *string `json:"localCaseSensitive,omitempty"`

	// Follow symlinks and copy the pointed to item.
	LocalCopyLinks *string `json:"localCopyLinks,omitempty"`

	// The encoding for the backend.
	LocalEncoding *string `json:"localEncoding,omitempty"`

	// Translate symlinks to/from regular files with a '.rclonelink' extension.
	LocalLinks *string `json:"localLinks,omitempty"`

	// Don't check to see if the files change during upload.
	LocalNoCheckUpdated *string `json:"localNoCheckUpdated,omitempty"`

	// Disable preallocation of disk space for transferred files.
	LocalNoPreallocate *string `json:"localNoPreallocate,omitempty"`

	// Disable setting modtime.
	LocalNoSetModtime *string `json:"localNoSetModtime,omitempty"`

	// Disable sparse files for multi-thread downloads.
	LocalNoSparse *string `json:"localNoSparse,omitempty"`

	// Disable UNC (long path names) conversion on Windows.
	LocalNounc *string `json:"localNounc,omitempty"`

	// Don't cross filesystem boundaries (unix/macOS only).
	LocalOneFileSystem *string `json:"localOneFileSystem,omitempty"`

	// Don't warn about skipped symlinks.
	LocalSkipLinks *string `json:"localSkipLinks,omitempty"`

	// Apply unicode NFC normalization to paths and filenames.
	LocalUnicodeNormalization *string `json:"localUnicodeNormalization,omitempty"`

	// Assume the Stat size of links is zero (and read them instead) (deprecated).
	LocalZeroSizeLinks *string `json:"localZeroSizeLinks,omitempty"`

	// What should copy do if file checksum is mismatched or invalid.
	MailruCheckHash *string `json:"mailruCheckHash,omitempty"`

	// The encoding for the backend.
	MailruEncoding *string `json:"mailruEncoding,omitempty"`

	// Password.
	MailruPass string `json:"mailruPass,omitempty"`

	// Comma separated list of internal maintenance flags.
	MailruQuirks string `json:"mailruQuirks,omitempty"`

	// Skip full upload if there is another file with same data hash.
	MailruSpeedupEnable *string `json:"mailruSpeedupEnable,omitempty"`

	// Comma separated list of file name patterns eligible for speedup (put by hash).
	MailruSpeedupFilePatterns *string `json:"mailruSpeedupFilePatterns,omitempty"`

	// This option allows you to disable speedup (put by hash) for large files.
	MailruSpeedupMaxDisk *string `json:"mailruSpeedupMaxDisk,omitempty"`

	// Files larger than the size given below will always be hashed on disk.
	MailruSpeedupMaxMemory *string `json:"mailruSpeedupMaxMemory,omitempty"`

	// User name (usually email).
	MailruUser string `json:"mailruUser,omitempty"`

	// HTTP user agent used internally by client.
	MailruUserAgent string `json:"mailruUserAgent,omitempty"`

	// Output more debug from Mega.
	MegaDebug *string `json:"megaDebug,omitempty"`

	// The encoding for the backend.
	MegaEncoding *string `json:"megaEncoding,omitempty"`

	// Delete files permanently rather than putting them into the trash.
	MegaHardDelete *string `json:"megaHardDelete,omitempty"`

	// Password.
	MegaPass string `json:"megaPass,omitempty"`

	// Use HTTPS for transfers.
	MegaUseHTTPS *string `json:"megaUseHttps,omitempty"`

	// User name.
	MegaUser string `json:"megaUser,omitempty"`

	// Set the NetStorage account name
	NetstorageAccount string `json:"netstorageAccount,omitempty"`

	// Domain+path of NetStorage host to connect to.
	NetstorageHost string `json:"netstorageHost,omitempty"`

	// Select between HTTP or HTTPS protocol.
	NetstorageProtocol *string `json:"netstorageProtocol,omitempty"`

	// Set the NetStorage account secret/G2O key for authentication.
	NetstorageSecret string `json:"netstorageSecret,omitempty"`

	// Set scopes to be requested by rclone.
	OnedriveAccessScopes *string `json:"onedriveAccessScopes,omitempty"`

	// Auth server URL.
	OnedriveAuthURL string `json:"onedriveAuthUrl,omitempty"`

	// Chunk size to upload files with - must be multiple of 320k (327,680 bytes).
	OnedriveChunkSize *string `json:"onedriveChunkSize,omitempty"`

	// OAuth Client Id.
	OnedriveClientID string `json:"onedriveClientId,omitempty"`

	// OAuth Client Secret.
	OnedriveClientSecret string `json:"onedriveClientSecret,omitempty"`

	// Disable the request for Sites.Read.All permission.
	OnedriveDisableSitePermission *string `json:"onedriveDisableSitePermission,omitempty"`

	// The ID of the drive to use.
	OnedriveDriveID string `json:"onedriveDriveId,omitempty"`

	// The type of the drive (personal | business | documentLibrary).
	OnedriveDriveType string `json:"onedriveDriveType,omitempty"`

	// The encoding for the backend.
	OnedriveEncoding *string `json:"onedriveEncoding,omitempty"`

	// Set to make OneNote files show up in directory listings.
	OnedriveExposeOnenoteFiles *string `json:"onedriveExposeOnenoteFiles,omitempty"`

	// Specify the hash in use for the backend.
	OnedriveHashType *string `json:"onedriveHashType,omitempty"`

	// Set the password for links created by the link command.
	OnedriveLinkPassword string `json:"onedriveLinkPassword,omitempty"`

	// Set the scope of the links created by the link command.
	OnedriveLinkScope *string `json:"onedriveLinkScope,omitempty"`

	// Set the type of the links created by the link command.
	OnedriveLinkType *string `json:"onedriveLinkType,omitempty"`

	// Size of listing chunk.
	OnedriveListChunk *string `json:"onedriveListChunk,omitempty"`

	// Remove all versions on modifying operations.
	OnedriveNoVersions *string `json:"onedriveNoVersions,omitempty"`

	// Choose national cloud region for OneDrive.
	OnedriveRegion *string `json:"onedriveRegion,omitempty"`

	// ID of the root folder.
	OnedriveRootFolderID string `json:"onedriveRootFolderId,omitempty"`

	// Allow server-side operations (e.g. copy) to work across different onedrive configs.
	OnedriveServerSideAcrossConfigs *string `json:"onedriveServerSideAcrossConfigs,omitempty"`

	// OAuth Access Token as a JSON blob.
	OnedriveToken string `json:"onedriveToken,omitempty"`

	// Token server url.
	OnedriveTokenURL string `json:"onedriveTokenUrl,omitempty"`

	// Chunk size to use for uploading.
	OosChunkSize *string `json:"oosChunkSize,omitempty"`

	// Object storage compartment OCID
	OosCompartment string `json:"oosCompartment,omitempty"`

	// Path to OCI config file
	OosConfigFile *string `json:"oosConfigFile,omitempty"`

	// Profile name inside the oci config file
	OosConfigProfile *string `json:"oosConfigProfile,omitempty"`

	// Cutoff for switching to multipart copy.
	OosCopyCutoff *string `json:"oosCopyCutoff,omitempty"`

	// Timeout for copy.
	OosCopyTimeout *string `json:"oosCopyTimeout,omitempty"`

	// Don't store MD5 checksum with object metadata.
	OosDisableChecksum *string `json:"oosDisableChecksum,omitempty"`

	// The encoding for the backend.
	OosEncoding *string `json:"oosEncoding,omitempty"`

	// Endpoint for Object storage API.
	OosEndpoint string `json:"oosEndpoint,omitempty"`

	// If true avoid calling abort upload on a failure, leaving all successfully uploaded parts on S3 for manual recovery.
	OosLeavePartsOnError *string `json:"oosLeavePartsOnError,omitempty"`

	// Object storage namespace
	OosNamespace string `json:"oosNamespace,omitempty"`

	// If set, don't attempt to check the bucket exists or create it.
	OosNoCheckBucket *string `json:"oosNoCheckBucket,omitempty"`

	// Choose your Auth Provider
	OosProvider *string `json:"oosProvider,omitempty"`

	// Object storage Region
	OosRegion string `json:"oosRegion,omitempty"`

	// If using SSE-C, the optional header that specifies "AES256" as the encryption algorithm.
	OosSseCustomerAlgorithm string `json:"oosSseCustomerAlgorithm,omitempty"`

	// To use SSE-C, the optional header that specifies the base64-encoded 256-bit encryption key to use to
	OosSseCustomerKey string `json:"oosSseCustomerKey,omitempty"`

	// To use SSE-C, a file containing the base64-encoded string of the AES-256 encryption key associated
	OosSseCustomerKeyFile string `json:"oosSseCustomerKeyFile,omitempty"`

	// If using SSE-C, The optional header that specifies the base64-encoded SHA256 hash of the encryption
	OosSseCustomerKeySha256 string `json:"oosSseCustomerKeySha256,omitempty"`

	// if using using your own master key in vault, this header specifies the
	OosSseKmsKeyID string `json:"oosSseKmsKeyId,omitempty"`

	// The storage class to use when storing new objects in storage. https://docs.oracle.com/en-us/iaas/Content/Object/Concepts/understandingstoragetiers.htm
	OosStorageTier *string `json:"oosStorageTier,omitempty"`

	// Concurrency for multipart uploads.
	OosUploadConcurrency *string `json:"oosUploadConcurrency,omitempty"`

	// Cutoff for switching to chunked upload.
	OosUploadCutoff *string `json:"oosUploadCutoff,omitempty"`

	// Files will be uploaded in chunks this size.
	OpendriveChunkSize *string `json:"opendriveChunkSize,omitempty"`

	// The encoding for the backend.
	OpendriveEncoding *string `json:"opendriveEncoding,omitempty"`

	// Password.
	OpendrivePassword string `json:"opendrivePassword,omitempty"`

	// Username.
	OpendriveUsername string `json:"opendriveUsername,omitempty"`

	// Auth server URL.
	PcloudAuthURL string `json:"pcloudAuthUrl,omitempty"`

	// OAuth Client Id.
	PcloudClientID string `json:"pcloudClientId,omitempty"`

	// OAuth Client Secret.
	PcloudClientSecret string `json:"pcloudClientSecret,omitempty"`

	// The encoding for the backend.
	PcloudEncoding *string `json:"pcloudEncoding,omitempty"`

	// Hostname to connect to.
	PcloudHostname *string `json:"pcloudHostname,omitempty"`

	// Your pcloud password.
	PcloudPassword string `json:"pcloudPassword,omitempty"`

	// Fill in for rclone to use a non root folder as its starting point.
	PcloudRootFolderID *string `json:"pcloudRootFolderId,omitempty"`

	// OAuth Access Token as a JSON blob.
	PcloudToken string `json:"pcloudToken,omitempty"`

	// Token server url.
	PcloudTokenURL string `json:"pcloudTokenUrl,omitempty"`

	// Your pcloud username.
	PcloudUsername string `json:"pcloudUsername,omitempty"`

	// API Key.
	PremiumizemeAPIKey string `json:"premiumizemeApiKey,omitempty"`

	// The encoding for the backend.
	PremiumizemeEncoding *string `json:"premiumizemeEncoding,omitempty"`

	// The encoding for the backend.
	PutioEncoding *string `json:"putioEncoding,omitempty"`

	// QingStor Access Key ID.
	QingstorAccessKeyID string `json:"qingstorAccessKeyId,omitempty"`

	// Chunk size to use for uploading.
	QingstorChunkSize *string `json:"qingstorChunkSize,omitempty"`

	// Number of connection retries.
	QingstorConnectionRetries *string `json:"qingstorConnectionRetries,omitempty"`

	// The encoding for the backend.
	QingstorEncoding *string `json:"qingstorEncoding,omitempty"`

	// Enter an endpoint URL to connection QingStor API.
	QingstorEndpoint string `json:"qingstorEndpoint,omitempty"`

	// Get QingStor credentials from runtime.
	QingstorEnvAuth *string `json:"qingstorEnvAuth,omitempty"`

	// QingStor Secret Access Key (password).
	QingstorSecretAccessKey string `json:"qingstorSecretAccessKey,omitempty"`

	// Concurrency for multipart uploads.
	QingstorUploadConcurrency *string `json:"qingstorUploadConcurrency,omitempty"`

	// Cutoff for switching to chunked upload.
	QingstorUploadCutoff *string `json:"qingstorUploadCutoff,omitempty"`

	// Zone to connect to.
	QingstorZone string `json:"qingstorZone,omitempty"`

	// Automatically rescan the source directory when this interval has passed from last successful scan
	RescanInterval string `json:"rescanInterval,omitempty"`

	// AWS Access Key ID.
	S3AccessKeyID string `json:"s3AccessKeyId,omitempty"`

	// Canned ACL used when creating buckets and storing or copying objects.
	S3ACL string `json:"s3Acl,omitempty"`

	// Canned ACL used when creating buckets.
	S3BucketACL string `json:"s3BucketAcl,omitempty"`

	// Chunk size to use for uploading.
	S3ChunkSize *string `json:"s3ChunkSize,omitempty"`

	// Cutoff for switching to multipart copy.
	S3CopyCutoff *string `json:"s3CopyCutoff,omitempty"`

	// If set this will decompress gzip encoded objects.
	S3Decompress *string `json:"s3Decompress,omitempty"`

	// Don't store MD5 checksum with object metadata.
	S3DisableChecksum *string `json:"s3DisableChecksum,omitempty"`

	// Disable usage of http2 for S3 backends.
	S3DisableHttp2 *string `json:"s3DisableHttp2,omitempty"`

	// Custom endpoint for downloads.
	S3DownloadURL string `json:"s3DownloadUrl,omitempty"`

	// The encoding for the backend.
	S3Encoding *string `json:"s3Encoding,omitempty"`

	// Endpoint for S3 API.
	S3Endpoint string `json:"s3Endpoint,omitempty"`

	// Get AWS credentials from runtime (environment variables or EC2/ECS meta data if no env vars).
	S3EnvAuth *string `json:"s3EnvAuth,omitempty"`

	// If true use path style access if false use virtual hosted style.
	S3ForcePathStyle *string `json:"s3ForcePathStyle,omitempty"`

	// If true avoid calling abort upload on a failure, leaving all successfully uploaded parts on S3 for manual recovery.
	S3LeavePartsOnError *string `json:"s3LeavePartsOnError,omitempty"`

	// Size of listing chunk (response list for each ListObject S3 request).
	S3ListChunk *string `json:"s3ListChunk,omitempty"`

	// Whether to url encode listings: true/false/unset
	S3ListURLEncode *string `json:"s3ListUrlEncode,omitempty"`

	// Version of ListObjects to use: 1,2 or 0 for auto.
	S3ListVersion *string `json:"s3ListVersion,omitempty"`

	// Location constraint - must be set to match the Region.
	S3LocationConstraint string `json:"s3LocationConstraint,omitempty"`

	// Maximum number of parts in a multipart upload.
	S3MaxUploadParts *string `json:"s3MaxUploadParts,omitempty"`

	// How often internal memory buffer pools will be flushed.
	S3MemoryPoolFlushTime *string `json:"s3MemoryPoolFlushTime,omitempty"`

	// Whether to use mmap buffers in internal memory pool.
	S3MemoryPoolUseMmap *string `json:"s3MemoryPoolUseMmap,omitempty"`

	// Set this if the backend might gzip objects.
	S3MightGzip *string `json:"s3MightGzip,omitempty"`

	// If set, don't attempt to check the bucket exists or create it.
	S3NoCheckBucket *string `json:"s3NoCheckBucket,omitempty"`

	// If set, don't HEAD uploaded objects to check integrity.
	S3NoHead *string `json:"s3NoHead,omitempty"`

	// If set, do not do HEAD before GET when getting objects.
	S3NoHeadObject *string `json:"s3NoHeadObject,omitempty"`

	// Suppress setting and reading of system metadata
	S3NoSystemMetadata *string `json:"s3NoSystemMetadata,omitempty"`

	// Profile to use in the shared credentials file.
	S3Profile string `json:"s3Profile,omitempty"`

	// Choose your S3 provider.
	S3Provider string `json:"s3Provider,omitempty"`

	// Region to connect to.
	S3Region string `json:"s3Region,omitempty"`

	// Enables requester pays option when interacting with S3 bucket.
	S3RequesterPays *string `json:"s3RequesterPays,omitempty"`

	// AWS Secret Access Key (password).
	S3SecretAccessKey string `json:"s3SecretAccessKey,omitempty"`

	// The server-side encryption algorithm used when storing this object in S3.
	S3ServerSideEncryption string `json:"s3ServerSideEncryption,omitempty"`

	// An AWS session token.
	S3SessionToken string `json:"s3SessionToken,omitempty"`

	// Path to the shared credentials file.
	S3SharedCredentialsFile string `json:"s3SharedCredentialsFile,omitempty"`

	// If using SSE-C, the server-side encryption algorithm used when storing this object in S3.
	S3SseCustomerAlgorithm string `json:"s3SseCustomerAlgorithm,omitempty"`

	// To use SSE-C you may provide the secret encryption key used to encrypt/decrypt your data.
	S3SseCustomerKey string `json:"s3SseCustomerKey,omitempty"`

	// If using SSE-C you must provide the secret encryption key encoded in base64 format to encrypt/decrypt your data.
	S3SseCustomerKeyBase64 string `json:"s3SseCustomerKeyBase64,omitempty"`

	// If using SSE-C you may provide the secret encryption key MD5 checksum (optional).
	S3SseCustomerKeyMd5 string `json:"s3SseCustomerKeyMd5,omitempty"`

	// If using KMS ID you must provide the ARN of Key.
	S3SseKmsKeyID string `json:"s3SseKmsKeyId,omitempty"`

	// The storage class to use when storing new objects in S3.
	S3StorageClass string `json:"s3StorageClass,omitempty"`

	// Endpoint for STS.
	S3StsEndpoint string `json:"s3StsEndpoint,omitempty"`

	// Concurrency for multipart uploads.
	S3UploadConcurrency *string `json:"s3UploadConcurrency,omitempty"`

	// Cutoff for switching to chunked upload.
	S3UploadCutoff *string `json:"s3UploadCutoff,omitempty"`

	// If true use the AWS S3 accelerated endpoint.
	S3UseAccelerateEndpoint *string `json:"s3UseAccelerateEndpoint,omitempty"`

	// Whether to use ETag in multipart uploads for verification
	S3UseMultipartEtag *string `json:"s3UseMultipartEtag,omitempty"`

	// Whether to use a presigned request or PutObject for single part uploads
	S3UsePresignedRequest *string `json:"s3UsePresignedRequest,omitempty"`

	// If true use v2 authentication.
	S3V2Auth *string `json:"s3V2Auth,omitempty"`

	// Show file versions as they were at the specified time.
	S3VersionAt *string `json:"s3VersionAt,omitempty"`

	// Include old versions in directory listings.
	S3Versions *string `json:"s3Versions,omitempty"`

	// Starting state for scanning
	ScanningState struct {
		ModelWorkState
	} `json:"scanningState,omitempty"`

	// Two-factor authentication ('true' if the account has 2FA enabled).
	Seafile2fa *string `json:"seafile2fa,omitempty"`

	// Authentication token.
	SeafileAuthToken string `json:"seafileAuthToken,omitempty"`

	// Should rclone create a library if it doesn't exist.
	SeafileCreateLibrary *string `json:"seafileCreateLibrary,omitempty"`

	// The encoding for the backend.
	SeafileEncoding *string `json:"seafileEncoding,omitempty"`

	// Name of the library.
	SeafileLibrary string `json:"seafileLibrary,omitempty"`

	// Library password (for encrypted libraries only).
	SeafileLibraryKey string `json:"seafileLibraryKey,omitempty"`

	// Password.
	SeafilePass string `json:"seafilePass,omitempty"`

	// URL of seafile host to connect to.
	SeafileURL string `json:"seafileUrl,omitempty"`

	// User name (usually email address).
	SeafileUser string `json:"seafileUser,omitempty"`

	// Allow asking for SFTP password when needed.
	SftpAskPassword *string `json:"sftpAskPassword,omitempty"`

	// Upload and download chunk size.
	SftpChunkSize *string `json:"sftpChunkSize,omitempty"`

	// Space separated list of ciphers to be used for session encryption, ordered by preference.
	SftpCiphers string `json:"sftpCiphers,omitempty"`

	// The maximum number of outstanding requests for one file
	SftpConcurrency *string `json:"sftpConcurrency,omitempty"`

	// If set don't use concurrent reads.
	SftpDisableConcurrentReads *string `json:"sftpDisableConcurrentReads,omitempty"`

	// If set don't use concurrent writes.
	SftpDisableConcurrentWrites *string `json:"sftpDisableConcurrentWrites,omitempty"`

	// Disable the execution of SSH commands to determine if remote file hashing is available.
	SftpDisableHashcheck *string `json:"sftpDisableHashcheck,omitempty"`

	// SSH host to connect to.
	SftpHost string `json:"sftpHost,omitempty"`

	// Max time before closing idle connections.
	SftpIdleTimeout *string `json:"sftpIdleTimeout,omitempty"`

	// Space separated list of key exchange algorithms, ordered by preference.
	SftpKeyExchange string `json:"sftpKeyExchange,omitempty"`

	// Path to PEM-encoded private key file.
	SftpKeyFile string `json:"sftpKeyFile,omitempty"`

	// The passphrase to decrypt the PEM-encoded private key file.
	SftpKeyFilePass string `json:"sftpKeyFilePass,omitempty"`

	// Raw PEM-encoded private key.
	SftpKeyPem string `json:"sftpKeyPem,omitempty"`

	// When set forces the usage of the ssh-agent.
	SftpKeyUseAgent *string `json:"sftpKeyUseAgent,omitempty"`

	// Optional path to known_hosts file.
	SftpKnownHostsFile string `json:"sftpKnownHostsFile,omitempty"`

	// Space separated list of MACs (message authentication code) algorithms, ordered by preference.
	SftpMacs string `json:"sftpMacs,omitempty"`

	// The command used to read md5 hashes.
	SftpMd5sumCommand string `json:"sftpMd5sumCommand,omitempty"`

	// SSH password, leave blank to use ssh-agent.
	SftpPass string `json:"sftpPass,omitempty"`

	// Override path used by SSH shell commands.
	SftpPathOverride string `json:"sftpPathOverride,omitempty"`

	// SSH port number.
	SftpPort *string `json:"sftpPort,omitempty"`

	// Optional path to public key file.
	SftpPubkeyFile string `json:"sftpPubkeyFile,omitempty"`

	// Specifies the path or command to run a sftp server on the remote host.
	SftpServerCommand string `json:"sftpServerCommand,omitempty"`

	// Environment variables to pass to sftp and commands
	SftpSetEnv string `json:"sftpSetEnv,omitempty"`

	// Set the modified time on the remote if set.
	SftpSetModtime *string `json:"sftpSetModtime,omitempty"`

	// The command used to read sha1 hashes.
	SftpSha1sumCommand string `json:"sftpSha1sumCommand,omitempty"`

	// The type of SSH shell on remote server, if any.
	SftpShellType string `json:"sftpShellType,omitempty"`

	// Set to skip any symlinks and any other non regular files.
	SftpSkipLinks *string `json:"sftpSkipLinks,omitempty"`

	// Specifies the SSH2 subsystem on the remote host.
	SftpSubsystem *string `json:"sftpSubsystem,omitempty"`

	// If set use fstat instead of stat.
	SftpUseFstat *string `json:"sftpUseFstat,omitempty"`

	// Enable the use of insecure ciphers and key exchange methods.
	SftpUseInsecureCipher *string `json:"sftpUseInsecureCipher,omitempty"`

	// SSH username.
	SftpUser *string `json:"sftpUser,omitempty"`

	// Upload chunk size.
	SharefileChunkSize *string `json:"sharefileChunkSize,omitempty"`

	// The encoding for the backend.
	SharefileEncoding *string `json:"sharefileEncoding,omitempty"`

	// Endpoint for API calls.
	SharefileEndpoint string `json:"sharefileEndpoint,omitempty"`

	// ID of the root folder.
	SharefileRootFolderID string `json:"sharefileRootFolderId,omitempty"`

	// Cutoff for switching to multipart upload.
	SharefileUploadCutoff *string `json:"sharefileUploadCutoff,omitempty"`

	// Sia Daemon API Password.
	SiaAPIPassword string `json:"siaApiPassword,omitempty"`

	// Sia daemon API URL, like http://sia.daemon.host:9980.
	SiaAPIURL *string `json:"siaApiUrl,omitempty"`

	// The encoding for the backend.
	SiaEncoding *string `json:"siaEncoding,omitempty"`

	// Siad User Agent
	SiaUserAgent *string `json:"siaUserAgent,omitempty"`

	// Whether the server is configured to be case-insensitive.
	SmbCaseInsensitive *string `json:"smbCaseInsensitive,omitempty"`

	// Domain name for NTLM authentication.
	SmbDomain *string `json:"smbDomain,omitempty"`

	// The encoding for the backend.
	SmbEncoding *string `json:"smbEncoding,omitempty"`

	// Hide special shares (e.g. print$) which users aren't supposed to access.
	SmbHideSpecialShare *string `json:"smbHideSpecialShare,omitempty"`

	// SMB server hostname to connect to.
	SmbHost string `json:"smbHost,omitempty"`

	// Max time before closing idle connections.
	SmbIdleTimeout *string `json:"smbIdleTimeout,omitempty"`

	// SMB password.
	SmbPass string `json:"smbPass,omitempty"`

	// SMB port number.
	SmbPort *string `json:"smbPort,omitempty"`

	// Service principal name.
	SmbSpn string `json:"smbSpn,omitempty"`

	// SMB username.
	SmbUser *string `json:"smbUser,omitempty"`

	// The path of the source to scan files
	// Required: true
	SourcePath *string `json:"sourcePath"`

	// Access grant.
	StorjAccessGrant string `json:"storjAccessGrant,omitempty"`

	// API key.
	StorjAPIKey string `json:"storjApiKey,omitempty"`

	// Encryption passphrase.
	StorjPassphrase string `json:"storjPassphrase,omitempty"`

	// Choose an authentication method.
	StorjProvider *string `json:"storjProvider,omitempty"`

	// Satellite address.
	StorjSatelliteAddress *string `json:"storjSatelliteAddress,omitempty"`

	// Sugarsync Access Key ID.
	SugarsyncAccessKeyID string `json:"sugarsyncAccessKeyId,omitempty"`

	// Sugarsync App ID.
	SugarsyncAppID string `json:"sugarsyncAppId,omitempty"`

	// Sugarsync authorization.
	SugarsyncAuthorization string `json:"sugarsyncAuthorization,omitempty"`

	// Sugarsync authorization expiry.
	SugarsyncAuthorizationExpiry string `json:"sugarsyncAuthorizationExpiry,omitempty"`

	// Sugarsync deleted folder id.
	SugarsyncDeletedID string `json:"sugarsyncDeletedId,omitempty"`

	// The encoding for the backend.
	SugarsyncEncoding *string `json:"sugarsyncEncoding,omitempty"`

	// Permanently delete files if true
	SugarsyncHardDelete *string `json:"sugarsyncHardDelete,omitempty"`

	// Sugarsync Private Access Key.
	SugarsyncPrivateAccessKey string `json:"sugarsyncPrivateAccessKey,omitempty"`

	// Sugarsync refresh token.
	SugarsyncRefreshToken string `json:"sugarsyncRefreshToken,omitempty"`

	// Sugarsync root id.
	SugarsyncRootID string `json:"sugarsyncRootId,omitempty"`

	// Sugarsync user.
	SugarsyncUser string `json:"sugarsyncUser,omitempty"`

	// Application Credential ID (OS_APPLICATION_CREDENTIAL_ID).
	SwiftApplicationCredentialID string `json:"swiftApplicationCredentialId,omitempty"`

	// Application Credential Name (OS_APPLICATION_CREDENTIAL_NAME).
	SwiftApplicationCredentialName string `json:"swiftApplicationCredentialName,omitempty"`

	// Application Credential Secret (OS_APPLICATION_CREDENTIAL_SECRET).
	SwiftApplicationCredentialSecret string `json:"swiftApplicationCredentialSecret,omitempty"`

	// Authentication URL for server (OS_AUTH_URL).
	SwiftAuth string `json:"swiftAuth,omitempty"`

	// Auth Token from alternate authentication - optional (OS_AUTH_TOKEN).
	SwiftAuthToken string `json:"swiftAuthToken,omitempty"`

	// AuthVersion - optional - set to (1,2,3) if your auth URL has no version (ST_AUTH_VERSION).
	SwiftAuthVersion *string `json:"swiftAuthVersion,omitempty"`

	// Above this size files will be chunked into a _segments container.
	SwiftChunkSize *string `json:"swiftChunkSize,omitempty"`

	// User domain - optional (v3 auth) (OS_USER_DOMAIN_NAME)
	SwiftDomain string `json:"swiftDomain,omitempty"`

	// The encoding for the backend.
	SwiftEncoding *string `json:"swiftEncoding,omitempty"`

	// Endpoint type to choose from the service catalogue (OS_ENDPOINT_TYPE).
	SwiftEndpointType *string `json:"swiftEndpointType,omitempty"`

	// Get swift credentials from environment variables in standard OpenStack form.
	SwiftEnvAuth *string `json:"swiftEnvAuth,omitempty"`

	// API key or password (OS_PASSWORD).
	SwiftKey string `json:"swiftKey,omitempty"`

	// If true avoid calling abort upload on a failure.
	SwiftLeavePartsOnError *string `json:"swiftLeavePartsOnError,omitempty"`

	// Don't chunk files during streaming upload.
	SwiftNoChunk *string `json:"swiftNoChunk,omitempty"`

	// Disable support for static and dynamic large objects
	SwiftNoLargeObjects *string `json:"swiftNoLargeObjects,omitempty"`

	// Region name - optional (OS_REGION_NAME).
	SwiftRegion string `json:"swiftRegion,omitempty"`

	// The storage policy to use when creating a new container.
	SwiftStoragePolicy string `json:"swiftStoragePolicy,omitempty"`

	// Storage URL - optional (OS_STORAGE_URL).
	SwiftStorageURL string `json:"swiftStorageUrl,omitempty"`

	// Tenant name - optional for v1 auth, this or tenant_id required otherwise (OS_TENANT_NAME or OS_PROJECT_NAME).
	SwiftTenant string `json:"swiftTenant,omitempty"`

	// Tenant domain - optional (v3 auth) (OS_PROJECT_DOMAIN_NAME).
	SwiftTenantDomain string `json:"swiftTenantDomain,omitempty"`

	// Tenant ID - optional for v1 auth, this or tenant required otherwise (OS_TENANT_ID).
	SwiftTenantID string `json:"swiftTenantId,omitempty"`

	// User name to log in (OS_USERNAME).
	SwiftUser string `json:"swiftUser,omitempty"`

	// User ID to log in - optional - most swift systems use user and leave this blank (v3 auth) (OS_USER_ID).
	SwiftUserID string `json:"swiftUserId,omitempty"`

	// Your access token.
	UptoboxAccessToken string `json:"uptoboxAccessToken,omitempty"`

	// The encoding for the backend.
	UptoboxEncoding *string `json:"uptoboxEncoding,omitempty"`

	// Bearer token instead of user/pass (e.g. a Macaroon).
	WebdavBearerToken string `json:"webdavBearerToken,omitempty"`

	// Command to run to get a bearer token.
	WebdavBearerTokenCommand string `json:"webdavBearerTokenCommand,omitempty"`

	// The encoding for the backend.
	WebdavEncoding string `json:"webdavEncoding,omitempty"`

	// Set HTTP headers for all transactions.
	WebdavHeaders string `json:"webdavHeaders,omitempty"`

	// Password.
	WebdavPass string `json:"webdavPass,omitempty"`

	// URL of http host to connect to.
	WebdavURL string `json:"webdavUrl,omitempty"`

	// User name.
	WebdavUser string `json:"webdavUser,omitempty"`

	// Name of the WebDAV site/service/software you are using.
	WebdavVendor string `json:"webdavVendor,omitempty"`

	// Auth server URL.
	YandexAuthURL string `json:"yandexAuthUrl,omitempty"`

	// OAuth Client Id.
	YandexClientID string `json:"yandexClientId,omitempty"`

	// OAuth Client Secret.
	YandexClientSecret string `json:"yandexClientSecret,omitempty"`

	// The encoding for the backend.
	YandexEncoding *string `json:"yandexEncoding,omitempty"`

	// Delete files permanently rather than putting them into the trash.
	YandexHardDelete *string `json:"yandexHardDelete,omitempty"`

	// OAuth Access Token as a JSON blob.
	YandexToken string `json:"yandexToken,omitempty"`

	// Token server url.
	YandexTokenURL string `json:"yandexTokenUrl,omitempty"`

	// Auth server URL.
	ZohoAuthURL string `json:"zohoAuthUrl,omitempty"`

	// OAuth Client Id.
	ZohoClientID string `json:"zohoClientId,omitempty"`

	// OAuth Client Secret.
	ZohoClientSecret string `json:"zohoClientSecret,omitempty"`

	// The encoding for the backend.
	ZohoEncoding *string `json:"zohoEncoding,omitempty"`

	// Zoho region to connect to.
	ZohoRegion string `json:"zohoRegion,omitempty"`

	// OAuth Access Token as a JSON blob.
	ZohoToken string `json:"zohoToken,omitempty"`

	// Token server url.
	ZohoTokenURL string `json:"zohoTokenUrl,omitempty"`
}

// Validate validates this datasource all config
func (m *DatasourceAllConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScanningState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourcePath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatasourceAllConfig) validateScanningState(formats strfmt.Registry) error {
	if swag.IsZero(m.ScanningState) { // not required
		return nil
	}

	return nil
}

func (m *DatasourceAllConfig) validateSourcePath(formats strfmt.Registry) error {

	if err := validate.Required("sourcePath", "body", m.SourcePath); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this datasource all config based on the context it is used
func (m *DatasourceAllConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateScanningState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatasourceAllConfig) contextValidateScanningState(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *DatasourceAllConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatasourceAllConfig) UnmarshalBinary(b []byte) error {
	var res DatasourceAllConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
