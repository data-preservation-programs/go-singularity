// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatasourceMailruRequest datasource mailru request
//
// swagger:model datasource.MailruRequest
type DatasourceMailruRequest struct {

	// What should copy do if file checksum is mismatched or invalid.
	CheckHash *string `json:"checkHash,omitempty"`

	// Delete the source after exporting to CAR files
	// Required: true
	DeleteAfterExport *bool `json:"deleteAfterExport"`

	// The encoding for the backend.
	Encoding *string `json:"encoding,omitempty"`

	// Password.
	Pass string `json:"pass,omitempty"`

	// Comma separated list of internal maintenance flags.
	Quirks string `json:"quirks,omitempty"`

	// Automatically rescan the source directory when this interval has passed from last successful scan
	// Required: true
	RescanInterval *string `json:"rescanInterval"`

	// The path of the source to scan items
	// Required: true
	SourcePath *string `json:"sourcePath"`

	// Skip full upload if there is another file with same data hash.
	SpeedupEnable *string `json:"speedupEnable,omitempty"`

	// Comma separated list of file name patterns eligible for speedup (put by hash).
	SpeedupFilePatterns *string `json:"speedupFilePatterns,omitempty"`

	// This option allows you to disable speedup (put by hash) for large files.
	SpeedupMaxDisk *string `json:"speedupMaxDisk,omitempty"`

	// Files larger than the size given below will always be hashed on disk.
	SpeedupMaxMemory *string `json:"speedupMaxMemory,omitempty"`

	// User name (usually email).
	User string `json:"user,omitempty"`

	// HTTP user agent used internally by client.
	UserAgent string `json:"userAgent,omitempty"`
}

// Validate validates this datasource mailru request
func (m *DatasourceMailruRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeleteAfterExport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRescanInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourcePath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatasourceMailruRequest) validateDeleteAfterExport(formats strfmt.Registry) error {

	if err := validate.Required("deleteAfterExport", "body", m.DeleteAfterExport); err != nil {
		return err
	}

	return nil
}

func (m *DatasourceMailruRequest) validateRescanInterval(formats strfmt.Registry) error {

	if err := validate.Required("rescanInterval", "body", m.RescanInterval); err != nil {
		return err
	}

	return nil
}

func (m *DatasourceMailruRequest) validateSourcePath(formats strfmt.Registry) error {

	if err := validate.Required("sourcePath", "body", m.SourcePath); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this datasource mailru request based on context it is used
func (m *DatasourceMailruRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DatasourceMailruRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatasourceMailruRequest) UnmarshalBinary(b []byte) error {
	var res DatasourceMailruRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
