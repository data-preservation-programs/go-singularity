// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StorageAzureblobConfig storage azureblob config
//
// swagger:model storage.azureblobConfig
type StorageAzureblobConfig struct {

	// Access tier of blob: hot, cool or archive.
	AccessTier string `json:"accessTier,omitempty"`

	// Azure Storage Account Name.
	Account string `json:"account,omitempty"`

	// Delete archive tier blobs before overwriting.
	ArchiveTierDelete *bool `json:"archiveTierDelete,omitempty"`

	// Upload chunk size.
	ChunkSize *string `json:"chunkSize,omitempty"`

	// Password for the certificate file (optional).
	ClientCertificatePassword string `json:"clientCertificatePassword,omitempty"`

	// Path to a PEM or PKCS12 certificate file including the private key.
	ClientCertificatePath string `json:"clientCertificatePath,omitempty"`

	// The ID of the client in use.
	ClientID string `json:"clientId,omitempty"`

	// One of the service principal's client secrets
	ClientSecret string `json:"clientSecret,omitempty"`

	// Send the certificate chain when using certificate auth.
	ClientSendCertificateChain *bool `json:"clientSendCertificateChain,omitempty"`

	// Don't store MD5 checksum with object metadata.
	DisableChecksum *bool `json:"disableChecksum,omitempty"`

	// The encoding for the backend.
	Encoding *string `json:"encoding,omitempty"`

	// Endpoint for the service.
	Endpoint string `json:"endpoint,omitempty"`

	// Read credentials from runtime (environment variables, CLI or MSI).
	EnvAuth *bool `json:"envAuth,omitempty"`

	// Storage Account Shared Key.
	Key string `json:"key,omitempty"`

	// Size of blob list.
	ListChunk *int64 `json:"listChunk,omitempty"`

	// How often internal memory buffer pools will be flushed.
	MemoryPoolFlushTime *string `json:"memoryPoolFlushTime,omitempty"`

	// Whether to use mmap buffers in internal memory pool.
	MemoryPoolUseMmap *bool `json:"memoryPoolUseMmap,omitempty"`

	// Object ID of the user-assigned MSI to use, if any.
	MsiClientID string `json:"msiClientId,omitempty"`

	// Azure resource ID of the user-assigned MSI to use, if any.
	MsiMiResID string `json:"msiMiResId,omitempty"`

	// Object ID of the user-assigned MSI to use, if any.
	MsiObjectID string `json:"msiObjectId,omitempty"`

	// If set, don't attempt to check the container exists or create it.
	NoCheckContainer *bool `json:"noCheckContainer,omitempty"`

	// If set, do not do HEAD before GET when getting objects.
	NoHeadObject *bool `json:"noHeadObject,omitempty"`

	// The user's password
	Password string `json:"password,omitempty"`

	// Public access level of a container: blob or container.
	PublicAccess string `json:"publicAccess,omitempty"`

	// SAS URL for container level access only.
	SasURL string `json:"sasUrl,omitempty"`

	// Path to file containing credentials for use with a service principal.
	ServicePrincipalFile string `json:"servicePrincipalFile,omitempty"`

	// ID of the service principal's tenant. Also called its directory ID.
	Tenant string `json:"tenant,omitempty"`

	// Concurrency for multipart uploads.
	UploadConcurrency *int64 `json:"uploadConcurrency,omitempty"`

	// Cutoff for switching to chunked upload (<= 256 MiB) (deprecated).
	UploadCutoff string `json:"uploadCutoff,omitempty"`

	// Uses local storage emulator if provided as 'true'.
	UseEmulator *bool `json:"useEmulator,omitempty"`

	// Use a managed service identity to authenticate (only works in Azure).
	UseMsi *bool `json:"useMsi,omitempty"`

	// User name (usually an email address)
	Username string `json:"username,omitempty"`
}

// Validate validates this storage azureblob config
func (m *StorageAzureblobConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this storage azureblob config based on context it is used
func (m *StorageAzureblobConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageAzureblobConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageAzureblobConfig) UnmarshalBinary(b []byte) error {
	var res StorageAzureblobConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
