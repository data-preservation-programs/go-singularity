// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModelStorage model storage
//
// swagger:model model.Storage
type ModelStorage struct {

	// ClientConfig is the HTTP configuration for the storage, if applicable.
	ClientConfig struct {
		ModelClientConfig
	} `json:"clientConfig,omitempty"`

	// Config is a map of key-value pairs that can be used to store RClone options.
	Config struct {
		ModelConfigMap
	} `json:"config,omitempty"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Path is the path to the storage root.
	Path string `json:"path,omitempty"`

	// preparations as output
	PreparationsAsOutput []*ModelPreparation `json:"preparationsAsOutput"`

	// Associations
	PreparationsAsSource []*ModelPreparation `json:"preparationsAsSource"`

	// type
	Type string `json:"type,omitempty"`

	// updated at
	UpdatedAt string `json:"updatedAt,omitempty"`
}

// Validate validates this model storage
func (m *ModelStorage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreparationsAsOutput(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreparationsAsSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelStorage) validateClientConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientConfig) { // not required
		return nil
	}

	return nil
}

func (m *ModelStorage) validateConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.Config) { // not required
		return nil
	}

	return nil
}

func (m *ModelStorage) validatePreparationsAsOutput(formats strfmt.Registry) error {
	if swag.IsZero(m.PreparationsAsOutput) { // not required
		return nil
	}

	for i := 0; i < len(m.PreparationsAsOutput); i++ {
		if swag.IsZero(m.PreparationsAsOutput[i]) { // not required
			continue
		}

		if m.PreparationsAsOutput[i] != nil {
			if err := m.PreparationsAsOutput[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("preparationsAsOutput" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("preparationsAsOutput" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelStorage) validatePreparationsAsSource(formats strfmt.Registry) error {
	if swag.IsZero(m.PreparationsAsSource) { // not required
		return nil
	}

	for i := 0; i < len(m.PreparationsAsSource); i++ {
		if swag.IsZero(m.PreparationsAsSource[i]) { // not required
			continue
		}

		if m.PreparationsAsSource[i] != nil {
			if err := m.PreparationsAsSource[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("preparationsAsSource" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("preparationsAsSource" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this model storage based on the context it is used
func (m *ModelStorage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClientConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreparationsAsOutput(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreparationsAsSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelStorage) contextValidateClientConfig(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ModelStorage) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ModelStorage) contextValidatePreparationsAsOutput(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PreparationsAsOutput); i++ {

		if m.PreparationsAsOutput[i] != nil {

			if swag.IsZero(m.PreparationsAsOutput[i]) { // not required
				return nil
			}

			if err := m.PreparationsAsOutput[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("preparationsAsOutput" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("preparationsAsOutput" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelStorage) contextValidatePreparationsAsSource(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PreparationsAsSource); i++ {

		if m.PreparationsAsSource[i] != nil {

			if swag.IsZero(m.PreparationsAsSource[i]) { // not required
				return nil
			}

			if err := m.PreparationsAsSource[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("preparationsAsSource" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("preparationsAsSource" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelStorage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelStorage) UnmarshalBinary(b []byte) error {
	var res ModelStorage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
