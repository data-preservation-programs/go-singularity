// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StorageSeafileConfig storage seafile config
//
// swagger:model storage.SeafileConfig
type StorageSeafileConfig struct {

	// Two-factor authentication ('true' if the account has 2FA enabled).
	Nr2fa *bool `json:"2fa,omitempty"`

	// Authentication token.
	AuthToken string `json:"authToken,omitempty"`

	// Should rclone create a library if it doesn't exist.
	CreateLibrary *bool `json:"createLibrary,omitempty"`

	// The encoding for the backend.
	Encoding *string `json:"encoding,omitempty"`

	// Name of the library.
	Library string `json:"library,omitempty"`

	// Library password (for encrypted libraries only).
	LibraryKey string `json:"libraryKey,omitempty"`

	// Password.
	Pass string `json:"pass,omitempty"`

	// URL of seafile host to connect to.
	// Example: https://cloud.seafile.com/
	URL string `json:"url,omitempty"`

	// User name (usually email address).
	User string `json:"user,omitempty"`
}

// Validate validates this storage seafile config
func (m *StorageSeafileConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this storage seafile config based on context it is used
func (m *StorageSeafileConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageSeafileConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageSeafileConfig) UnmarshalBinary(b []byte) error {
	var res StorageSeafileConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
