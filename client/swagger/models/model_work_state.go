// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ModelWorkState model work state
//
// swagger:model model.WorkState
type ModelWorkState string

func NewModelWorkState(value ModelWorkState) *ModelWorkState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ModelWorkState.
func (m ModelWorkState) Pointer() *ModelWorkState {
	return &m
}

const (

	// ModelWorkStateCreated captures enum value "created"
	ModelWorkStateCreated ModelWorkState = "created"

	// ModelWorkStateReady captures enum value "ready"
	ModelWorkStateReady ModelWorkState = "ready"

	// ModelWorkStateProcessing captures enum value "processing"
	ModelWorkStateProcessing ModelWorkState = "processing"

	// ModelWorkStateComplete captures enum value "complete"
	ModelWorkStateComplete ModelWorkState = "complete"

	// ModelWorkStateError captures enum value "error"
	ModelWorkStateError ModelWorkState = "error"
)

// for schema
var modelWorkStateEnum []interface{}

func init() {
	var res []ModelWorkState
	if err := json.Unmarshal([]byte(`["created","ready","processing","complete","error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelWorkStateEnum = append(modelWorkStateEnum, v)
	}
}

func (m ModelWorkState) validateModelWorkStateEnum(path, location string, value ModelWorkState) error {
	if err := validate.EnumCase(path, location, value, modelWorkStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this model work state
func (m ModelWorkState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateModelWorkStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this model work state based on context it is used
func (m ModelWorkState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
