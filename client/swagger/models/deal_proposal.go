// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DealProposal deal proposal
//
// swagger:model deal.Proposal
type DealProposal struct {

	// Client address
	ClientAddress string `json:"clientAddress,omitempty"`

	// Duration in epoch or in duration format, i.e. 1500000, 2400h
	Duration *string `json:"duration,omitempty"`

	// File size in bytes for boost to fetch the CAR file
	FileSize int64 `json:"fileSize,omitempty"`

	// http headers to be passed with the request (i.e. key=value)
	HTTPHeaders []string `json:"httpHeaders"`

	// Whether the deal should be IPNI
	Ipni *bool `json:"ipni,omitempty"`

	// Whether the deal should be kept unsealed
	KeepUnsealed *bool `json:"keepUnsealed,omitempty"`

	// Piece CID
	PieceCid string `json:"pieceCid,omitempty"`

	// Piece size
	PieceSize string `json:"pieceSize,omitempty"`

	// Price in FIL per deal
	PricePerDeal float64 `json:"pricePerDeal,omitempty"`

	// Price in FIL  per GiB
	PricePerGb float64 `json:"pricePerGb,omitempty"`

	// Price in FIL per GiB per epoch
	PricePerGbEpoch float64 `json:"pricePerGbEpoch,omitempty"`

	// Provider ID
	ProviderID string `json:"providerId,omitempty"`

	// Root CID that is required as part of the deal proposal, if empty, will be set to empty CID
	RootCid *string `json:"rootCid,omitempty"`

	// Deal start delay in epoch or in duration format, i.e. 1000, 72h
	StartDelay *string `json:"startDelay,omitempty"`

	// URL template with PIECE_CID placeholder for boost to fetch the CAR file, i.e. http://127.0.0.1/piece/{PIECE_CID}.car
	URLTemplate string `json:"urlTemplate,omitempty"`

	// Whether the deal should be verified
	Verified *bool `json:"verified,omitempty"`
}

// Validate validates this deal proposal
func (m *DealProposal) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this deal proposal based on context it is used
func (m *DealProposal) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DealProposal) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DealProposal) UnmarshalBinary(b []byte) error {
	var res DealProposal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
