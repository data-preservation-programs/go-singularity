// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatasourceSmbRequest datasource smb request
//
// swagger:model datasource.SmbRequest
type DatasourceSmbRequest struct {

	// Whether the server is configured to be case-insensitive.
	CaseInsensitive *string `json:"caseInsensitive,omitempty"`

	// Delete the source after exporting to CAR files
	// Required: true
	DeleteAfterExport *bool `json:"deleteAfterExport"`

	// Domain name for NTLM authentication.
	Domain *string `json:"domain,omitempty"`

	// The encoding for the backend.
	Encoding *string `json:"encoding,omitempty"`

	// Hide special shares (e.g. print$) which users aren't supposed to access.
	HideSpecialShare *string `json:"hideSpecialShare,omitempty"`

	// SMB server hostname to connect to.
	Host string `json:"host,omitempty"`

	// Max time before closing idle connections.
	IdleTimeout *string `json:"idleTimeout,omitempty"`

	// SMB password.
	Pass string `json:"pass,omitempty"`

	// SMB port number.
	Port *string `json:"port,omitempty"`

	// Automatically rescan the source directory when this interval has passed from last successful scan
	// Required: true
	RescanInterval *string `json:"rescanInterval"`

	// The path of the source to scan items
	// Required: true
	SourcePath *string `json:"sourcePath"`

	// Service principal name.
	Spn string `json:"spn,omitempty"`

	// SMB username.
	User *string `json:"user,omitempty"`
}

// Validate validates this datasource smb request
func (m *DatasourceSmbRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeleteAfterExport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRescanInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourcePath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatasourceSmbRequest) validateDeleteAfterExport(formats strfmt.Registry) error {

	if err := validate.Required("deleteAfterExport", "body", m.DeleteAfterExport); err != nil {
		return err
	}

	return nil
}

func (m *DatasourceSmbRequest) validateRescanInterval(formats strfmt.Registry) error {

	if err := validate.Required("rescanInterval", "body", m.RescanInterval); err != nil {
		return err
	}

	return nil
}

func (m *DatasourceSmbRequest) validateSourcePath(formats strfmt.Registry) error {

	if err := validate.Required("sourcePath", "body", m.SourcePath); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this datasource smb request based on context it is used
func (m *DatasourceSmbRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DatasourceSmbRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatasourceSmbRequest) UnmarshalBinary(b []byte) error {
	var res DatasourceSmbRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
