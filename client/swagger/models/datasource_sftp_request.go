// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatasourceSftpRequest datasource sftp request
//
// swagger:model datasource.SftpRequest
type DatasourceSftpRequest struct {

	// Allow asking for SFTP password when needed.
	AskPassword *string `json:"askPassword,omitempty"`

	// Upload and download chunk size.
	ChunkSize *string `json:"chunkSize,omitempty"`

	// Space separated list of ciphers to be used for session encryption, ordered by preference.
	Ciphers string `json:"ciphers,omitempty"`

	// The maximum number of outstanding requests for one file
	Concurrency *string `json:"concurrency,omitempty"`

	// Delete the source after exporting to CAR files
	// Required: true
	DeleteAfterExport *bool `json:"deleteAfterExport"`

	// If set don't use concurrent reads.
	DisableConcurrentReads *string `json:"disableConcurrentReads,omitempty"`

	// If set don't use concurrent writes.
	DisableConcurrentWrites *string `json:"disableConcurrentWrites,omitempty"`

	// Disable the execution of SSH commands to determine if remote file hashing is available.
	DisableHashcheck *string `json:"disableHashcheck,omitempty"`

	// SSH host to connect to.
	Host string `json:"host,omitempty"`

	// Max time before closing idle connections.
	IdleTimeout *string `json:"idleTimeout,omitempty"`

	// Space separated list of key exchange algorithms, ordered by preference.
	KeyExchange string `json:"keyExchange,omitempty"`

	// Path to PEM-encoded private key file.
	KeyFile string `json:"keyFile,omitempty"`

	// The passphrase to decrypt the PEM-encoded private key file.
	KeyFilePass string `json:"keyFilePass,omitempty"`

	// Raw PEM-encoded private key.
	KeyPem string `json:"keyPem,omitempty"`

	// When set forces the usage of the ssh-agent.
	KeyUseAgent *string `json:"keyUseAgent,omitempty"`

	// Optional path to known_hosts file.
	KnownHostsFile string `json:"knownHostsFile,omitempty"`

	// Space separated list of MACs (message authentication code) algorithms, ordered by preference.
	Macs string `json:"macs,omitempty"`

	// The command used to read md5 hashes.
	Md5sumCommand string `json:"md5sumCommand,omitempty"`

	// SSH password, leave blank to use ssh-agent.
	Pass string `json:"pass,omitempty"`

	// Override path used by SSH shell commands.
	PathOverride string `json:"pathOverride,omitempty"`

	// SSH port number.
	Port *string `json:"port,omitempty"`

	// Optional path to public key file.
	PubkeyFile string `json:"pubkeyFile,omitempty"`

	// Automatically rescan the source directory when this interval has passed from last successful scan
	// Required: true
	RescanInterval *string `json:"rescanInterval"`

	// Starting state for scanning
	// Required: true
	ScanningState struct {
		ModelWorkState
	} `json:"scanningState"`

	// Specifies the path or command to run a sftp server on the remote host.
	ServerCommand string `json:"serverCommand,omitempty"`

	// Environment variables to pass to sftp and commands
	SetEnv string `json:"setEnv,omitempty"`

	// Set the modified time on the remote if set.
	SetModtime *string `json:"setModtime,omitempty"`

	// The command used to read sha1 hashes.
	Sha1sumCommand string `json:"sha1sumCommand,omitempty"`

	// The type of SSH shell on remote server, if any.
	ShellType string `json:"shellType,omitempty"`

	// Set to skip any symlinks and any other non regular files.
	SkipLinks *string `json:"skipLinks,omitempty"`

	// The path of the source to scan items
	// Required: true
	SourcePath *string `json:"sourcePath"`

	// Specifies the SSH2 subsystem on the remote host.
	Subsystem *string `json:"subsystem,omitempty"`

	// If set use fstat instead of stat.
	UseFstat *string `json:"useFstat,omitempty"`

	// Enable the use of insecure ciphers and key exchange methods.
	UseInsecureCipher *string `json:"useInsecureCipher,omitempty"`

	// SSH username.
	User *string `json:"user,omitempty"`
}

// Validate validates this datasource sftp request
func (m *DatasourceSftpRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeleteAfterExport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRescanInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScanningState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourcePath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatasourceSftpRequest) validateDeleteAfterExport(formats strfmt.Registry) error {

	if err := validate.Required("deleteAfterExport", "body", m.DeleteAfterExport); err != nil {
		return err
	}

	return nil
}

func (m *DatasourceSftpRequest) validateRescanInterval(formats strfmt.Registry) error {

	if err := validate.Required("rescanInterval", "body", m.RescanInterval); err != nil {
		return err
	}

	return nil
}

func (m *DatasourceSftpRequest) validateScanningState(formats strfmt.Registry) error {

	return nil
}

func (m *DatasourceSftpRequest) validateSourcePath(formats strfmt.Registry) error {

	if err := validate.Required("sourcePath", "body", m.SourcePath); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this datasource sftp request based on the context it is used
func (m *DatasourceSftpRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateScanningState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatasourceSftpRequest) contextValidateScanningState(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *DatasourceSftpRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatasourceSftpRequest) UnmarshalBinary(b []byte) error {
	var res DatasourceSftpRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
