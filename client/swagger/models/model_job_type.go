// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ModelJobType model job type
//
// swagger:model model.JobType
type ModelJobType string

func NewModelJobType(value ModelJobType) *ModelJobType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ModelJobType.
func (m ModelJobType) Pointer() *ModelJobType {
	return &m
}

const (

	// ModelJobTypeScan captures enum value "scan"
	ModelJobTypeScan ModelJobType = "scan"

	// ModelJobTypePack captures enum value "pack"
	ModelJobTypePack ModelJobType = "pack"

	// ModelJobTypeDaggen captures enum value "daggen"
	ModelJobTypeDaggen ModelJobType = "daggen"
)

// for schema
var modelJobTypeEnum []interface{}

func init() {
	var res []ModelJobType
	if err := json.Unmarshal([]byte(`["scan","pack","daggen"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelJobTypeEnum = append(modelJobTypeEnum, v)
	}
}

func (m ModelJobType) validateModelJobTypeEnum(path, location string, value ModelJobType) error {
	if err := validate.EnumCase(path, location, value, modelJobTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this model job type
func (m ModelJobType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateModelJobTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this model job type based on context it is used
func (m ModelJobType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
